;;;;;;;;;;;;;;;;;;;;;;;
firstReadCheckIfWeHaveBeenHereBefore := StoreLocally("r", "HT-Playground-fileSystemData")
if (firstReadCheckIfWeHaveBeenHereBefore === null)
{
fileSystemData := "root`n|dir*:10`n|main.hth:11"
FirstTimeHere := 1
StoreLocally("s", "HT-Playground-fileSystemData", fileSystemData)
StoreLocally("s", "HT-Playground-root/main.hth", "MsgBox, hello world")
StoreLocally("s", "HT-Playground-path", "root/main.hth")
StoreLocally("s", "HT-Playground-paths", "root/main.hth")
StoreLocally("s", "HT-Playground-HTHiframeScale", "1.00")
}
else
{
FirstTimeHere := 0
}

fileSystemData := StoreLocally("r", "HT-Playground-fileSystemData")
currentFilePath := StoreLocally("r", "HT-Playground-path")
currentFilePathContents := StoreLocally("r", "HT-Playground-" . currentFilePath)
HTHiframeScale := StoreLocally("r", "HT-Playground-HTHiframeScale")
;MsgBox, % currentFilePath
;MsgBox, % currentFilePathContents

Gui, Font, s18
Gui, Show, +websiteMode w%A_ScreenWidth% h%A_ScreenHeight%


boardW := A_ScreenWidth - 20
boardH := A_ScreenHeight - 20

IDEtext := ""
pyCode := "You need to run some HTpy code first"
HTMLcode := ""


exclude := 0
Gui 2: Color, c070707
Gui 2: Show, h%boardH% W%boardW%
if (A_ScreenWidth < A_ScreenHeight)
{
; its like a phone maybe

IDEw := boardW - 20
IDEh := ((boardH - (10 + 55 - 10)) / 2) - 50
initDisplayText := "MsgBox, hello world"
IDEtext := initDisplayText
Gui 2: Add, IDE, x10 y10 w%IDEw% h%IDEh% vIDE1 s13 gIDEtext lautohotkey, %initDisplayText%

EditY := IDEh + 10 + 10
EditW := (boardW / 2)
EditW2 := boardW - 20
EditH := ((boardH - (10 + 55 + 30 + 10)) / 2)
EditX := 10
Gui 2: Add, Edit, x10 y%EditY% w%EditW2% h%EditH% cffffff bg000000 vEdit1, You will see your output here...
GuiControl 2: Disable, Edit1


HTHiframeScaleXbutton := boardW - 5 - 90
HTHiframeScaleYbutton := EditY + 10 + 15
HTHiframeScaleXedit := boardW - 10 - 155
HTHiframeScaleYedit := EditY + 5
HTHiframeScaleEditText := "iframe scale = " . HTHiframeScale
Gui, Font, s13
Gui 2: Add, Edit, x%HTHiframeScaleXedit% y%HTHiframeScaleYedit% w155 h15 vHTHiframeScaleEdit gHTHiframeScaleEdit, %HTHiframeScaleEditText%
Gui, Font, s18
Gui 2: Add, Button, x%HTHiframeScaleXbutton% y%HTHiframeScaleYbutton% w90 h30 vHTHiframeScaleButton gHTHiframeScaleButton, Apply


ButtonY := EditY + EditH + 10 + 50
ButtonY2 := EditY + EditH + 10
Gui 2: Add, Button, x10 y%ButtonY% w140 h40 gRun, Run
Gui 2: Add, Button, x160 y%ButtonY% w200 h40 vSeePyCodeOrDownloadHTMLID gSeePyCodeOrDownloadHTML, See the python output

;;;
Gui 2: Add, Button, x10 y%ButtonY2% w140 h40 gOpenFileExplorer, Files
DisplayPathW := boardW - 165
Gui 2: Add, Text, x155 y%ButtonY2% w%DisplayPathW% h30 vDiplayPath, root/main.hth
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
Gui 4: Color, c070707
Gui 4: Show, h%boardH% W%boardW%
Gui 4: Add, Button, x15 y3 w90 h34 gGoBackDir r6, go back
Gui 4: Add, Button, x110 y3 w150 h34 gAddFileOrDir r6, add folder/file
closeGui4X := boardW - 72
Gui 4: Add, Button, x%closeGui4X% y3 w69 h34 cffffff bgff0000 gCloseFileExplorer, close
DiplayTextPathW := boardW - 20
Gui 4: Add, Text, x15 y45 w%DiplayTextPathW% h30 r6 vDiplayTextPath, root/


; add the file explorer
hOfBGdiv := boardH - 20 - 30 - 40
Gui 4: Add, Button, x10 y80 w210 h%hOfBGdiv% r10 bg303030 vBGdivHolder
GuiControl 4: Disable, BGdivHolder

; RULE!!!!!! only up to 14 chars long names
Gui 4: Font, s15
yDird := 50 + 40
Loop, 100
{
vDirFileButton := "vDirFileButton" . A_Index
vDirFileMore := "vDirFileMore" . A_Index
Gui 4: Add, Button, x20 y%yDird% w165 h40 gButtonDirFile v%vDirFileButton%
Gui 4: Add, Button, x190 y%yDird% w20 h40 gMoreDirFile v%vDirFileMore% fImpact, i
GuiControl 4: Hide, %vDirFileButton%
GuiControl 4: Hide, %vDirFileMore%
yDird := yDird + 50
}

TextButtonFileDirText := "root/"
; GUI for the choosing delete or rename
Gui 5: Show, w310 h120
Gui 5: Font, 20
Gui 5: Add, Text, x10 y20 w290 h40 vTextButtonFileDir, %TextButtonFileDirText%
Gui 5: Font, 15
Gui 5: Add, Button, x10 y70 w140 h40 vDeleteButtonFileDir gDeleteButtonFileDir, Delete
Gui 5: Add, Button, x160 y70 w140 h40 vRenameButtonFileDir gRenameButtonFileDir, Rename
Gui 5: Font, 20
Gui 5: Add, Button, x285 y5 h20 w20 bgFF0000 r2 gExitGui3
Gui 5: Font, 15
Gui 5: Hide

currentDir := "root/"

outShowDir := fileSystem(currentDir, "go", "")

currentDir := RegExReplace(currentDir, ":\\d{1," . StrLen(str(Date.now())) . "}", "")

Loop, 100
{
vDirFileButton := "vDirFileButton" . A_Index
vDirFileMore := "vDirFileMore" . A_Index
GuiControl 4: Hide, %vDirFileButton%
GuiControl 4: Hide, %vDirFileMore%

}

outShowDirFixAndSort := ""
outShowDirFixAndSort2 := ""
Loop, Parse, outShowDir, `n, `r
{
ALoopField := StrSplit(A_LoopField, ":", 2)
ALoopField2 := StrSplit(A_LoopField, ":", 1)
outShowDirFixAndSort .= ALoopField . ":" . ALoopField2 . "`n"

}
StringTrimRight, outShowDirFixAndSort, outShowDirFixAndSort, 1

Sort, outShowDirFixAndSort, N R
;MsgBox, % outShowDirFixAndSort
Loop, Parse, outShowDirFixAndSort, `n  `r
{
ALoopField := StrSplit(A_LoopField, ":", 2)

outShowDirFixAndSort2 .= ALoopField . "`n"
}
StringTrimRight, outShowDir, outShowDirFixAndSort2, 1
;MsgBox, % outShowDir


Loop, Parse, outShowDir, `n, `r
{
nothing := ""
ALoopField := StrReplace(A_LoopField, "|", nothing)
ALoopField := StrSplit(ALoopField, ":", 1)
vDirFileButton := "vDirFileButton" . A_Index
vDirFileMore := "vDirFileMore" . A_Index
GuiControl 4: Show, %vDirFileButton%
GuiControl 4: Show, %vDirFileMore%
GuiControl 4: Text, %vDirFileButton%, %ALoopField%
}


currentFilePathFixFirstTimeHere := ""
currentFilePathFixFirstTimeHereLast := ""
currentFilePathFixFirstTimeHereNum := 0
Loop, Parse, currentFilePath, "/"
{
if (A_LoopField != "")
{
currentFilePathFixFirstTimeHereNum := A_Index
currentFilePathFixFirstTimeHereLast := A_LoopField
}
}

Loop, Parse, currentFilePath, "/"
{
if (A_LoopField != "")
{
if (A_Index != currentFilePathFixFirstTimeHereNum)
{
currentFilePathFixFirstTimeHere .= A_LoopField . "/"
}
}
}

currentDir := currentFilePathFixFirstTimeHere

GuiControl 4: Text, DiplayTextPath, %currentDir%
outShowDir := fileSystem(currentDir, "go", "")

currentDir := RegExReplace(currentDir, ":\\d{1," . StrLen(str(Date.now())) . "}", "")

Loop, 100
{
vDirFileButton := "vDirFileButton" . A_Index
vDirFileMore := "vDirFileMore" . A_Index
GuiControl 4: Hide, %vDirFileButton%
GuiControl 4: Hide, %vDirFileMore%

}

outShowDirFixAndSort := ""
outShowDirFixAndSort2 := ""
Loop, Parse, outShowDir, `n, `r
{
ALoopField := StrSplit(A_LoopField, ":", 2)
ALoopField2 := StrSplit(A_LoopField, ":", 1)
outShowDirFixAndSort .= ALoopField . ":" . ALoopField2 . "`n"

}
StringTrimRight, outShowDirFixAndSort, outShowDirFixAndSort, 1

Sort, outShowDirFixAndSort, N R
;MsgBox, % outShowDirFixAndSort
Loop, Parse, outShowDirFixAndSort, `n  `r
{
ALoopField := StrSplit(A_LoopField, ":", 2)

outShowDirFixAndSort2 .= ALoopField . "`n"
}
StringTrimRight, outShowDir, outShowDirFixAndSort2, 1
;MsgBox, % outShowDir


Loop, Parse, outShowDir, `n, `r
{
nothing := ""
ALoopField := StrReplace(A_LoopField, "|", nothing)
ALoopField := StrSplit(ALoopField, ":", 1)
vDirFileButton := "vDirFileButton" . A_Index
vDirFileMore := "vDirFileMore" . A_Index
GuiControl 4: Show, %vDirFileButton%
GuiControl 4: Show, %vDirFileMore%
GuiControl 4: Text, %vDirFileButton%, %ALoopField%
}


Loop, Parse, outShowDir, `n, `r
{
ALoopField := StrSplit(A_LoopField, ":", 1)
ALoopField := StrReplace(ALoopField, "|", nothing)
if (ALoopField = currentFilePathFixFirstTimeHereLast)
{
ButtonDirFile("vDirFileButton" . A_Index)
break
}

}
currentDir := currentFilePathFixFirstTimeHere
GuiControl 4: Text, TextButtonFileDir, %currentDir%


Gui 4: Hide

} ; phone
else
{
; its like a computer maybe
Gui, Font, s18
IDEw := (boardW - 150) / 2
IDEh := boardH - (10 + 55) - 40
initDisplayText := "MsgBox, hello world"
IDEtext := initDisplayText
Gui 2: Add, IDE, x230 y40 w%IDEw% h%IDEh% vIDE1 s18 gIDEtext lautohotkey, %initDisplayText%

HTHiframeScaleXbutton := (boardW - 90) - 10
HTHiframeScaleXedit := (boardW - 155) - 110
HTHiframeScaleEditText := "iframe scale = " . HTHiframeScale
Gui, Font, s13
Gui 2: Add, Edit, x%HTHiframeScaleXedit% y10 w155 h15 vHTHiframeScaleEdit gHTHiframeScaleEdit, %HTHiframeScaleEditText%
Gui, Font, s18
Gui 2: Add, Button, x%HTHiframeScaleXbutton% y5 w90 h30 vHTHiframeScaleButton gHTHiframeScaleButton, Apply

EditX := IDEw + 20 + 220
EditY := 40
EditW := (boardW - 350) / 2
EditH := boardH - (10 + 55) - 40
Gui 2: Add, Edit, x%EditX% y%EditY% w%EditW% h%EditH% cffffff bg000000 vEdit1, You will see your output here...
GuiControl 2: Disable, Edit1

ButtonY := EditY + EditH + 10
Gui 2: Add, Button, x230 y%ButtonY% w140 h40 gRun, Run
Gui 2: Add, Button, x380 y%ButtonY% w200 h40 vSeePyCodeOrDownloadHTMLID gSeePyCodeOrDownloadHTML, See the python output
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
Gui 2: Add, Button, x10 y3 w90 h34 gGoBackDir r6, go back
Gui 2: Add, Button, x110 y3 w150 h34 gAddFileOrDir r6, add folder/file
DiplayTextPathW := boardW - 300 - 400
Gui 2: Add, Text, x270 y5 w%DiplayTextPathW% h30 vDiplayTextPath, root/

DisplayPathW := boardW - 600 - 20
Gui 2: Add, Text, x590 y%ButtonY% w%DisplayPathW% h30 vDiplayPath, root/main.hth




; add the file explorer
hOfBGdiv := boardH - 20 - 30
Gui 2: Add, Button, x10 y40 w210 h%hOfBGdiv% r10 bg303030 vBGdivHolder
GuiControl 2: Disable, BGdivHolder

; RULE!!!!!! only up to 14 chars long names
Gui 2: Font, s15
yDird := 50
Loop, 100
{
vDirFileButton := "vDirFileButton" . A_Index
vDirFileMore := "vDirFileMore" . A_Index
Gui 2: Add, Button, x20 y%yDird% w165 h40 gButtonDirFile v%vDirFileButton%
Gui 2: Add, Button, x190 y%yDird% w20 h40 gMoreDirFile v%vDirFileMore% fImpact, i
GuiControl 2: Hide, %vDirFileButton%
GuiControl 2: Hide, %vDirFileMore%
yDird := yDird + 50
}

TextButtonFileDirText := "root/"
; GUI for the choosing delete or rename
Gui 5: Show, w310 h120
Gui 5: Font, 20
Gui 5: Add, Text, x10 y20 w290 h40 vTextButtonFileDir, %TextButtonFileDirText%
Gui 5: Font, 15
Gui 5: Add, Button, x10 y70 w140 h40 vDeleteButtonFileDir gDeleteButtonFileDir, Delete
Gui 5: Add, Button, x160 y70 w140 h40 vRenameButtonFileDir gRenameButtonFileDir, Rename
Gui 5: Font, 20
Gui 5: Add, Button, x285 y5 h20 w20 bgFF0000 r2 gExitGui3
Gui 5: Font, 15
Gui 5: Hide

currentDir := "root/"

outShowDir := fileSystem(currentDir, "go", "")

currentDir := RegExReplace(currentDir, ":\\d{1," . StrLen(str(Date.now())) . "}", "")

Loop, 100
{
vDirFileButton := "vDirFileButton" . A_Index
vDirFileMore := "vDirFileMore" . A_Index
GuiControl 2: Hide, %vDirFileButton%
GuiControl 2: Hide, %vDirFileMore%

}

outShowDirFixAndSort := ""
outShowDirFixAndSort2 := ""
Loop, Parse, outShowDir, `n, `r
{
ALoopField := StrSplit(A_LoopField, ":", 2)
ALoopField2 := StrSplit(A_LoopField, ":", 1)
outShowDirFixAndSort .= ALoopField . ":" . ALoopField2 . "`n"

}
StringTrimRight, outShowDirFixAndSort, outShowDirFixAndSort, 1

Sort, outShowDirFixAndSort, N R
;MsgBox, % outShowDirFixAndSort
Loop, Parse, outShowDirFixAndSort, `n  `r
{
ALoopField := StrSplit(A_LoopField, ":", 2)

outShowDirFixAndSort2 .= ALoopField . "`n"
}
StringTrimRight, outShowDir, outShowDirFixAndSort2, 1
;MsgBox, % outShowDir


Loop, Parse, outShowDir, `n, `r
{
nothing := ""
ALoopField := StrReplace(A_LoopField, "|", nothing)
ALoopField := StrSplit(ALoopField, ":", 1)
vDirFileButton := "vDirFileButton" . A_Index
vDirFileMore := "vDirFileMore" . A_Index
GuiControl 2: Show, %vDirFileButton%
GuiControl 2: Show, %vDirFileMore%
GuiControl 2: Text, %vDirFileButton%, %ALoopField%
}


currentFilePathFixFirstTimeHere := ""
currentFilePathFixFirstTimeHereLast := ""
currentFilePathFixFirstTimeHereNum := 0
Loop, Parse, currentFilePath, "/"
{
if (A_LoopField != "")
{
currentFilePathFixFirstTimeHereNum := A_Index
currentFilePathFixFirstTimeHereLast := A_LoopField
}
}

Loop, Parse, currentFilePath, "/"
{
if (A_LoopField != "")
{
if (A_Index != currentFilePathFixFirstTimeHereNum)
{
currentFilePathFixFirstTimeHere .= A_LoopField . "/"
}
}
}

currentDir := currentFilePathFixFirstTimeHere
GuiControl 2: Text, DiplayTextPath, %currentDir%
outShowDir := fileSystem(currentDir, "go", "")

currentDir := RegExReplace(currentDir, ":\\d{1," . StrLen(str(Date.now())) . "}", "")

Loop, 100
{
vDirFileButton := "vDirFileButton" . A_Index
vDirFileMore := "vDirFileMore" . A_Index
GuiControl 2: Hide, %vDirFileButton%
GuiControl 2: Hide, %vDirFileMore%

}

outShowDirFixAndSort := ""
outShowDirFixAndSort2 := ""
Loop, Parse, outShowDir, `n, `r
{
ALoopField := StrSplit(A_LoopField, ":", 2)
ALoopField2 := StrSplit(A_LoopField, ":", 1)
outShowDirFixAndSort .= ALoopField . ":" . ALoopField2 . "`n"

}
StringTrimRight, outShowDirFixAndSort, outShowDirFixAndSort, 1

Sort, outShowDirFixAndSort, N R
;MsgBox, % outShowDirFixAndSort
Loop, Parse, outShowDirFixAndSort, `n  `r
{
ALoopField := StrSplit(A_LoopField, ":", 2)

outShowDirFixAndSort2 .= ALoopField . "`n"
}
StringTrimRight, outShowDir, outShowDirFixAndSort2, 1
;MsgBox, % outShowDir


Loop, Parse, outShowDir, `n, `r
{
nothing := ""
ALoopField := StrReplace(A_LoopField, "|", nothing)
ALoopField := StrSplit(ALoopField, ":", 1)
vDirFileButton := "vDirFileButton" . A_Index
vDirFileMore := "vDirFileMore" . A_Index
GuiControl 2: Show, %vDirFileButton%
GuiControl 2: Show, %vDirFileMore%
GuiControl 2: Text, %vDirFileButton%, %ALoopField%
}


Loop, Parse, outShowDir, `n, `r
{
ALoopField := StrSplit(A_LoopField, ":", 1)
ALoopField := StrReplace(ALoopField, "|", nothing)
if (ALoopField = currentFilePathFixFirstTimeHereLast)
{
ButtonDirFile("vDirFileButton" . A_Index)
break
}

}
currentDir := currentFilePathFixFirstTimeHere
GuiControl 2: Text, TextButtonFileDir, %currentDir%


} ; computer

return

HTHiframeScaleEdit:
tempHTHiframeScale := Trim(A_GuiControl)
Return

HTHiframeScaleButton:
if (!(RegExMatch(tempHTHiframeScale, "^\\d+(\\.\\d+)?$")))
{
MsgBox, 16, ERROR, You must enter a number or a floating number!
return
}
tempHTHiframeScaleNumFix := 0
Loop, Parse, tempHTHiframeScale
{
tempHTHiframeScaleNumFix++
}
if (tempHTHiframeScaleNumFix != 4)
{
MsgBox, 16, ERROR, You must enter a number in this format: x.xx
return
}

HTHiframeScale := tempHTHiframeScale
StoreLocally("s", "HT-Playground-HTHiframeScale", HTHiframeScale)
MsgBox, 64, , Now press the Run button again!
Return



;;;;;;;;;;;;;;;;;;;;

ExitGui3:
Gui 5: Hide
Return

OpenFileExplorer:
Gui 4: Show
Return
CloseFileExplorer:
Gui 4: Hide
Return



ButtonDirFile:

StringTrimLeft, dirOrFileNaneNum, A_GuiControl, 14
dirOrFileNaneNum := ParseInt(dirOrFileNaneNum)

Loop, Parse, outShowDir, `n, `r
{
if (A_Index = dirOrFileNaneNum)
{
nothing := ""
dirOrFileNane := StrReplace(A_LoopField, "|", nothing)
break
}
}


currentDir := StrReplace(currentDir, "//", "/")
if (!(InStr(dirOrFileNane, ".")))
{
currentDir := currentDir . dirOrFileNane . "/"
currentDir := RegExReplace(currentDir, ":\\d{1," . StrLen(str(Date.now())) . "}", "")
outShowDir := fileSystem(currentDir, "go", "")
;MsgBox, % outShowDir


Loop, 100
{
vDirFileButton := "vDirFileButton" . A_Index
vDirFileMore := "vDirFileMore" . A_Index
if (A_ScreenWidth < A_ScreenHeight)
{
GuiControl 4: Hide, %vDirFileButton%
GuiControl 4: Hide, %vDirFileMore%
}
else
{
GuiControl 2: Hide, %vDirFileButton%
GuiControl 2: Hide, %vDirFileMore%
}

}



Loop, Parse, outShowDir, `n, `r
{
nothing := ""
ALoopField := StrReplace(A_LoopField, "|", nothing)
ALoopField := StrSplit(ALoopField, ":", 1)
vDirFileButton := "vDirFileButton" . A_Index
vDirFileMore := "vDirFileMore" . A_Index
if (A_ScreenWidth < A_ScreenHeight)
{
GuiControl 4: Show, %vDirFileButton%
GuiControl 4: Show, %vDirFileMore%
GuiControl 4: Text, %vDirFileButton%, %ALoopField%
}
else
{
GuiControl 2: Show, %vDirFileButton%
GuiControl 2: Show, %vDirFileMore%
GuiControl 2: Text, %vDirFileButton%, %ALoopField%
}
}
currentDir := StrReplace(currentDir, "//", "/")
if (A_ScreenWidth < A_ScreenHeight)
{
GuiControl 4: Text, DiplayTextPath, %currentDir%
}
else
{
GuiControl 2: Text, DiplayTextPath, %currentDir%
}

}
else
{
; open the file
;MsgBox, open the file %currentDir%%dirOrFileNane%
currentDir := RegExReplace(currentDir, ":\\d{1," . StrLen(str(Date.now())) . "}", "")
currentFilePath := currentDir . dirOrFileNane
currentDir := RegExReplace(currentDir, ":\\d{1," . StrLen(str(Date.now())) . "}", "")
currentDir := StrReplace(currentDir, "//", "/")
currentFilePath := RegExReplace(currentFilePath, ":\\d{1," . StrLen(str(Date.now())) . "}", "")

if (InStr(currentFilePath, ".htpy"))
{
GuiControl 2: Show, Edit1
GuiControl 2: Hide, iframe1
GuiControl 2: Hide, HTHiframeScaleButton
GuiControl 2: Hide, HTHiframeScaleEdit
GuiControl 2: Text, SeePyCodeOrDownloadHTMLID, See the python output

}
else if (InStr(currentFilePath, ".hth"))
{
GuiControl 2: Hide, Edit1
GuiControl 2: Show, iframe1
GuiControl 2: Text, SeePyCodeOrDownloadHTMLID, Download the HTML
GuiControl 2: Show, HTHiframeScaleButton
GuiControl 2: Show, HTHiframeScaleEdit
}
else
{
GuiControl 2: Hide, Edit1
GuiControl 2: Hide, iframe1
GuiControl 2: Hide, HTHiframeScaleButton
GuiControl 2: Hide, HTHiframeScaleEdit
GuiControl 2: Text, SeePyCodeOrDownloadHTMLID, Others
}

if (A_ScreenWidth < A_ScreenHeight)
{
GuiControl 2: Text, DiplayPath, %currentFilePath%
}
else
{
GuiControl 2: Text, DiplayPath, %currentFilePath%
}

StoreLocally("s", "HT-Playground-path", currentFilePath)
IDEtextTransfer := StoreLocally("r", "HT-Playground-" . currentFilePath)
if (IDEtextTransfer === null)
{
IDEtextTransfer := "MsgBox, hello world"
}
if (A_ScreenWidth < A_ScreenHeight)
{
GuiControl 2: TextIDE, IDE1, %IDEtextTransfer%
}
else
{
GuiControl 2: TextIDE, IDE1, %IDEtextTransfer%
}


}

return
Return

GoBackDir:

currentDir := RegExReplace(currentDir, ":\\d{1," . StrLen(str(Date.now())) . "}", "")
;MsgBox, % currentDir
if (currentDir != "root/")
{
GoBackDirNum := 0
Loop, Parse, currentDir, "/"
{
if (A_LoopField != "")
{
GoBackDirNum++
GoBackDirTextPaths%A_Index% := A_LoopField
}
}
currentDir := ""
Loop, % GoBackDirNum - 1
{
currentDir .= GoBackDirTextPaths%A_Index% . "/"
}

if (A_ScreenWidth < A_ScreenHeight)
{
GuiControl 4: Text, DiplayTextPath, %currentDir%
}
else
{
GuiControl 2: Text, DiplayTextPath, %currentDir%
}



outShowDir := fileSystem(currentDir, "go", "")

currentDir := RegExReplace(currentDir, ":\\d{1," . StrLen(str(Date.now())) . "}", "")

Loop, 100
{
vDirFileButton := "vDirFileButton" . A_Index
vDirFileMore := "vDirFileMore" . A_Index
if (A_ScreenWidth < A_ScreenHeight)
{
GuiControl 4: Hide, %vDirFileButton%
GuiControl 4: Hide, %vDirFileMore%
}
else
{
GuiControl 2: Hide, %vDirFileButton%
GuiControl 2: Hide, %vDirFileMore%
}


}

outShowDirFixAndSort := ""
outShowDirFixAndSort2 := ""
Loop, Parse, outShowDir, `n, `r
{
ALoopField := StrSplit(A_LoopField, ":", 2)
ALoopField2 := StrSplit(A_LoopField, ":", 1)
outShowDirFixAndSort .= ALoopField . ":" . ALoopField2 . "`n"

}
StringTrimRight, outShowDirFixAndSort, outShowDirFixAndSort, 1

Sort, outShowDirFixAndSort, N R
;MsgBox, % outShowDirFixAndSort
Loop, Parse, outShowDirFixAndSort, `n  `r
{
ALoopField := StrSplit(A_LoopField, ":", 2)

outShowDirFixAndSort2 .= ALoopField . "`n"
}
StringTrimRight, outShowDir, outShowDirFixAndSort2, 1
;MsgBox, % outShowDir


Loop, Parse, outShowDir, `n, `r
{
nothing := ""
ALoopField := StrReplace(A_LoopField, "|", nothing)
ALoopField := StrSplit(ALoopField, ":", 1)
vDirFileButton := "vDirFileButton" . A_Index
vDirFileMore := "vDirFileMore" . A_Index
if (A_ScreenWidth < A_ScreenHeight)
{
GuiControl 4: Show, %vDirFileButton%
GuiControl 4: Show, %vDirFileMore%
GuiControl 4: Text, %vDirFileButton%, %ALoopField%
}
else
{
GuiControl 2: Show, %vDirFileButton%
GuiControl 2: Show, %vDirFileMore%
GuiControl 2: Text, %vDirFileButton%, %ALoopField%
}

}





}
else
{
MsgBox, You cant go back. You are in the root folder!
}

return
Return

AddFileOrDir:
InputBox, newFileOrDirName, Choose the name of a new folder or file. You can only use letters [a-z][A-Z] numbers underscores and a dot for the files. You cant make a directory with a dot inside the name!
if (newFileOrDirName === null)
{
return
}


if (InStr(newFileOrDirName, "."))
{
if (!RegExMatch(newFileOrDirName, "^[a-zA-Z0-9_]{1,8}\\.[a-zA-Z0-9_]{1,4}$"))
{
MsgBox, 16, ERROR, % "The filename should start with 1 to 8 letters or numbers, or underscores (_), followed by a dot (.) and 1 to 4 letters, numbers, or underscores."
return
}
}
else
{
if (!RegExMatch(newFileOrDirName, "^[a-zA-Z0-9_.]{1,12}$"))
{
MsgBox, 16, ERROR, % "The name must be alphanumeric (letters [a-z][A-Z], numbers [0-9]), allow underscores (_) and dots (.) for files, and be 12 characters or fewer in length."
return
}
}

currentDir := RegExReplace(currentDir, ":\\d{1," . StrLen(str(Date.now())) . "}", "")
;MsgBox, % currentDir . newFileOrDirName . "/"
outShowDir := fileSystem(currentDir, "go", "")

outShowDirFixAndSort := ""
outShowDirFixAndSort2 := ""
Loop, Parse, outShowDir, `n, `r
{
ALoopField := StrSplit(A_LoopField, ":", 2)
ALoopField2 := StrSplit(A_LoopField, ":", 1)
outShowDirFixAndSort .= ALoopField . ":" . ALoopField2 . "`n"

}
StringTrimRight, outShowDirFixAndSort, outShowDirFixAndSort, 1

Sort, outShowDirFixAndSort, N R
;MsgBox, % outShowDirFixAndSort
Loop, Parse, outShowDirFixAndSort, `n  `r
{
ALoopField := StrSplit(A_LoopField, ":", 2)

outShowDirFixAndSort2 .= ALoopField . "`n"
}
StringTrimRight, outShowDir, outShowDirFixAndSort2, 1
;MsgBox, % outShowDir

howManyDirsAndFilesWeHaveCuzIfItsOverAhundredWeCant := 0
Loop, Parse, outShowDir, `n, `r
{
howManyDirsAndFilesWeHaveCuzIfItsOverAhundredWeCant++
if (newFileOrDirName === A_LoopField)
{
MsgBox, 48, ERROR, You cannot create both a file and a folder with the same name as an existing file or folder in the current directory.
return
}
}
if (howManyDirsAndFilesWeHaveCuzIfItsOverAhundredWeCant >= 99)
{
MsgBox, 48, ERROR, You can only create up to 100 folders and files.
return
}


;;;;;;;;;
currentDir := RegExReplace(currentDir, ":\\d{1," . StrLen(str(Date.now())) . "}", "")
fileSystem(currentDir . newFileOrDirName . "/", "make", "")
currentDir := RegExReplace(currentDir, ":\\d{1," . StrLen(str(Date.now())) . "}", "")
outShowDir := fileSystem(currentDir, "go", "")
;MsgBox, % outShowDir

currentDir := RegExReplace(currentDir, ":\\d{1," . StrLen(str(Date.now())) . "}", "")
Loop, 100
{
vDirFileButton := "vDirFileButton" . A_Index
vDirFileMore := "vDirFileMore" . A_Index
if (A_ScreenWidth < A_ScreenHeight)
{
GuiControl 4: Hide, %vDirFileButton%
GuiControl 4: Hide, %vDirFileMore%
}
else
{
GuiControl 2: Hide, %vDirFileButton%
GuiControl 2: Hide, %vDirFileMore%
}


}

outShowDirFixAndSort := ""
outShowDirFixAndSort2 := ""
Loop, Parse, outShowDir, `n, `r
{
ALoopField := StrSplit(A_LoopField, ":", 2)
ALoopField2 := StrSplit(A_LoopField, ":", 1)
outShowDirFixAndSort .= ALoopField . ":" . ALoopField2 . "`n"

}
StringTrimRight, outShowDirFixAndSort, outShowDirFixAndSort, 1

Sort, outShowDirFixAndSort, N R
;MsgBox, % outShowDirFixAndSort
Loop, Parse, outShowDirFixAndSort, `n  `r
{
ALoopField := StrSplit(A_LoopField, ":", 2)

outShowDirFixAndSort2 .= ALoopField . "`n"
}
StringTrimRight, outShowDir, outShowDirFixAndSort2, 1
;MsgBox, % outShowDir


Loop, Parse, outShowDir, `n, `r
{
nothing := ""
ALoopField := StrReplace(A_LoopField, "|", nothing)
ALoopField := StrSplit(ALoopField, ":", 1)
vDirFileButton := "vDirFileButton" . A_Index
vDirFileMore := "vDirFileMore" . A_Index
if (A_ScreenWidth < A_ScreenHeight)
{
GuiControl 4: Show, %vDirFileButton%
GuiControl 4: Show, %vDirFileMore%
GuiControl 4: Text, %vDirFileButton%, %ALoopField%
}
else
{
GuiControl 2: Show, %vDirFileButton%
GuiControl 2: Show, %vDirFileMore%
GuiControl 2: Text, %vDirFileButton%, %ALoopField%
}

}


return
Return


MoreDirFile:



currentDir := RegExReplace(currentDir, ":\\d{1," . StrLen(str(Date.now())) . "}", "")
;MsgBox, % A_GuiControl
StringTrimLeft, dirOrFileNaneNum, A_GuiControl, 12
dirOrFileNaneNum := ParseInt(dirOrFileNaneNum)




Loop, Parse, outShowDir, `n, `r
{
if (A_Index = dirOrFileNaneNum)
{
nothing := ""
dirOrFileNane := StrReplace(A_LoopField, "|", nothing)
break
}
}
dirOrFileNane := RegExReplace(dirOrFileNane, ":\\d{1," . StrLen(str(Date.now())) . "}", "")
TextButtonFileDirText := dirOrFileNane
if (TextButtonFileDirText = "")
{
TextButtonFileDirText := Chr(34) . "This folder is empty" . Chr(34)
GuiControl 5: Hide, RenameButtonFileDir
GuiControl 5: Hide, DeleteButtonFileDir
}
else
{
GuiControl 5: Show, RenameButtonFileDir
GuiControl 5: Show, DeleteButtonFileDir
}
GuiControl 5: Text, TextButtonFileDir, %TextButtonFileDirText%
Gui 5: Show
theTagertFileORdirIs := currentDir . dirOrFileNane . "/"
theTagertFileORdirIs := RegExReplace(theTagertFileORdirIs, ":\\d{1," . StrLen(str(Date.now())) . "}", "")



return
Return

DeleteButtonFileDir:

Gui 5: Hide
fileSystemDataDOTcount := 0
Loop, Parse, fileSystemData
{
if (A_LoopField = ".")
{
fileSystemDataDOTcount++
}
}
if (InStr(theTagertFileORdirIs, "."))
{
if (fileSystemDataDOTcount <= 1)
{
MsgBox, 16, ERROR, % "You cannot delete this file because it is the only file left. You can rename it or create new files instead."
return
}
}
MsgBox, 292, , Are you sure?
IfMsgBox, Yes
{
fileSystem(theTagertFileORdirIs, "rm", "")
theTagertFileORdirIs := RegExReplace(theTagertFileORdirIs, ":\\d{1," . StrLen(str(Date.now())) . "}", "")
currentDir := RegExReplace(currentDir, ":\\d{1," . StrLen(str(Date.now())) . "}", "")
outShowDir := fileSystem(currentDir, "go", "")
;MsgBox, % theTagertFileORdirIs




currentDir := RegExReplace(currentDir, ":\\d{1," . StrLen(str(Date.now())) . "}", "")
Loop, 100
{
vDirFileButton := "vDirFileButton" . A_Index
vDirFileMore := "vDirFileMore" . A_Index
if (A_ScreenWidth < A_ScreenHeight)
{
GuiControl 4: Hide, %vDirFileButton%
GuiControl 4: Hide, %vDirFileMore%
}
else
{
GuiControl 2: Hide, %vDirFileButton%
GuiControl 2: Hide, %vDirFileMore%
}


}

outShowDirFixAndSort := ""
outShowDirFixAndSort2 := ""
Loop, Parse, outShowDir, `n, `r
{
ALoopField := StrSplit(A_LoopField, ":", 2)
ALoopField2 := StrSplit(A_LoopField, ":", 1)
outShowDirFixAndSort .= ALoopField . ":" . ALoopField2 . "`n"

}
StringTrimRight, outShowDirFixAndSort, outShowDirFixAndSort, 1

Sort, outShowDirFixAndSort, N R
;MsgBox, % outShowDirFixAndSort
Loop, Parse, outShowDirFixAndSort, `n  `r
{
ALoopField := StrSplit(A_LoopField, ":", 2)

outShowDirFixAndSort2 .= ALoopField . "`n"
}
StringTrimRight, outShowDir, outShowDirFixAndSort2, 1
;MsgBox, % outShowDir


Loop, Parse, outShowDir, `n, `r
{
nothing := ""
ALoopField := StrReplace(A_LoopField, "|", nothing)
ALoopField := StrSplit(ALoopField, ":", 1)
vDirFileButton := "vDirFileButton" . A_Index
vDirFileMore := "vDirFileMore" . A_Index
if (A_ScreenWidth < A_ScreenHeight)
{
GuiControl 4: Show, %vDirFileButton%
GuiControl 4: Show, %vDirFileMore%
GuiControl 4: Text, %vDirFileButton%, %ALoopField%
}
else
{
GuiControl 2: Show, %vDirFileButton%
GuiControl 2: Show, %vDirFileMore%
GuiControl 2: Text, %vDirFileButton%, %ALoopField%
}

}

if (InStr(theTagertFileORdirIs, "."))
{
if (SubStr(theTagertFileORdirIs, 0) = "/")
{
; Do something if the last character theTagertFileORdirIs Str is "/"
StringTrimRight, theTagertFileORdirIs, theTagertFileORdirIs, 1
}

StoreLocally("d", "HT-Playground-" . theTagertFileORdirIs)
tempHTPlaygroundPaths := StoreLocally("r", "HT-Playground-paths")
if (tempHTPlaygroundPaths != null)
{
Sort, tempHTPlaygroundPaths, U
StoreLocally("s", "HT-Playground-paths", tempHTPlaygroundPaths)
}

HTPlaygroundPaths := StoreLocally("r", "HT-Playground-paths")
HTPlaygroundPathsOut := ""
Loop, Parse, HTPlaygroundPaths, `n, `r
{
if (A_LoopField != theTagertFileORdirIs) && (A_LoopField != "null") && (A_LoopField != null) && (A_LoopField != null)
{
HTPlaygroundPathsOut .= A_LoopField . "`n"

}
}
StringTrimRight, HTPlaygroundPathsOut, HTPlaygroundPathsOut, 1

if (HTPlaygroundPathsOut != null)
{
StoreLocally("s", "HT-Playground-paths", HTPlaygroundPathsOut)
}

tempHTPlaygroundPaths := StoreLocally("r", "HT-Playground-paths")
if (tempHTPlaygroundPaths != null)
{
Sort, tempHTPlaygroundPaths, U
StoreLocally("s", "HT-Playground-paths", tempHTPlaygroundPaths)
}




areWeInAdeletedFile := 0
Loop, Parse, tempHTPlaygroundPaths, `n, `r
{
if (A_LoopField != currentFilePath)
{
areWeInAdeletedFile := 1
}
}

Loop, Parse, tempHTPlaygroundPaths, `n, `r
{
currentFilePath := A_LoopField
break
}

currentFilePathFixFirstTimeHere := ""
currentFilePathFixFirstTimeHereLast := ""
currentFilePathFixFirstTimeHereNum := 0
Loop, Parse, currentFilePath, "/"
{
if (A_LoopField != "")
{
currentFilePathFixFirstTimeHereNum := A_Index
currentFilePathFixFirstTimeHereLast := A_LoopField
}
}

Loop, Parse, currentFilePath, "/"
{
if (A_LoopField != "")
{
if (A_Index != currentFilePathFixFirstTimeHereNum)
{
currentFilePathFixFirstTimeHere .= A_LoopField . "/"
}
}
}

currentDir := currentFilePathFixFirstTimeHere
if (A_ScreenWidth < A_ScreenHeight)
{
GuiControl 4: Text, DiplayTextPath, %currentDir%
}
else
{
GuiControl 2: Text, DiplayTextPath, %currentDir%
}

outShowDir := fileSystem(currentDir, "go", "")

currentDir := RegExReplace(currentDir, ":\\d{1," . StrLen(str(Date.now())) . "}", "")

Loop, 100
{
vDirFileButton := "vDirFileButton" . A_Index
vDirFileMore := "vDirFileMore" . A_Index
if (A_ScreenWidth < A_ScreenHeight)
{
GuiControl 4: Hide, %vDirFileButton%
GuiControl 4: Hide, %vDirFileMore%
}
else
{
GuiControl 2: Hide, %vDirFileButton%
GuiControl 2: Hide, %vDirFileMore%
}


}

outShowDirFixAndSort := ""
outShowDirFixAndSort2 := ""
Loop, Parse, outShowDir, `n, `r
{
ALoopField := StrSplit(A_LoopField, ":", 2)
ALoopField2 := StrSplit(A_LoopField, ":", 1)
outShowDirFixAndSort .= ALoopField . ":" . ALoopField2 . "`n"

}
StringTrimRight, outShowDirFixAndSort, outShowDirFixAndSort, 1

Sort, outShowDirFixAndSort, N R
;MsgBox, % outShowDirFixAndSort
Loop, Parse, outShowDirFixAndSort, `n  `r
{
ALoopField := StrSplit(A_LoopField, ":", 2)

outShowDirFixAndSort2 .= ALoopField . "`n"
}
StringTrimRight, outShowDir, outShowDirFixAndSort2, 1
;MsgBox, % outShowDir


Loop, Parse, outShowDir, `n, `r
{
nothing := ""
ALoopField := StrReplace(A_LoopField, "|", nothing)
ALoopField := StrSplit(ALoopField, ":", 1)
vDirFileButton := "vDirFileButton" . A_Index
vDirFileMore := "vDirFileMore" . A_Index
if (A_ScreenWidth < A_ScreenHeight)
{
GuiControl 4: Show, %vDirFileButton%
GuiControl 4: Show, %vDirFileMore%
GuiControl 4: Text, %vDirFileButton%, %ALoopField%
}
else
{
GuiControl 2: Show, %vDirFileButton%
GuiControl 2: Show, %vDirFileMore%
GuiControl 2: Text, %vDirFileButton%, %ALoopField%
}

}


Loop, Parse, outShowDir, `n, `r
{
ALoopField := StrSplit(A_LoopField, ":", 1)
ALoopField := StrReplace(ALoopField, "|", nothing)
if (ALoopField = currentFilePathFixFirstTimeHereLast)
{
ButtonDirFile("vDirFileButton" . A_Index)
break
}

}
currentDir := currentFilePathFixFirstTimeHere
if (A_ScreenWidth < A_ScreenHeight)
{
GuiControl 4: Text, TextButtonFileDir, %currentDir%
}
else
{
GuiControl 2: Text, TextButtonFileDir, %currentDir%
}









}




} ; end of ifmsgbox



return
Return

RenameButtonFileDir:

if (!(InStr(TextButtonFileDirText, ".")))
{
MsgBox, 48, DISCLAIMER!!!, Renaming a folder is not possible. You will need to delete the existing folder and create a new one.
return
}

userWhatsToRenameTheFile := ""
InputBox, userWhatsToRenameTheFile, Choose the new name for a file. You can only use letters [a-z][A-Z] numbers underscores and a dot for the files.
MsgBox, 292, , Are you sure?
IfMsgBox, Yes
{
if (userWhatsToRenameTheFile === null)
{
Gui 5: Hide
return
}

if (!RegExMatch(Trim(userWhatsToRenameTheFile), "^[a-zA-Z0-9_]{1,8}\\.[a-zA-Z0-9_]{1,4}$"))
{
MsgBox, 16, ERROR, % "The filename should start with 1 to 8 letters or numbers, or underscores (_), followed by a dot (.) and 1 to 4 letters, numbers, or underscores."
return
}
Gui 5: Hide

currentDir := RegExReplace(currentDir, ":\\d{1," . StrLen(str(Date.now())) . "}", "")
;MsgBox, % currentDir . newFileOrDirName . "/"
outShowDir := fileSystem(currentDir, "go", "")

outShowDirFixAndSort := ""
outShowDirFixAndSort2 := ""
Loop, Parse, outShowDir, `n, `r
{
ALoopField := StrSplit(A_LoopField, ":", 2)
ALoopField2 := StrSplit(A_LoopField, ":", 1)
outShowDirFixAndSort .= ALoopField . ":" . ALoopField2 . "`n"

}
StringTrimRight, outShowDirFixAndSort, outShowDirFixAndSort, 1

Sort, outShowDirFixAndSort, N R
;MsgBox, % outShowDirFixAndSort
Loop, Parse, outShowDirFixAndSort, `n  `r
{
ALoopField := StrSplit(A_LoopField, ":", 2)

outShowDirFixAndSort2 .= ALoopField . "`n"
}
StringTrimRight, outShowDir, outShowDirFixAndSort2, 1
;MsgBox, % outShowDir


Loop, Parse, outShowDir, `n, `r
{
if (userWhatsToRenameTheFile === A_LoopField)
{
MsgBox, 48, ERROR, You cannot rename a file to one that already exists.
return
}
}
;;;;;;;;;
currentDir := RegExReplace(currentDir, ":\\d{1," . StrLen(str(Date.now())) . "}", "")
fileSystem(theTagertFileORdirIs, "rename", userWhatsToRenameTheFile)
theTagertFileORdirIs := RegExReplace(theTagertFileORdirIs, ":\\d{1," . StrLen(str(Date.now())) . "}", "")
currentDir := RegExReplace(currentDir, ":\\d{1," . StrLen(str(Date.now())) . "}", "")
outShowDir := fileSystem(currentDir, "go", "")
;MsgBox, % theTagertFileORdirIs




currentDir := RegExReplace(currentDir, ":\\d{1," . StrLen(str(Date.now())) . "}", "")
Loop, 100
{
vDirFileButton := "vDirFileButton" . A_Index
vDirFileMore := "vDirFileMore" . A_Index
if (A_ScreenWidth < A_ScreenHeight)
{
GuiControl 4: Hide, %vDirFileButton%
GuiControl 4: Hide, %vDirFileMore%
}
else
{
GuiControl 2: Hide, %vDirFileButton%
GuiControl 2: Hide, %vDirFileMore%
}


}

outShowDirFixAndSort := ""
outShowDirFixAndSort2 := ""
Loop, Parse, outShowDir, `n, `r
{
ALoopField := StrSplit(A_LoopField, ":", 2)
ALoopField2 := StrSplit(A_LoopField, ":", 1)
outShowDirFixAndSort .= ALoopField . ":" . ALoopField2 . "`n"

}
StringTrimRight, outShowDirFixAndSort, outShowDirFixAndSort, 1

Sort, outShowDirFixAndSort, N R
;MsgBox, % outShowDirFixAndSort
Loop, Parse, outShowDirFixAndSort, `n  `r
{
ALoopField := StrSplit(A_LoopField, ":", 2)

outShowDirFixAndSort2 .= ALoopField . "`n"
}
StringTrimRight, outShowDir, outShowDirFixAndSort2, 1
;MsgBox, % outShowDir


Loop, Parse, outShowDir, `n, `r
{
nothing := ""
ALoopField := StrReplace(A_LoopField, "|", nothing)
ALoopField := StrSplit(ALoopField, ":", 1)
vDirFileButton := "vDirFileButton" . A_Index
vDirFileMore := "vDirFileMore" . A_Index
if (A_ScreenWidth < A_ScreenHeight)
{
GuiControl 4: Show, %vDirFileButton%
GuiControl 4: Show, %vDirFileMore%
GuiControl 4: Text, %vDirFileButton%, %ALoopField%
}
else
{
GuiControl 2: Show, %vDirFileButton%
GuiControl 2: Show, %vDirFileMore%
GuiControl 2: Text, %vDirFileButton%, %ALoopField%
}

}

if (InStr(theTagertFileORdirIs, "."))
{
if (SubStr(theTagertFileORdirIs, 0) = "/")
{
; Do something if the last character theTagertFileORdirIs is "/"
StringTrimRight, theTagertFileORdirIs, theTagertFileORdirIs, 1
}
;MsgBox, % "HT-Playground-" . theTagertFileORdirIs
currentFilePathContents := StoreLocally("r", "HT-Playground-" . theTagertFileORdirIs)
if (currentFilePathContents === null)
{
currentFilePathContents := "MsgBox, hello world"
}
StoreLocally("d", "HT-Playground-" . theTagertFileORdirIs)
tempHTPlaygroundPaths := StoreLocally("r", "HT-Playground-paths")
if (tempHTPlaygroundPaths != null)
{
Sort, tempHTPlaygroundPaths, U
StoreLocally("s", "HT-Playground-paths", tempHTPlaygroundPaths)
}
HTPlaygroundPaths := StoreLocally("r", "HT-Playground-paths")
HTPlaygroundPathsOut := ""
Loop, Parse, HTPlaygroundPaths, `n, `r
{
if (A_LoopField != theTagertFileORdirIs) && (A_LoopField != "null") && (A_LoopField != null)
{
HTPlaygroundPathsOut .= A_LoopField . "`n"

}
}
StringTrimRight, HTPlaygroundPathsOut, HTPlaygroundPathsOut, 1
if (HTPlaygroundPathsOut != null)
{
StoreLocally("s", "HT-Playground-paths", HTPlaygroundPathsOut)
}

tempHTPlaygroundPaths := StoreLocally("r", "HT-Playground-paths")
if (tempHTPlaygroundPaths != null)
{
Sort, tempHTPlaygroundPaths, U
StoreLocally("s", "HT-Playground-paths", tempHTPlaygroundPaths)
}
;MsgBox, % tempHTPlaygroundPaths

Loop, Parse, outShowDir, `n, `r
{
ALoopField := StrSplit(A_LoopField, ":", 1)
ALoopField := StrReplace(ALoopField, "|", nothing)
if (ALoopField = userWhatsToRenameTheFile)
{
ButtonDirFile("vDirFileButton" . A_Index)
break
}

}
StoreLocally("s", "HT-Playground-" . currentDir . userWhatsToRenameTheFile, currentFilePathContents)
tempHTPlaygroundPaths := StoreLocally("r", "HT-Playground-paths")

StoreLocally("s", "HT-Playground-paths", tempHTPlaygroundPaths . "`n" . currentDir . userWhatsToRenameTheFile)


tempHTPlaygroundPaths := StoreLocally("r", "HT-Playground-paths")
if (tempHTPlaygroundPaths != null)
{
Sort, tempHTPlaygroundPaths, U
StoreLocally("s", "HT-Playground-paths", tempHTPlaygroundPaths)
}
Loop, Parse, outShowDir, `n, `r
{
ALoopField := StrSplit(A_LoopField, ":", 1)
ALoopField := StrReplace(ALoopField, "|", nothing)
if (ALoopField = userWhatsToRenameTheFile)
{
ButtonDirFile("vDirFileButton" . A_Index)
break
}

}





areWeInAdeletedFile := 0
Loop, Parse, tempHTPlaygroundPaths, `n, `r
{
if (A_LoopField != currentFilePath)
{
areWeInAdeletedFile := 1
}
}

Loop, Parse, tempHTPlaygroundPaths, `n, `r
{
currentFilePath := A_LoopField
break
}

currentFilePathFixFirstTimeHere := ""
currentFilePathFixFirstTimeHereLast := ""
currentFilePathFixFirstTimeHereNum := 0
Loop, Parse, currentFilePath, "/"
{
if (A_LoopField != "")
{
currentFilePathFixFirstTimeHereNum := A_Index
currentFilePathFixFirstTimeHereLast := A_LoopField
}
}

Loop, Parse, currentFilePath, "/"
{
if (A_LoopField != "")
{
if (A_Index != currentFilePathFixFirstTimeHereNum)
{
currentFilePathFixFirstTimeHere .= A_LoopField . "/"
}
}
}

currentDir := currentFilePathFixFirstTimeHere
if (A_ScreenWidth < A_ScreenHeight)
{
GuiControl 4: Text, DiplayTextPath, %currentDir%
}
else
{
GuiControl 2: Text, DiplayTextPath, %currentDir%
}

outShowDir := fileSystem(currentDir, "go", "")

currentDir := RegExReplace(currentDir, ":\\d{1," . StrLen(str(Date.now())) . "}", "")

Loop, 100
{
vDirFileButton := "vDirFileButton" . A_Index
vDirFileMore := "vDirFileMore" . A_Index
if (A_ScreenWidth < A_ScreenHeight)
{
GuiControl 4: Hide, %vDirFileButton%
GuiControl 4: Hide, %vDirFileMore%
}
else
{
GuiControl 2: Hide, %vDirFileButton%
GuiControl 2: Hide, %vDirFileMore%
}


}

outShowDirFixAndSort := ""
outShowDirFixAndSort2 := ""
Loop, Parse, outShowDir, `n, `r
{
ALoopField := StrSplit(A_LoopField, ":", 2)
ALoopField2 := StrSplit(A_LoopField, ":", 1)
outShowDirFixAndSort .= ALoopField . ":" . ALoopField2 . "`n"

}
StringTrimRight, outShowDirFixAndSort, outShowDirFixAndSort, 1

Sort, outShowDirFixAndSort, N R
;MsgBox, % outShowDirFixAndSort
Loop, Parse, outShowDirFixAndSort, `n  `r
{
ALoopField := StrSplit(A_LoopField, ":", 2)

outShowDirFixAndSort2 .= ALoopField . "`n"
}
StringTrimRight, outShowDir, outShowDirFixAndSort2, 1
;MsgBox, % outShowDir


Loop, Parse, outShowDir, `n, `r
{
nothing := ""
ALoopField := StrReplace(A_LoopField, "|", nothing)
ALoopField := StrSplit(ALoopField, ":", 1)
vDirFileButton := "vDirFileButton" . A_Index
vDirFileMore := "vDirFileMore" . A_Index
if (A_ScreenWidth < A_ScreenHeight)
{
GuiControl 4: Show, %vDirFileButton%
GuiControl 4: Show, %vDirFileMore%
GuiControl 4: Text, %vDirFileButton%, %ALoopField%
}
else
{
GuiControl 2: Show, %vDirFileButton%
GuiControl 2: Show, %vDirFileMore%
GuiControl 2: Text, %vDirFileButton%, %ALoopField%
}

}


Loop, Parse, outShowDir, `n, `r
{
ALoopField := StrSplit(A_LoopField, ":", 1)
ALoopField := StrReplace(ALoopField, "|", nothing)
if (ALoopField = currentFilePathFixFirstTimeHereLast)
{
Sleep, 1
ButtonDirFile("vDirFileButton" . A_Index)
;MsgBox, % "vDirFileButton" . A_Index
break
}

}
currentDir := currentFilePathFixFirstTimeHere
if (A_ScreenWidth < A_ScreenHeight)
{
GuiControl 4: Text, TextButtonFileDir, %currentDir%
}
else
{
GuiControl 2: Text, TextButtonFileDir, %currentDir%
}



Sleep, 1
Reload




}



} ; end of ifmsgbox

return
Return


;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;

; filesystemFunc
; filesystemFunc



fileSystem(target, action, NewNameRenameDirOrFile)
{
;MsgBox, % target . " " . action . " " . NewNameRenameDirOrFile
selectedItemNum := 0
if (target = "root/") && (action = "go")
{


allStartDirData := ""
Loop, Parse, fileSystemData, `n, `r
{

numOfPipes := 0
Loop, Parse, A_LoopField
{
if (A_LoopField = "|")
{
numOfPipes++
}
}

if (numOfPipes = 1)
{
if (!(InStr(A_LoopField, "*")))
{
allStartDirData .= A_LoopField . "`n"
}
}


}
StringTrimRight, allStartDirData, allStartDirData, 1
allStartDirData := StrReplace(allStartDirData, "|", "")
return allStartDirData
}
;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;

if (action = "go")
{
; in the target, we must always have a forward slash at the end, e.g., root/dir1/
outDirAndFilesData := ""
numOfForwardSlash := 0
Loop, Parse, target
{
; 47 = / in ascii
if (A_LoopField = Chr(47))
{
numOfForwardSlash++
}
}
if (numOfForwardSlash = 1)
{
MsgBox, ERROR numOfForwardSlash is %numOfForwardSlash% only
return
}

fileDirPointToItNum := 0
Loop, Parse, target, "/"
{

if (A_Index != 1) && (A_LoopField != "")
{
fileDirPointToItNum++
fileDirPointToIt%fileDirPointToItNum% := A_LoopField
}
}


areWeInDirPipeMode := 0
fileDirPointToItNumNumHelp := 1
modeDirGrabActiavted := 0

Loop, Parse, fileSystemData, `n, `r
{
ALoopField := StrSplit(A_LoopField, ":", 1)
numOfPipes := 0
Loop, Parse, ALoopField
{
if (A_LoopField = "|")
{
numOfPipes++
}
}



if (fileDirPointToIt%fileDirPointToItNumNumHelp% == StrReplace(ALoopField, "|", "")) && (fileDirPointToItNumNumHelp = numOfPipes)
{
;MsgBox, % A_LoopField
if (fileDirPointToItNum = fileDirPointToItNumNumHelp)
{
modeDirGrabActiavted := 1
;MsgBox, % A_Index
selectedItemNum := A_Index
}
fileDirPointToItNumNumHelp++
}

if (modeDirGrabActiavted = 1)
{
if (numOfForwardSlash = numOfPipes)
{
areWeInDirPipeMode := 1
if (!(InStr(ALoopField, "*")))
{
outDirAndFilesData .= A_LoopField . "`n"
}
}

if (numOfPipes <= (numOfForwardSlash - 1)) && (areWeInDirPipeMode = 1)
{
break
}
}


} ; end of loop

StringTrimRight, outDirAndFilesData, outDirAndFilesData, 1
outDirAndFilesData := StrReplace(outDirAndFilesData, "|", "")
return outDirAndFilesData
}
;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;

if (action = "rm")
{
; in the target, we must always have a forward slash at the end, e.g., root/dir1/
outDirAndFilesData := ""
numOfForwardSlash := 0
ItsAfile := 0
if (InStr(target, "."))
{
ItsAfile := 1
}
else
{
ItsAfile := 0
}
Loop, Parse, target
{
; 47 = / in ascii
if (A_LoopField = Chr(47))
{
numOfForwardSlash++
}
}
if (numOfForwardSlash = 1)
{
MsgBox, ERROR numOfForwardSlash is %numOfForwardSlash% only
return
}

fileDirPointToItNum := 0
Loop, Parse, target, "/"
{

if (A_Index != 1) && (A_LoopField != "")
{
fileDirPointToItNum++
fileDirPointToIt%fileDirPointToItNum% := A_LoopField
}
}


areWeInDirPipeMode := 0
fileDirPointToItNumNumHelp := 1
modeDirGrabActiavted := 0
AIndexSelectedItemNum := 0
Loop, Parse, fileSystemData, `n, `r
{
ALoopField := StrSplit(A_LoopField, ":", 1)
numOfPipes := 0
Loop, Parse, ALoopField
{
if (A_LoopField = "|")
{
numOfPipes++
}
}



if (fileDirPointToIt%fileDirPointToItNumNumHelp% == StrReplace(ALoopField, "|", "")) && (fileDirPointToItNumNumHelp = numOfPipes)
{
;MsgBox, % A_LoopField
if (fileDirPointToItNum = fileDirPointToItNumNumHelp)
{
modeDirGrabActiavted := 1
;MsgBox, % A_Index
selectedItemNum := A_Index
}
fileDirPointToItNumNumHelp++
}

if (modeDirGrabActiavted = 1)
{
if (numOfForwardSlash = numOfPipes)
{
areWeInDirPipeMode := 1
;ljhjguoygyugyjguyvjkukvhjhukvhjkhuvhuvhuvgvuhvguhk
AIndexSelectedItemNum++
selectedItemNum%AIndexSelectedItemNum% := A_Index
if (!(InStr(ALoopField, "."))) && (ItsAfile != 1)
{
if (!(InStr(ALoopField, "*")))
{
;MsgBox, % A_LoopField
MsgBox, 48, DISCLAIMER!!!, You cannot remove a folder that has subfolders inside. The folder must only contain files or be empty.
StoreLocally("s", "HT-Playground-fileSystemData", fileSystemData)
return fileSystemData
}
}
}

if (numOfPipes <= (numOfForwardSlash - 1)) && (areWeInDirPipeMode = 1)
{
break
}
}


} ; end of loop

if (ItsAfile = 1)
{
fileSystemDataOutNew := ""
Loop, Parse, fileSystemData, `n, `r
{
if (A_Index != selectedItemNum)
{
fileSystemDataOutNew .= A_LoopField . "`n"
}
}
StringTrimRight, fileSystemData, fileSystemDataOutNew, 1
}
else
{



fileSystemDataOutNew := ""
Loop, Parse, fileSystemData, `n, `r
{
if (A_Index != selectedItemNum)
{
fileSystemDataOutNew .= A_LoopField . "`n"
}
else
{
fileSystemDataOutNew .= "|" . "`n"
}

}
StringTrimRight, fileSystemData, fileSystemDataOutNew, 1

Loop, % AIndexSelectedItemNum
{

selectedItemNum := selectedItemNum%A_Index%
fileSystemDataOutNew := ""
Loop, Parse, fileSystemData, `n, `r
{
if (A_Index != selectedItemNum)
{
fileSystemDataOutNew .= A_LoopField . "`n"
}
else
{
fileSystemDataOutNew .= "|" . "`n"
;';';';';
ALLoopField := A_LoopField
theFilesInTheFolderThatNeedsToBeDeleteed := target . A_LoopField
theFilesInTheFolderThatNeedsToBeDeleteed := StrReplace(theFilesInTheFolderThatNeedsToBeDeleteed, "|", "")
theFilesInTheFolderThatNeedsToBeDeleteed := StrSplit(theFilesInTheFolderThatNeedsToBeDeleteed, ":", 1)
;MsgBox, % theFilesInTheFolderThatNeedsToBeDeleteed
StoreLocally("d", "HT-Playground-" . theFilesInTheFolderThatNeedsToBeDeleteed)
Sleep, 1
;MsgBox, % "HT-Playground-" . theFilesInTheFolderThatNeedsToBeDeleteed
tempHTPlaygroundPaths := StoreLocally("r", "HT-Playground-paths")
if (tempHTPlaygroundPaths != null)
{
Sort, tempHTPlaygroundPaths, U
StoreLocally("s", "HT-Playground-paths", tempHTPlaygroundPaths)
}
HTPlaygroundPaths := StoreLocally("r", "HT-Playground-paths")
HTPlaygroundPathsOut := ""
Loop, Parse, HTPlaygroundPaths, `n, `r
{
if (A_LoopField != theFilesInTheFolderThatNeedsToBeDeleteed) && (A_LoopField != "null") && (A_LoopField != null)
{
HTPlaygroundPathsOut .= A_LoopField . "`n"

}
}
StringTrimRight, HTPlaygroundPathsOut, HTPlaygroundPathsOut, 1

if (HTPlaygroundPathsOut != null)
{
StoreLocally("s", "HT-Playground-paths", HTPlaygroundPathsOut)
}


tempHTPlaygroundPaths := StoreLocally("r", "HT-Playground-paths")
if (tempHTPlaygroundPaths != null)
{
Sort, tempHTPlaygroundPaths, U
StoreLocally("s", "HT-Playground-paths", tempHTPlaygroundPaths)
}




areWeInAdeletedFile := 0
Loop, Parse, tempHTPlaygroundPaths, `n, `r
{
if (A_LoopField != currentFilePath)
{
areWeInAdeletedFile := 1
}
}

Loop, Parse, tempHTPlaygroundPaths, `n, `r
{
currentFilePath := A_LoopField
break
}

currentFilePathFixFirstTimeHere := ""
currentFilePathFixFirstTimeHereLast := ""
currentFilePathFixFirstTimeHereNum := 0
Loop, Parse, currentFilePath, "/"
{
if (A_LoopField != "")
{
currentFilePathFixFirstTimeHereNum := A_Index
currentFilePathFixFirstTimeHereLast := A_LoopField
}
}

Loop, Parse, currentFilePath, "/"
{
if (A_LoopField != "")
{
if (A_Index != currentFilePathFixFirstTimeHereNum)
{
currentFilePathFixFirstTimeHere .= A_LoopField . "/"
}
}
}

currentDir := currentFilePathFixFirstTimeHere
if (A_ScreenWidth < A_ScreenHeight)
{
GuiControl 4: Text, DiplayTextPath, %currentDir%
}
else
{
GuiControl 2: Text, DiplayTextPath, %currentDir%
}

outShowDir := fileSystem(currentDir, "go", "")

currentDir := RegExReplace(currentDir, ":\\d{1," . StrLen(str(Date.now())) . "}", "")

Loop, 100
{
vDirFileButton := "vDirFileButton" . A_Index
vDirFileMore := "vDirFileMore" . A_Index
if (A_ScreenWidth < A_ScreenHeight)
{
GuiControl 4: Hide, %vDirFileButton%
GuiControl 4: Hide, %vDirFileMore%
}
else
{
GuiControl 2: Hide, %vDirFileButton%
GuiControl 2: Hide, %vDirFileMore%
}


}

outShowDirFixAndSort := ""
outShowDirFixAndSort2 := ""
Loop, Parse, outShowDir, `n, `r
{
ALoopField := StrSplit(A_LoopField, ":", 2)
ALoopField2 := StrSplit(A_LoopField, ":", 1)
outShowDirFixAndSort .= ALoopField . ":" . ALoopField2 . "`n"

}
StringTrimRight, outShowDirFixAndSort, outShowDirFixAndSort, 1

Sort, outShowDirFixAndSort, N R
;MsgBox, % outShowDirFixAndSort
Loop, Parse, outShowDirFixAndSort, `n  `r
{
ALoopField := StrSplit(A_LoopField, ":", 2)

outShowDirFixAndSort2 .= ALoopField . "`n"
}
StringTrimRight, outShowDir, outShowDirFixAndSort2, 1
;MsgBox, % outShowDir


Loop, Parse, outShowDir, `n, `r
{
nothing := ""
ALoopField := StrReplace(A_LoopField, "|", nothing)
ALoopField := StrSplit(ALoopField, ":", 1)
vDirFileButton := "vDirFileButton" . A_Index
vDirFileMore := "vDirFileMore" . A_Index
if (A_ScreenWidth < A_ScreenHeight)
{
GuiControl 4: Show, %vDirFileButton%
GuiControl 4: Show, %vDirFileMore%
GuiControl 4: Text, %vDirFileButton%, %ALoopField%
}
else
{
GuiControl 2: Show, %vDirFileButton%
GuiControl 2: Show, %vDirFileMore%
GuiControl 2: Text, %vDirFileButton%, %ALoopField%
}

}


Loop, Parse, outShowDir, `n, `r
{
ALoopField := StrSplit(A_LoopField, ":", 1)
ALoopField := StrReplace(ALoopField, "|", nothing)
if (ALoopField = currentFilePathFixFirstTimeHereLast)
{
ButtonDirFile("vDirFileButton" . A_Index)
break
}

}
currentDir := currentFilePathFixFirstTimeHere
if (A_ScreenWidth < A_ScreenHeight)
{
GuiControl 4: Text, TextButtonFileDir, %currentDir%
}
else
{
GuiControl 2: Text, TextButtonFileDir, %currentDir%
}


if (tempHTPlaygroundPaths != null)
{
StoreLocally("s", "HT-Playground-paths", tempHTPlaygroundPaths)
}






}
}
StringTrimRight, fileSystemData, fileSystemDataOutNew, 1

}

fileSystemDataOutNew := ""
Loop, Parse, fileSystemData, `n, `r
{
if (A_LoopField != "|")
{
fileSystemDataOutNew .= A_LoopField . "`n"
}
}
StringTrimRight, fileSystemData, fileSystemDataOutNew, 1



}
StoreLocally("s", "HT-Playground-fileSystemData", fileSystemData)
return fileSystemData
}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
if (action = "make")
{
; in the target, we must always have a forward slash at the end, e.g., root/dir1/
outDirAndFilesData := ""
numOfForwardSlash := 0
ItsAfile := 0
if (InStr(target, "."))
{
ItsAfile := 1
}
else
{
ItsAfile := 0
}
Loop, Parse, target
{
; 47 = / in ascii
if (A_LoopField = Chr(47))
{
numOfForwardSlash++
}
}
if (numOfForwardSlash = 1)
{
MsgBox, ERROR numOfForwardSlash is %numOfForwardSlash% only
return
}

insideTheRootFixBugAddFilesAndDirsInRootDir := 0
if (numOfForwardSlash = 2)
{
insideTheRootFixBugAddFilesAndDirsInRootDir := 1
}


Loop, Parse, target, "/"
{
if (A_LoopField != "")
{
lastTargerItemRMfixNum := A_Index
lastTagretMake := A_LoopField
}
}
targetOutFix := ""
Loop, Parse, target, "/"
{
if (A_Index != lastTargerItemRMfixNum)
{
targetOutFix .= A_LoopField . "/"
}
}

StringTrimRight, target, targetOutFix, 1

numOfForwardSlash--
fileDirPointToItNum := 0
Loop, Parse, target, "/"
{

if (A_Index != 1) && (A_LoopField != "")
{
fileDirPointToItNum++
fileDirPointToIt%fileDirPointToItNum% := A_LoopField



}
}


areWeInDirPipeMode := 0
fileDirPointToItNumNumHelp := 1
modeDirGrabActiavted := 0
AIndexSelectedItemNum := 0
Loop, Parse, fileSystemData, `n, `r
{
ALoopField := StrSplit(A_LoopField, ":", 1)
numOfPipes := 0
Loop, Parse, ALoopField
{
if (A_LoopField = "|")
{
numOfPipes++
}
}


if (fileDirPointToIt%fileDirPointToItNumNumHelp% == StrReplace(ALoopField, "|", "")) && (fileDirPointToItNumNumHelp = numOfPipes)
{
if (fileDirPointToItNum = fileDirPointToItNumNumHelp)
{
modeDirGrabActiavted := 1
;MsgBox, % A_Index
selectedItemNum := A_Index
}
fileDirPointToItNumNumHelp++
}

if (modeDirGrabActiavted = 1)
{

if (numOfForwardSlash = numOfPipes)
{
areWeInDirPipeMode := 1
;ljhjguoygyugyjguyvjkukvhjhukvhjkhuvhuvhuvgvuhvguhk
AIndexSelectedItemNum := 1
selectedItemNumNUMmake := A_Index
someExtraBugFix := 0
if (!(InStr(ALoopField, ".")))
{
selectedItemNumNUMmake := A_Index - 1
someExtraBugFix := 1
}
pipesNeededToMakeIt := numOfPipes


}

if (numOfPipes <= (numOfForwardSlash - 1)) && (areWeInDirPipeMode = 1)
{
break
}
}


} ; end of loop


if (insideTheRootFixBugAddFilesAndDirsInRootDir = 1)
{
if (ItsAfile = 1)
{
fileSystemData := fileSystemData . "`n|" . lastTagretMake . ":" . Date.now()
}
else
{
fileSystemData := fileSystemData . "`n|" . lastTagretMake . ":" . Date.now() . "`n" . "||*dir" . ":" . Date.now()
}

}
else
{


if (ItsAfile = 1)
{

fileSystemDataOutNew := ""
Loop, Parse, fileSystemData, `n, `r
{
if (A_Index != selectedItemNum + 1)
{
fileSystemDataOutNew .= A_LoopField . "`n"
}
else
{

thePipesWeNeedMakeItRn := ""
Loop, % pipesNeededToMakeIt
{
thePipesWeNeedMakeItRn .= "|"
}
fileSystemDataOutNew .= A_LoopField . "`n" . thePipesWeNeedMakeItRn . lastTagretMake . ":" . Date.now() . "`n"
;MsgBox, % A_LoopField
}

}
StringTrimRight, fileSystemData, fileSystemDataOutNew, 1

}
else
{

fileSystemDataOutNew := ""

Loop, Parse, fileSystemData, `n, `r
{

if (A_Index != selectedItemNum + 1)
{
fileSystemDataOutNew .= A_LoopField . "`n"

}
else
{

thePipesWeNeedMakeItRn := ""
Loop, % pipesNeededToMakeIt
{
thePipesWeNeedMakeItRn .= "|"
}
fileSystemDataOutNew .= A_LoopField . "`n" . thePipesWeNeedMakeItRn . lastTagretMake . ":" . Date.now() . "`n" . thePipesWeNeedMakeItRn . "|*dir" . ":" . Date.now() . "`n"

}

}
StringTrimRight, fileSystemData, fileSystemDataOutNew, 1




}
}
StoreLocally("s", "HT-Playground-fileSystemData", fileSystemData)
return fileSystemData
}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
if (action = "rename")
{
; in the target, we must always have a forward slash at the end, e.g., root/dir1/
outDirAndFilesData := ""
numOfForwardSlash := 0
ItsAfile := 0
if (InStr(target, "."))
{
ItsAfile := 1
}
else
{
ItsAfile := 0
}
Loop, Parse, target
{
; 47 = / in ascii
if (A_LoopField = Chr(47))
{
numOfForwardSlash++
}
}
if (numOfForwardSlash = 1)
{
MsgBox, ERROR numOfForwardSlash is %numOfForwardSlash% only
return
}

fileDirPointToItNum := 0
Loop, Parse, target, "/"
{

if (A_Index != 1) && (A_LoopField != "")
{
fileDirPointToItNum++
fileDirPointToIt%fileDirPointToItNum% := A_LoopField
}
}


areWeInDirPipeMode := 0
fileDirPointToItNumNumHelp := 1
modeDirGrabActiavted := 0
AIndexSelectedItemNum := 0
Loop, Parse, fileSystemData, `n, `r
{
ALoopField := StrSplit(A_LoopField, ":", 1)
numOfPipes := 0
Loop, Parse, ALoopField
{
if (A_LoopField = "|")
{
numOfPipes++
}
}



if (fileDirPointToIt%fileDirPointToItNumNumHelp% == StrReplace(ALoopField, "|", "")) && (fileDirPointToItNumNumHelp = numOfPipes)
{
;MsgBox, % A_LoopField
if (fileDirPointToItNum = fileDirPointToItNumNumHelp)
{
modeDirGrabActiavted := 1
;MsgBox, % A_Index
selectedItemNum := A_Index
}
fileDirPointToItNumNumHelp++
}

if (modeDirGrabActiavted = 1)
{
if (numOfForwardSlash = numOfPipes)
{
areWeInDirPipeMode := 1
;ljhjguoygyugyjguyvjkukvhjhukvhjkhuvhuvhuvgvuhvguhk
AIndexSelectedItemNum++
selectedItemNum%AIndexSelectedItemNum% := A_Index
if (!(InStr(ALoopField, "."))) && (ItsAfile != 1)
{
if (!(InStr(ALoopField, "*")))
{
;MsgBox, % A_LoopField
MsgBox, 48, DISCLAIMER!!!, You cannot remove a folder that has subfolders inside. The folder must only contain files or be empty.
StoreLocally("s", "HT-Playground-fileSystemData", fileSystemData)
return fileSystemData
}
}
}

if (numOfPipes <= (numOfForwardSlash - 1)) && (areWeInDirPipeMode = 1)
{
break
}
}


} ; end of loop

if (ItsAfile = 1)
{
fileSystemDataOutNew := ""
Loop, Parse, fileSystemData, `n, `r
{
if (A_Index != selectedItemNum)
{
fileSystemDataOutNew .= A_LoopField . "`n"
}
else
{
numIfPipedForNewNameRenameDirOrFileFix := 0
Loop, Parse, A_LoopField
{
if (A_LoopField = "|")
{
numIfPipedForNewNameRenameDirOrFileFix++
}
}

numIfPipedForNewNameRenameDirOrFileFixPIPESADD := ""
Loop, % numIfPipedForNewNameRenameDirOrFileFix
{
numIfPipedForNewNameRenameDirOrFileFixPIPESADD .= "|"
}

fileSystemDataOutNew .= numIfPipedForNewNameRenameDirOrFileFixPIPESADD . NewNameRenameDirOrFile . "`n"
;MsgBox, % fileSystemDataOutNew
}
}
StringTrimRight, fileSystemData, fileSystemDataOutNew, 1
}
else
{
MsgBox, 48, DISCLAIMER!!!, Renaming a folder is not possible. You will need to delete the existing folder and create a new one.
StoreLocally("s", "HT-Playground-fileSystemData", fileSystemData)
return fileSystemData

fileSystemDataOLDOLD := fileSystemData
fileSystemDataOutNew := ""
Loop, Parse, fileSystemData, `n, `r
{
if (A_Index != selectedItemNum)
{
fileSystemDataOutNew .= A_LoopField . "`n"
}
else
{
numIfPipedForNewNameRenameDirOrFileFix := 0
Loop, Parse, A_LoopField
{
if (A_LoopField = "|")
{
numIfPipedForNewNameRenameDirOrFileFix++
}
}

numIfPipedForNewNameRenameDirOrFileFixPIPESADD := ""
Loop, % numIfPipedForNewNameRenameDirOrFileFix
{
numIfPipedForNewNameRenameDirOrFileFixPIPESADD .= "|"
}

fileSystemDataOutNew .= numIfPipedForNewNameRenameDirOrFileFixPIPESADD . NewNameRenameDirOrFile . "`n"
MsgBox, % fileSystemDataOutNew
}

}
StringTrimRight, fileSystemData, fileSystemDataOutNew, 1

Loop, % AIndexSelectedItemNum
{

selectedItemNum := selectedItemNum%A_Index%
fileSystemDataOutNew := ""
Loop, Parse, fileSystemData, `n, `r
{
if (A_Index != selectedItemNum)
{
fileSystemDataOutNew .= A_LoopField . "`n"
}
else
{
MsgBox, 48, DISCLAIMER!!!, Renaming a folder is not possible. You will need to delete the existing folder and create a new one.
StoreLocally("s", "HT-Playground-fileSystemData", fileSystemData)
return fileSystemDataOLDOLD
}
}
StringTrimRight, fileSystemData, fileSystemDataOutNew, 1

}

fileSystemDataOutNew := ""
Loop, Parse, fileSystemData, `n, `r
{
if (A_LoopField != "|")
{
fileSystemDataOutNew .= A_LoopField . "`n"
}
}
StringTrimRight, fileSystemData, fileSystemDataOutNew, 1



}
StoreLocally("s", "HT-Playground-fileSystemData", fileSystemData)
return fileSystemData
}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
} ; end of func

; filesystemFunc
; filesystemFunc


IDEtext:
IDEtext := A_GuiControl

StoreLocally("s", "HT-Playground-" . currentFilePath, IDEtext)
tempHTPlaygroundPaths := StoreLocally("r", "HT-Playground-paths")

StoreLocally("s", "HT-Playground-paths", tempHTPlaygroundPaths . "`n" . currentFilePath)


tempHTPlaygroundPaths := StoreLocally("r", "HT-Playground-paths")
if (tempHTPlaygroundPaths != null)
{
Sort, tempHTPlaygroundPaths, U
StoreLocally("s", "HT-Playground-paths", tempHTPlaygroundPaths)
}

Return

Run:
nothing := ""


if (InStr(currentFilePath, ".htpy"))
{
HTpy := IDEtext
HTpy := StrReplace(HTpy, Chr(13), nothing)

pyCode := compilerPy(HTpy)
outCode := runPyCode(pyCode)
GuiControl 2: Text, Edit1, %outCode%
}
else if (InStr(currentFilePath, ".hth"))
{
HTH := IDEtext
HTH := StrReplace(HTH, Chr(13), nothing)

HTMLcode := compilerJs(HTH)

if (A_ScreenWidth < A_ScreenHeight)
{
; its like a phone maybe
runHTML(Gui2, "iframe1", ParseInt(HTHiframeScale), EditX, EditY, EditW, EditH, HTMLcode)
}
else
{
; its like a computer maybe
runHTML(Gui2, "iframe1", ParseInt(HTHiframeScale), EditX, EditY, EditW, EditH, HTMLcode)
}
}
else
{
MsgBox, 16, ERROR, You can only run a hth or htpy files!
return
}


Return

SeePyCodeOrDownloadHTML:


if (InStr(currentFilePath, ".htpy"))
{
if (pyCode = "")
{
pyCode := "You need to run some HTpy code first"
}
GuiControl 2: Text, Edit1, %pyCode%
}
else if (InStr(currentFilePath, ".hth"))
{
; hth
if (HTMLcode != "")
{
HTMLcodeFileName := ""
InputBox, HTMLcodeFileName, Choose a name for the HTML file.
if (HTMLcodeFileName != null) && (HTMLcodeFileName != "")
{
HTMLcodeFileName := HTMLcodeFileName . ".html"
FileAppend, %HTMLcode%, %HTMLcodeFileName%
}
else
{
MsgBox, You canceled!
}
}
else
{
MsgBox, 48, No!, You need to first write and run some code first!
}
}
else
{
MsgBox, 16, ERROR, You can only interact whit a hth or htpy files!
return
}


Return

;~ compilerPy(codeForPy)
;~ {
;~ ; this is just a test so only msgbox, works
;~ code123Out := ""
;~ Loop, Parse, codeForPy, `n, `r
;~ {
;~ StringTrimLeft, str1, A_LoopField, 8
;~ code123Out .= "print(" . Chr(34) . str1 . Chr(34) . ")`n"
;~ }
;~ StringTrimRight, codeForPy, code123Out, 1

;~ return codeForPy
;~ }


;~ compilerJs(codeForJs)
;~ {
;~ ; this is just a test
;~ return "<html><body style='font-size: 20px; background-color: #ffffff;'><h1>Embedded Content</h1><p style='font-size: 15px;'>This is embedded HTML content. " . codeForJs . "</p></body></html>"
;~ }


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;




indent_nested_curly_braces(input_string)
{
indent_size := 4
current_indent := 0
result := ""
;MsgBox, % input_string
input_string := input_string
Loop, Parse, input_string, `n, `r
{

trimmed_line := Trim(A_LoopField)

if (trimmed_line = Chr(123))
{

result .= ((Chr(32) . PyRepeatSpacesPy(current_indent)) . (trimmed_line . "`n"))
current_indent := current_indent + indent_size
}
else if (trimmed_line = Chr(125))
{

current_indent := current_indent - indent_size
result .= ((Chr(32) . PyRepeatSpacesPy(current_indent)) . (trimmed_line . "`n"))
}
else
{

result .= ((Chr(32) . PyRepeatSpacesPy(current_indent)) . (trimmed_line . "`n"))
}

}

; Return the result
return result
}

PyRepeatSpacesPy(count)
{
spaces := ""
Loop, % count
{
spaces .= Chr(32)
}
return spaces
}



PyifTheLineIsAFuncDecPy(strgjvkh, theFuncWeFound)
{
Loop, Parse, theFuncWeFound, `n, `r
{

numOfChars := 0
Loop, Parse, A_LoopField
{
numOfChars++
}

ALoopFieldd := StrSplit(A_LoopField, Chr(40), 1)
ALoopFieldd2 := StrSplit(strgjvkh, Chr(40), 1)

if (SubStr(ALoopFieldd, 1, numOfChars) = ALoopFieldd2) && (InStr(strgjvkh, Chr(40)))
{
return true
}


}

return false
}






PyisVarAnumKindaVarPy(strrrrr)
{

strLettersStart := 48
Loop, 10
{
if (InStr(strrrrr, Chr(strLettersStart)))
{
return true
}
strLettersStart++
}

if (InStr(strrrrr, Chr(95)))
{
return true
}


return false
}

PyvarDetectPy(strrrrr)
{

strLettersStart := 97
Loop, 26
{
if (InStr(strrrrr, Chr(strLettersStart)))
{
return true
}
strLettersStart++
}


strLettersStart := 65
Loop, 26
{
if (InStr(strrrrr, Chr(strLettersStart)))
{
return true
}
strLettersStart++
}


strLettersStart := 48
Loop, 10
{
if (InStr(strrrrr, Chr(strLettersStart)))
{
return true
}
strLettersStart++
}

if (InStr(strrrrr, Chr(95)))
{
return true
}

if (InStr(strrrrr, Chr(37)))
{
return true
}

return false
}


PyfuncToChecIfVaidNameForFuncPy(strrrrr)
{
    ; Check if the string is empty
    if (!(strrrrr))
    {
        ;MsgBox, Invalid function name: %strrrrr% (empty string)
        return false
    }

    ; Check if the first character is a digit (invalid for function name)
    firstChar := SubStr(strrrrr, 1, 1)
    if (firstChar >= "0" && firstChar <= "9")
    {
     ;   MsgBox, Invalid function name: %strrrrr% (starts with a digit)
        return false
    }

    ; Initialize a flag for validation
    isValid := true

    ; Loop through each character in the string using Loop, Parse
    Loop, Parse, strrrrr
    {
        ; Check the current parsed item (character)
        char := A_LoopField

        ; Check if the character is a valid letter, digit, or underscore
        if (!(char >= "A" && char <= "Z" || char >= "a" && char <= "z" || char >= "0" && char <= "9" || char = "_"))
        {
           ; MsgBox, Invalid character %char% in function name: %strrrrr%
            isValid := false
            break
        }
    }

    ; If passed all checks, return true (valid function name)
    return isValid
}

PytranspileVariablesPy(str123455, functionNames)
{
str123455 := Trim(str123455)
numOfStrings := 0

outOftranspileVariables := ""
outOftranspileVariablesOut := str123455


outOftranspileVariablesOut := StrReplace(outOftranspileVariablesOut, Chr(40), " ( ")
outOftranspileVariablesOut := StrReplace(outOftranspileVariablesOut, Chr(41), " ) ")
outOftranspileVariablesOut := StrReplace(outOftranspileVariablesOut, Chr(44), " , ")
outOftranspileVariablesOut := StrReplace(outOftranspileVariablesOut, Chr(60), " < ")
outOftranspileVariablesOut := StrReplace(outOftranspileVariablesOut, Chr(62), " > ")
outOftranspileVariablesOut := StrReplace(outOftranspileVariablesOut, Chr(91), " [ ")
outOftranspileVariablesOut := StrReplace(outOftranspileVariablesOut, Chr(93), " ] ")

wasHereVarTryUhBug := 1

Loop, Parse, outOftranspileVariablesOut, " "
{
howManyCharIfVar := 0
Loop, Parse, A_LoopField
{
if (PyvarDetectPy(A_LoopField))
{
howManyCharIfVar++
}
}
howManyCharIfVar2 := 0
Loop, Parse, A_LoopField
{
howManyCharIfVar2++
}
istAvar := 0
if (howManyCharIfVar = howManyCharIfVar2)
{
istAvar := 1
}

if (istAvar = 1)
{

howManyCharIfVar := 0
Loop, Parse, A_LoopField
{
if (PyisVarAnumKindaVarPy(A_LoopField))
{
howManyCharIfVar++
}
}

howManyCharIfVar2 := 0
Loop, Parse, A_LoopField
{
howManyCharIfVar2++
}
isNumKindaVar := 0
if (howManyCharIfVar2 = howManyCharIfVar)
{
isNumKindaVar := 1
}

if (isNumKindaVar = 1)
{
outOftranspileVariables .= A_LoopField . Chr(32)
}
else
{

if (InStr(A_LoopField, "%"))
{
if ((SubStr(Trim(A_LoopField), 1, 1) = "%") && (SubStr(Trim(A_LoopField), 0) = "%"))
{
StringTrimRight, var1, A_LoopField, 1
StringTrimLeft, var1, var1, 1

out1 := "variables['" . var1 . "']"
outOftranspileVariables .= out1 . Chr(32)
}
else
{
var1 := StrSplit(A_LoopField, "%", 1)
var2 := StrSplit(A_LoopField, "%", 2)
out1 := "variables[f" . Chr(39) . var1 . "{variables[" . Chr(34) . var2 . Chr(34) . "]}" . Chr(39) . "]"
outOftranspileVariables .= out1 . Chr(32)
}
}
else
{
out1 := "variables[" . Chr(39) . A_LoopField . Chr(39) . "]"
outOftranspileVariables .= out1 . Chr(32)
}
}


}
else
{
outOftranspileVariables .= A_LoopField . Chr(32)
}
wasHereVarTryUhBug := 0
}

if (wasHereVarTryUhBug = 1)
{
outOftranspileVariables := outOftranspileVariablesOut
}

;OutputDebug, |%outOftranspileVariables%|


Loop, Parse, functionNames, "|"
{
outOftranspileVariables := StrReplace(outOftranspileVariables, "variables['" . A_LoopField . "']", A_LoopField)
}


Loop, % numOfStrings
{
outOftranspileVariables := StrReplace(outOftranspileVariables, "freeeeepaestine-sav-etehmtyeah-freee-n" . A_Index, Chr(34) . theString%A_Index% . Chr(34))
}

weEverUseVars := "# Define a dictionary to store dynamic variables`nvariables = {}`n`n"
;OutputDebug, |%outOftranspileVariables%|
outOftranspileVariables := Trim(outOftranspileVariables)

outOftranspileVariables := StrReplace(outOftranspileVariables, Chr(96), Chr(92))
outOftranspileVariables := StrReplace(outOftranspileVariables, Chr(92) . Chr(92), Chr(96))
outOftranspileVariables := StrReplace(outOftranspileVariables, "cyiasasasasstAYtheummonlyemlpystringya-a-" . Chr(100), Chr(34) . Chr(34))


;OutputDebug, %outOftranspileVariables%

outOftranspileVariables := StrReplace(outOftranspileVariables, "variables['True']", "True")
outOftranspileVariables := StrReplace(outOftranspileVariables, "variables['False']", "False")
outOftranspileVariables := StrReplace(outOftranspileVariables, "variables['true']", "True")
outOftranspileVariables := StrReplace(outOftranspileVariables, "variables['false']", "False")
outOftranspileVariables := StrReplace(outOftranspileVariables, "variables['if']", "if")
outOftranspileVariables := StrReplace(outOftranspileVariables, "variables['else']", "else")

outOftranspileVariables := StrReplace(outOftranspileVariables, "variables['and']", "and")
outOftranspileVariables := StrReplace(outOftranspileVariables, "variables['or']", "or")

outOftranspileVariables := StrReplace(outOftranspileVariables, "!", " not ")
outOftranspileVariables := StrReplace(outOftranspileVariables, " && ", " and ")
outOftranspileVariables := StrReplace(outOftranspileVariables, " || ", " or ")
outOftranspileVariables := StrReplace(outOftranspileVariables, " < = ", " <= ")
outOftranspileVariables := StrReplace(outOftranspileVariables, " > = ", " >= ")
outOftranspileVariables := StrReplace(outOftranspileVariables, "not ==", " != ")
outOftranspileVariables := StrReplace(outOftranspileVariables, "  not == ", " != ")
outOftranspileVariables := StrReplace(outOftranspileVariables, " not == ", " != ")
outOftranspileVariables := StrReplace(outOftranspileVariables, " not ==", " != ")
outOftranspileVariables := StrReplace(outOftranspileVariables, "not ==", " != ")
outOftranspileVariables := StrReplace(outOftranspileVariables, "  not = ", " != ")
outOftranspileVariables := StrReplace(outOftranspileVariables, "not =", " != ")
outOftranspileVariables := StrReplace(outOftranspileVariables, " = ", " == ")
outOftranspileVariables := StrReplace(outOftranspileVariables, " = ", " == ")


outOftranspileVariables := StrReplace(outOftranspileVariables, " (", "(")
outOftranspileVariables := StrReplace(outOftranspileVariables, ") ", ")")

outOftranspileVariables := StrReplace(outOftranspileVariables, ").", ") .")
outOftranspileVariables := StrReplace(outOftranspileVariables, ".(", ". (")

outOftranspileVariables := StrReplace(outOftranspileVariables, "  >= ", " >= ")
outOftranspileVariables := StrReplace(outOftranspileVariables, "  <= ", " <= ")

outOftranspileVariables := StrReplace(outOftranspileVariables, " . ", " + ")
outOftranspileVariables := StrReplace(outOftranspileVariables, " ,  ", ", ")
outOftranspileVariables := StrReplace(outOftranspileVariables, " [ ", "[")
outOftranspileVariables := StrReplace(outOftranspileVariables, " ] ", "]")

outOftranspileVariables := StrReplace(outOftranspileVariables, "!=", " !=")

outOftranspileVariables := StrReplace(outOftranspileVariables, " )", ")")
outOftranspileVariables := StrReplace(outOftranspileVariables, "( ", "(")

;OutputDebug, %outOftranspileVariables%

return outOftranspileVariables
}






PytranspileLowVariablesPy(sstr)
{
sstr := Trim(sstr)

outOftranspileVariablesOut := Chr(34)
if (InStr(sstr, Chr(37)))
{
Loop, Parse, sstr, "%"
{

if (Mod(A_Index, 2))
{
outOftranspileVariablesOut .= A_LoopField
}
else
{
outOftranspileVariablesOut .= Chr(34) . " + variables['" . A_LoopField . Chr(39) . Chr(93) . " + " . Chr(34)
}

}
}
else
{
sstr := Chr(34) . sstr . Chr(34)
return sstr
}

outOftranspileVariablesOut := outOftranspileVariablesOut . Chr(34)
return outOftranspileVariablesOut
}


;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;




; the compiler
compilerPy(HTpyCode)
{


func_LoopParseFunc_func := "`ndef LoopParseFunc(var, delimiter1="                   .               Chr(34)                  .             Chr(34)                 .                  ", delimiter2="            .             Chr(34)                .             Chr(34)           .             "):`n    import re`n    if not delimiter1 and not delimiter2:`n        # If no delimiters are provided, return a list of characters`n        items = list(var)`n    else:`n        # Construct the regular expression pattern for splitting the string`n        pattern = r'[' + re.escape(delimiter1) + re.escape(delimiter2) + r']+'`n`n        # Split the string using the constructed pattern`n        items = re.split(pattern, var)`n`n    return items`n"

func_InStr_func := "`ndef InStr(Haystack, Needle, CaseSensitive=True, StartingPos=1, Occurrence=1):`n    if Haystack is None or Needle is None:`n        return False`n    StartingPos = max(StartingPos, 1)`n    if not CaseSensitive:`n        Haystack = Haystack.lower()`n        Needle = Needle.lower()`n    count = 0`n    for i in range(StartingPos - 1, len(Haystack)):`n        if Haystack[i:i + len(Needle)] == Needle:`n            count += 1`n            if count == Occurrence:`n                return True`n    return False  `n"

func_SubStr_func := "`ndef SubStr(str, startPos, length=None):`n    if str is None or str == "         .          Chr(34)                 .              Chr(34)         .          ":`n        return "         .          Chr(34)                 .              Chr(34)         .          "`n`n    if length is None or length == "         .          Chr(34)                 .              Chr(34)         .          ":`n        length = len(str) - startPos + 1`n`n    if startPos < 1:`n        startPos = len(str) + startPos`n`n    return str[startPos - 1:startPos - 1 + length]`n"

func_Trim_func := "`ndef Trim(inputString):`n    if inputString is None:`n        return "         .          Chr(34)                 .              Chr(34)         .          "`n`n    return inputString.strip()`n"

func_StrReplace_func := "  `ndef StrReplace(originalString, find, replaceWith):`n    # Use the replace method to replace occurrences of 'find' with 'replaceWith'`n    return originalString.replace(find, replaceWith)`n"

func_StringTrimLeft_func := "`ndef StringTrimLeft(input, numChars):`n    # Convert input to a string if it's not already a string`n    if not isinstance(input, str):`n        input = str(input)  # Convert input to string`n`n    # Check if the input is long enough to perform trimming`n    if len(input) >= numChars:`n        return input[numChars:]  # Trim the string from the left`n    else:`n        return input  # Return input unchanged if numChars is larger than string length`n"


func_StringTrimRight_func := "`ndef StringTrimRight(input, numChars):`n    # Convert input to a string if it's not already a string`n    if not isinstance(input, str):`n        input = str(input)  # Convert input to string`n`n    # Check if the input is long enough to perform trimming`n    if len(input) >= numChars:`n        return input[:-numChars]  # Trim the string from the right`n    else:`n        return input  # Return input unchanged if numChars is larger than string length`n"


func_StrLower_func := "`ndef StrLower(string):`n    return string.lower()`n"

func_RegExReplace_func := "`ndef RegExReplace(inputStr, regexPattern, replacement):`n    # Create a regular expression object using the provided pattern`n    import re`n    regex = re.compile(regexPattern, re.MULTILINE)  # re.MULTILINE for multi-line matching`n`n    # Use the sub() method to perform the regex replacement`n    resultStr = regex.sub(replacement, inputStr)`n`n    # Return the modified string`n    return resultStr`n"


func_StrSplit_func := "`ndef StrSplit(inputStr, delimiter, num):`n    # Check if the delimiter is empty`n    if delimiter == '':`n        # Return an empty string since splitting with an empty delimiter is not possible`n        return ''`n`n    # Split the input string based on the delimiter`n    parts = inputStr.split(delimiter)`n`n    # Return the part specified by the num parameter (1-based index)`n    if 0 < num <= len(parts):`n        return parts[num - 1]  # Return the specified part (0-based index)`n    else:`n        return ''  # Return an empty string if num is out of range`n"

func_Chr_func := "`ndef Chr(number):`n    # Check if the number is None`n    if number is None:`n        # Return an empty string`n        return "         .          Chr(34)                 .              Chr(34)         .          "`n`n    # Check if the number is within the valid Unicode range`n    if 0 <= number <= 0x10FFFF:`n        # Convert the number to a character using chr()`n        return chr(number)`n    else:`n        # Return an empty string for invalid numbers`n        return "         .          Chr(34)                 .              Chr(34)         .          "`n"

func_Mod_func := "`n# Custom Mod function in Python`ndef Mod(dividend, divisor):`n    return dividend % divisor`n"


func_FileRead_func := Chr(10) . Chr(105) . Chr(109) . Chr(112) . Chr(111) . Chr(114) . Chr(116) . Chr(32) . Chr(111) . Chr(115) . Chr(10) . Chr(100) . Chr(101) . Chr(102) . Chr(32) . Chr(70) . Chr(105) . Chr(108) . Chr(101) . Chr(82) . Chr(101) . Chr(97) . Chr(100) . Chr(40) . Chr(112) . Chr(97) . Chr(116) . Chr(104) . Chr(41) . Chr(58) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(35) . Chr(32) . Chr(82) . Chr(101) . Chr(109) . Chr(111) . Chr(118) . Chr(101) . Chr(32) . Chr(97) . Chr(110) . Chr(121) . Chr(32) . Chr(101) . Chr(120) . Chr(116) . Chr(114) . Chr(97) . Chr(32) . Chr(100) . Chr(111) . Chr(117) . Chr(98) . Chr(108) . Chr(101) . Chr(32) . Chr(113) . Chr(117) . Chr(111) . Chr(116) . Chr(101) . Chr(115) . Chr(32) . Chr(97) . Chr(114) . Chr(111) . Chr(117) . Chr(110) . Chr(100) . Chr(32) . Chr(116) . Chr(104) . Chr(101) . Chr(32) . Chr(112) . Chr(97) . Chr(116) . Chr(104) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(112) . Chr(97) . Chr(116) . Chr(104) . Chr(32) . Chr(61) . Chr(32) . Chr(112) . Chr(97) . Chr(116) . Chr(104) . Chr(46) . Chr(115) . Chr(116) . Chr(114) . Chr(105) . Chr(112) . Chr(40) . Chr(39) . Chr(34) . Chr(39) . Chr(41) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(35) . Chr(32) . Chr(69) . Chr(110) . Chr(115) . Chr(117) . Chr(114) . Chr(101) . Chr(32) . Chr(116) . Chr(104) . Chr(101) . Chr(32) . Chr(112) . Chr(97) . Chr(116) . Chr(104) . Chr(32) . Chr(105) . Chr(115) . Chr(32) . Chr(97) . Chr(98) . Chr(115) . Chr(111) . Chr(108) . Chr(117) . Chr(116) . Chr(101) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(105) . Chr(102) . Chr(32) . Chr(110) . Chr(111) . Chr(116) . Chr(32) . Chr(111) . Chr(115) . Chr(46) . Chr(112) . Chr(97) . Chr(116) . Chr(104) . Chr(46) . Chr(105) . Chr(115) . Chr(97) . Chr(98) . Chr(115) . Chr(40) . Chr(112) . Chr(97) . Chr(116) . Chr(104) . Chr(41) . Chr(58) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(112) . Chr(97) . Chr(116) . Chr(104) . Chr(32) . Chr(61) . Chr(32) . Chr(111) . Chr(115) . Chr(46) . Chr(112) . Chr(97) . Chr(116) . Chr(104) . Chr(46) . Chr(106) . Chr(111) . Chr(105) . Chr(110) . Chr(40) . Chr(111) . Chr(115) . Chr(46) . Chr(103) . Chr(101) . Chr(116) . Chr(99) . Chr(119) . Chr(100) . Chr(40) . Chr(41) . Chr(44) . Chr(32) . Chr(112) . Chr(97) . Chr(116) . Chr(104) . Chr(41) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(116) . Chr(114) . Chr(121) . Chr(58) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(119) . Chr(105) . Chr(116) . Chr(104) . Chr(32) . Chr(111) . Chr(112) . Chr(101) . Chr(110) . Chr(40) . Chr(112) . Chr(97) . Chr(116) . Chr(104) . Chr(44) . Chr(32) . Chr(39) . Chr(114) . Chr(39) . Chr(44) . Chr(32) . Chr(101) . Chr(110) . Chr(99) . Chr(111) . Chr(100) . Chr(105) . Chr(110) . Chr(103) . Chr(61) . Chr(39) . Chr(117) . Chr(116) . Chr(102) . Chr(45) . Chr(56) . Chr(39) . Chr(44) . Chr(32) . Chr(101) . Chr(114) . Chr(114) . Chr(111) . Chr(114) . Chr(115) . Chr(61) . Chr(39) . Chr(105) . Chr(103) . Chr(110) . Chr(111) . Chr(114) . Chr(101) . Chr(39) . Chr(41) . Chr(32) . Chr(97) . Chr(115) . Chr(32) . Chr(102) . Chr(105) . Chr(108) . Chr(101) . Chr(58) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(99) . Chr(111) . Chr(110) . Chr(116) . Chr(101) . Chr(110) . Chr(116) . Chr(32) . Chr(61) . Chr(32) . Chr(102) . Chr(105) . Chr(108) . Chr(101) . Chr(46) . Chr(114) . Chr(101) . Chr(97) . Chr(100) . Chr(40) . Chr(41) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(114) . Chr(101) . Chr(116) . Chr(117) . Chr(114) . Chr(110) . Chr(32) . Chr(99) . Chr(111) . Chr(110) . Chr(116) . Chr(101) . Chr(110) . Chr(116) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(101) . Chr(120) . Chr(99) . Chr(101) . Chr(112) . Chr(116) . Chr(32) . Chr(70) . Chr(105) . Chr(108) . Chr(101) . Chr(78) . Chr(111) . Chr(116) . Chr(70) . Chr(111) . Chr(117) . Chr(110) . Chr(100) . Chr(69) . Chr(114) . Chr(114) . Chr(111) . Chr(114) . Chr(58) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(114) . Chr(101) . Chr(116) . Chr(117) . Chr(114) . Chr(110) . Chr(32) . Chr(39) . Chr(39) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(101) . Chr(120) . Chr(99) . Chr(101) . Chr(112) . Chr(116) . Chr(32) . Chr(69) . Chr(120) . Chr(99) . Chr(101) . Chr(112) . Chr(116) . Chr(105) . Chr(111) . Chr(110) . Chr(32) . Chr(97) . Chr(115) . Chr(32) . Chr(101) . Chr(58) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(114) . Chr(101) . Chr(116) . Chr(117) . Chr(114) . Chr(110) . Chr(32) . Chr(78) . Chr(111) . Chr(110) . Chr(101) . Chr(10)

func_FileAppend_func := Chr(10) . Chr(105) . Chr(109) . Chr(112) . Chr(111) . Chr(114) . Chr(116) . Chr(32) . Chr(111) . Chr(115) . Chr(10) . Chr(100) . Chr(101) . Chr(102) . Chr(32) . Chr(70) . Chr(105) . Chr(108) . Chr(101) . Chr(65) . Chr(112) . Chr(112) . Chr(101) . Chr(110) . Chr(100) . Chr(40) . Chr(99) . Chr(111) . Chr(110) . Chr(116) . Chr(101) . Chr(110) . Chr(116) . Chr(44) . Chr(32) . Chr(112) . Chr(97) . Chr(116) . Chr(104) . Chr(41) . Chr(58) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(35) . Chr(32) . Chr(82) . Chr(101) . Chr(109) . Chr(111) . Chr(118) . Chr(101) . Chr(32) . Chr(97) . Chr(110) . Chr(121) . Chr(32) . Chr(101) . Chr(120) . Chr(116) . Chr(114) . Chr(97) . Chr(32) . Chr(100) . Chr(111) . Chr(117) . Chr(98) . Chr(108) . Chr(101) . Chr(32) . Chr(113) . Chr(117) . Chr(111) . Chr(116) . Chr(101) . Chr(115) . Chr(32) . Chr(97) . Chr(114) . Chr(111) . Chr(117) . Chr(110) . Chr(100) . Chr(32) . Chr(116) . Chr(104) . Chr(101) . Chr(32) . Chr(112) . Chr(97) . Chr(116) . Chr(104) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(112) . Chr(97) . Chr(116) . Chr(104) . Chr(32) . Chr(61) . Chr(32) . Chr(112) . Chr(97) . Chr(116) . Chr(104) . Chr(46) . Chr(115) . Chr(116) . Chr(114) . Chr(105) . Chr(112) . Chr(40) . Chr(39) . Chr(34) . Chr(39) . Chr(41) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(35) . Chr(32) . Chr(69) . Chr(110) . Chr(115) . Chr(117) . Chr(114) . Chr(101) . Chr(32) . Chr(116) . Chr(104) . Chr(101) . Chr(32) . Chr(112) . Chr(97) . Chr(116) . Chr(104) . Chr(32) . Chr(105) . Chr(115) . Chr(32) . Chr(97) . Chr(98) . Chr(115) . Chr(111) . Chr(108) . Chr(117) . Chr(116) . Chr(101) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(105) . Chr(102) . Chr(32) . Chr(110) . Chr(111) . Chr(116) . Chr(32) . Chr(111) . Chr(115) . Chr(46) . Chr(112) . Chr(97) . Chr(116) . Chr(104) . Chr(46) . Chr(105) . Chr(115) . Chr(97) . Chr(98) . Chr(115) . Chr(40) . Chr(112) . Chr(97) . Chr(116) . Chr(104) . Chr(41) . Chr(58) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(112) . Chr(97) . Chr(116) . Chr(104) . Chr(32) . Chr(61) . Chr(32) . Chr(111) . Chr(115) . Chr(46) . Chr(112) . Chr(97) . Chr(116) . Chr(104) . Chr(46) . Chr(106) . Chr(111) . Chr(105) . Chr(110) . Chr(40) . Chr(111) . Chr(115) . Chr(46) . Chr(103) . Chr(101) . Chr(116) . Chr(99) . Chr(119) . Chr(100) . Chr(40) . Chr(41) . Chr(44) . Chr(32) . Chr(112) . Chr(97) . Chr(116) . Chr(104) . Chr(41) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(116) . Chr(114) . Chr(121) . Chr(58) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(119) . Chr(105) . Chr(116) . Chr(104) . Chr(32) . Chr(111) . Chr(112) . Chr(101) . Chr(110) . Chr(40) . Chr(112) . Chr(97) . Chr(116) . Chr(104) . Chr(44) . Chr(32) . Chr(39) . Chr(97) . Chr(39) . Chr(44) . Chr(32) . Chr(101) . Chr(110) . Chr(99) . Chr(111) . Chr(100) . Chr(105) . Chr(110) . Chr(103) . Chr(61) . Chr(39) . Chr(117) . Chr(116) . Chr(102) . Chr(45) . Chr(56) . Chr(39) . Chr(41) . Chr(32) . Chr(97) . Chr(115) . Chr(32) . Chr(102) . Chr(105) . Chr(108) . Chr(101) . Chr(58) . Chr(32) . Chr(32) . Chr(35) . Chr(32) . Chr(39) . Chr(97) . Chr(39) . Chr(32) . Chr(109) . Chr(111) . Chr(100) . Chr(101) . Chr(32) . Chr(102) . Chr(111) . Chr(114) . Chr(32) . Chr(97) . Chr(112) . Chr(112) . Chr(101) . Chr(110) . Chr(100) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(102) . Chr(105) . Chr(108) . Chr(101) . Chr(46) . Chr(119) . Chr(114) . Chr(105) . Chr(116) . Chr(101) . Chr(40) . Chr(99) . Chr(111) . Chr(110) . Chr(116) . Chr(101) . Chr(110) . Chr(116) . Chr(41) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(114) . Chr(101) . Chr(116) . Chr(117) . Chr(114) . Chr(110) . Chr(32) . Chr(84) . Chr(114) . Chr(117) . Chr(101) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(101) . Chr(120) . Chr(99) . Chr(101) . Chr(112) . Chr(116) . Chr(32) . Chr(69) . Chr(120) . Chr(99) . Chr(101) . Chr(112) . Chr(116) . Chr(105) . Chr(111) . Chr(110) . Chr(32) . Chr(97) . Chr(115) . Chr(32) . Chr(101) . Chr(58) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(114) . Chr(101) . Chr(116) . Chr(117) . Chr(114) . Chr(110) . Chr(32) . Chr(70) . Chr(97) . Chr(108) . Chr(115) . Chr(101) . Chr(10)


func_FileDelete_func := Chr(10) . Chr(105) . Chr(109) . Chr(112) . Chr(111) . Chr(114) . Chr(116) . Chr(32) . Chr(111) . Chr(115) . Chr(10) . Chr(100) . Chr(101) . Chr(102) . Chr(32) . Chr(70) . Chr(105) . Chr(108) . Chr(101) . Chr(68) . Chr(101) . Chr(108) . Chr(101) . Chr(116) . Chr(101) . Chr(40) . Chr(112) . Chr(97) . Chr(116) . Chr(104) . Chr(41) . Chr(58) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(35) . Chr(32) . Chr(69) . Chr(110) . Chr(115) . Chr(117) . Chr(114) . Chr(101) . Chr(32) . Chr(116) . Chr(104) . Chr(101) . Chr(32) . Chr(112) . Chr(97) . Chr(116) . Chr(104) . Chr(32) . Chr(105) . Chr(115) . Chr(32) . Chr(97) . Chr(98) . Chr(115) . Chr(111) . Chr(108) . Chr(117) . Chr(116) . Chr(101) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(105) . Chr(102) . Chr(32) . Chr(110) . Chr(111) . Chr(116) . Chr(32) . Chr(111) . Chr(115) . Chr(46) . Chr(112) . Chr(97) . Chr(116) . Chr(104) . Chr(46) . Chr(105) . Chr(115) . Chr(97) . Chr(98) . Chr(115) . Chr(40) . Chr(112) . Chr(97) . Chr(116) . Chr(104) . Chr(41) . Chr(58) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(112) . Chr(97) . Chr(116) . Chr(104) . Chr(32) . Chr(61) . Chr(32) . Chr(111) . Chr(115) . Chr(46) . Chr(112) . Chr(97) . Chr(116) . Chr(104) . Chr(46) . Chr(106) . Chr(111) . Chr(105) . Chr(110) . Chr(40) . Chr(111) . Chr(115) . Chr(46) . Chr(103) . Chr(101) . Chr(116) . Chr(99) . Chr(119) . Chr(100) . Chr(40) . Chr(41) . Chr(44) . Chr(32) . Chr(112) . Chr(97) . Chr(116) . Chr(104) . Chr(41) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(116) . Chr(114) . Chr(121) . Chr(58) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(105) . Chr(102) . Chr(32) . Chr(111) . Chr(115) . Chr(46) . Chr(112) . Chr(97) . Chr(116) . Chr(104) . Chr(46) . Chr(101) . Chr(120) . Chr(105) . Chr(115) . Chr(116) . Chr(115) . Chr(40) . Chr(112) . Chr(97) . Chr(116) . Chr(104) . Chr(41) . Chr(58) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(111) . Chr(115) . Chr(46) . Chr(114) . Chr(101) . Chr(109) . Chr(111) . Chr(118) . Chr(101) . Chr(40) . Chr(112) . Chr(97) . Chr(116) . Chr(104) . Chr(41) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(101) . Chr(120) . Chr(99) . Chr(101) . Chr(112) . Chr(116) . Chr(32) . Chr(69) . Chr(120) . Chr(99) . Chr(101) . Chr(112) . Chr(116) . Chr(105) . Chr(111) . Chr(110) . Chr(58) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(112) . Chr(97) . Chr(115) . Chr(115) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(10) . Chr(10)


func_GetParams_func := "`ndef GetParams():`n    import os`n    import sys`n    # Check if any command line arguments are provided`n    if len(sys.argv) < 2:`n        return "         .          Chr(34)                 .              Chr(34)         .          "`n`n    # Store the provided command line arguments`n    params = []`n    for arg in sys.argv[1:]:`n        if os.path.exists(arg):`n            arg = os.path.abspath(arg)`n        params.append(arg)`n`n    return "         .          Chr(34)                 .              Chr(92)                 .              Chr(92)         .          "n"         .          Chr(34)         .          ".join(params)`n"

func_Floor_func := "`ndef Floor(num):`n    import math`n    if num is None or not isinstance(num, (int, float)):`n        return None`n    return math.floor(num)`n"


func_RunCMD_func := "`nimport subprocess`ndef RunCMD(command):`n    try:`n        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)`n        return result.stdout`n    except subprocess.CalledProcessError as e:`n        print(f" . Chr(34) . "Error: {e}" . Chr(34) . ")`n        return e.stdout + " . Chr(34) . "" . Chr(92) . "n" . Chr(34) . " + e.stderr`n    except Exception as e:`n        print(f" . Chr(34) . "An unexpected error occurred: {e}" . Chr(34) . ")`n        return " . Chr(34) . "" . Chr(34) . "`n"



func_SortLikeAHK_func := "`nimport random`ndef SortLikeAHK(var_name, options):`n    # Determine delimiter based on options`n    delimiter = '" . Chr(92) . "n'`n    if 'D' in options:`n        delimiter = options[options.index('D') + 1]`n    `n    # Split the input variable by delimiter`n    items = var_name.split(delimiter)`n    `n    # Remove empty items and strip whitespace`n    items = [item.strip() for item in items if item.strip()]`n    `n    # Apply sorting based on options`n    if 'N' in options:`n        # Numeric sort`n        items.sort(key=lambda x: int(x))`n    elif 'Random' in options:`n        # Random sort`n        random.shuffle(items)`n    else:`n        # Default alphabetical sort`n        items.sort(key=lambda x: x.lower() if 'C' not in options else x)`n    `n    # Reverse if 'R' option is present`n    if 'R' in options:`n        items.reverse()`n    `n    # Remove duplicates if 'U' option is present`n    if 'U' in options:`n        seen = set()`n        unique_items = []`n        for item in items:`n            lower_item = item.lower() if 'C' not in options else item`n            if lower_item not in seen:`n                seen.add(lower_item)`n                unique_items.append(item)`n        items = unique_items`n    `n    # Join the sorted items back into a string`n    sorted_var = delimiter.join(items)`n    `n    return sorted_var`n"

func_BuildInVars_func := "`nimport time`nfrom datetime import datetime`n# Initialize with current timestamp`nlast_input_time = time.time() * 1000  # Convert to milliseconds`nstart_timestamp = time.time() * 1000  # Convert to milliseconds`n`n# Function to reset the idle timer`ndef reset_idle_timer():`n    global last_input_time`n    last_input_time = time.time() * 1000  # Update last input time in milliseconds`n`n# Function to calculate tick count in milliseconds`ndef A_TickCount():`n    return int(time.time() * 1000 - start_timestamp)`n`n# Function to build in variables`ndef BuildInVars(varName):`n    now = datetime.now()`n    if varName == " . Chr(34) . "A_TickCount" . Chr(34) . ":`n        # Return tick count in milliseconds`n        return A_TickCount()`n    elif varName == " . Chr(34) . "A_Now" . Chr(34) . ":`n        # Return current local timestamp`n        return now.strftime(" . Chr(34) . "%Y-%m-%d %H:%M:%S" . Chr(34) . ")`n    elif varName == " . Chr(34) . "A_YYYY" . Chr(34) . ":`n        # Return current year`n        return now.strftime(" . Chr(34) . "%Y" . Chr(34) . ")`n    elif varName == " . Chr(34) . "A_MM" . Chr(34) . ":`n        # Return current month`n        return now.strftime(" . Chr(34) . "%m" . Chr(34) . ")`n    elif varName == " . Chr(34) . "A_DD" . Chr(34) . ":`n        # Return current day`n        return now.strftime(" . Chr(34) . "%d" . Chr(34) . ")`n    elif varName == " . Chr(34) . "A_MMMM" . Chr(34) . ":`n        # Return full month name`n        return now.strftime(" . Chr(34) . "%B" . Chr(34) . ")`n    elif varName == " . Chr(34) . "A_MMM" . Chr(34) . ":`n        # Return short month name`n        return now.strftime(" . Chr(34) . "%b" . Chr(34) . ")`n    elif varName == " . Chr(34) . "A_DDDD" . Chr(34) . ":`n        # Return full day name`n        return now.strftime(" . Chr(34) . "%A" . Chr(34) . ")`n    elif varName == " . Chr(34) . "A_DDD" . Chr(34) . ":`n        # Return short day name`n        return now.strftime(" . Chr(34) . "%a" . Chr(34) . ")`n    elif varName == " . Chr(34) . "A_Hour" . Chr(34) . ":`n        # Return current hour`n        return now.strftime(" . Chr(34) . "%H" . Chr(34) . ")`n    elif varName == " . Chr(34) . "A_Min" . Chr(34) . ":`n        # Return current minute`n        return now.strftime(" . Chr(34) . "%M" . Chr(34) . ")`n    elif varName == " . Chr(34) . "A_Sec" . Chr(34) . ":`n        # Return current second`n        return now.strftime(" . Chr(34) . "%S" . Chr(34) . ")`n    elif varName == " . Chr(34) . "A_Space" . Chr(34) . ":`n        # Return space character`n        return " . Chr(34) . " " . Chr(34) . "`n    elif varName == " . Chr(34) . "A_Tab" . Chr(34) . ":`n        # Return tab character`n        return " . Chr(34) . Chr(92) . "t" . Chr(34) . "`n    else:`n        # Handle unknown variable names`n        return None`n"


func_Floor_func := "`ndef Floor(number):`n    if number > 0:`n        return int(number)`n    else:`n        return int(number) - (1 if number != int(number) else 0)`n`n"


func_ExitApp_func := "`nimport os`n# Function to handle application termination`ndef ExitApp():`n    os._exit(1)`n`n"


func_SetTimer_func := "`nimport time`nimport threading`n# Dictionary to store active timers`nactive_timers = {}`n`n# Function to start, stop, or adjust a timer`ndef SetTimer(func, timeOrOnOff):`n    def timer_wrapper(name, interval_ms):`n        def run_timer():`n            func()`n            if active_timers[name]['running']:`n                active_timers[name]['timer'] = threading.Timer(interval_ms / 1000.0, run_timer)`n                active_timers[name]['timer'].start()`n                `n        if timeOrOnOff == " . Chr(34) . "On" . Chr(34) . " and not active_timers[name]['running']:`n            active_timers[name]['timer'] = threading.Timer(active_timers[name]['interval_ms'] / 1000.0, run_timer)`n            active_timers[name]['timer'].start()`n            active_timers[name]['running'] = True`n            #print(f" . Chr(34) . "Timer '{name}' started with interval {active_timers[name]['interval_ms']} ms." . Chr(34) . ")`n        elif timeOrOnOff == " . Chr(34) . "Off" . Chr(34) . " and active_timers[name]['running']:`n            active_timers[name]['timer'].cancel()`n            active_timers[name]['running'] = False`n            #print(f" . Chr(34) . "Timer '{name}' stopped." . Chr(34) . ")`n        elif isinstance(timeOrOnOff, int):`n            active_timers[name]['interval_ms'] = timeOrOnOff  # Update the stored interval`n            if active_timers[name]['running']:`n                active_timers[name]['timer'].cancel()`n                active_timers[name]['timer'] = threading.Timer(timeOrOnOff / 1000.0, run_timer)`n                active_timers[name]['timer'].start()`n                #print(f" . Chr(34) . "Timer '{name}' adjusted to interval {timeOrOnOff} ms." . Chr(34) . ")`n            else:`n                active_timers[name]['timer'] = threading.Timer(timeOrOnOff / 1000.0, run_timer)`n                active_timers[name]['timer'].start()`n                active_timers[name]['running'] = True`n                #print(f" . Chr(34) . "Timer '{name}' started with adjusted interval {timeOrOnOff} ms." . Chr(34) . ")`n        else:`n            print(" . Chr(34) . "Invalid arguments. Please provide a valid function and time/On/Off state." . Chr(34) . ")`n`n    # Ensure func is callable`n    if not callable(func):`n        print(" . Chr(34) . "Invalid function provided." . Chr(34) . ")`n        return`n`n    name = func.__name__  # Use function name as timer identifier`n`n    # Initialize timer if not already active`n    if name not in active_timers:`n        active_timers[name] = {`n            'timer': None,`n            'running': False,`n            'interval_ms': 1000  # Default interval`n        }`n`n    # Determine the interval_ms value`n    if isinstance(timeOrOnOff, int):`n        interval_ms = timeOrOnOff`n    else:`n        interval_ms = active_timers[name]['interval_ms']  # Use stored interval`n`n    # Call timer_wrapper to manage timer based on timeOrOnOff`n    timer_wrapper(name, interval_ms)`n"


func_Abs_func := "`ndef Abs(num):`n    import math`n    if num is None or math.isnan(num):`n        return None`n    return abs(num)`n"
func_ACos_func := "`ndef ACos(num):`n    import math`n    if num is None or math.isnan(num):`n        return None`n    return math.acos(num)`n"
func_ASin_func := "`ndef ASin(num):`n    import math`n    if num is None or math.isnan(num):`n        return None`n    return math.asin(num)`n"
func_ATan_func := "`ndef ATan(num):`n    import math`n    if num is None or math.isnan(num):`n        return None`n    return math.atan(num)`n"
func_Ceil_func := "`ndef Ceil(num):`n    import math`n    if num is None or math.isnan(num):`n        return None`n    return math.ceil(num)`n"
func_Cos_func := "`ndef Cos(num):`n    import math`n    if num is None or math.isnan(num):`n        return None`n    return math.cos(num)`n"
func_Exp_func := "`ndef Exp(num):`n    import math`n    if num is None or math.isnan(num):`n        return None`n    return math.exp(num)`n"
func_Ln_func := "`ndef Ln(num):`n    import math`n    if num is None or math.isnan(num):`n        return None`n    return math.log(num)`n"
func_Log_func := "`ndef Log(num):`n    import math`n    if num is None or math.isnan(num):`n        return None`n    return math.log10(num)`n"
func_Round_func := "`ndef Round(num):`n    import math`n    if num is None or math.isnan(num):`n        return None`n    return round(num)`n"
func_Sin_func := "`ndef Sin(num):`n    import math`n    if num is None or math.isnan(num):`n        return None`n    return math.sin(num)`n"
func_Sqrt_func := "`ndef Sqrt(num):`n    import math`n    if num is None or math.isnan(num):`n        return None`n    return math.sqrt(num)`n"
func_Tan_func := "`ndef Tan(num):`n    import math`n    if num is None or math.isnan(num):`n        return None`n    return math.tan(num)`n"
func_RegExMatch_func := "`ndef RegExMatch(Haystack, NeedleRegEx, OutputVar=None, StartingPos=0):`n    import re`n    if Haystack is None or NeedleRegEx is None:`n        return None`n`n    regex = re.compile(NeedleRegEx)`n    match = regex.search(Haystack)`n`n    if match:`n        if OutputVar is not None:`n            OutputVar.append(match.group(0))`n        return match.start() + 1`n    else:`n        return 0`n"
func_StrLen_func := "`ndef StrLen(string):`n    if string is None:`n        return None`n    return len(string)`n"
func_Asc_func := "`ndef Asc(char):`n    if char is None or len(char) == 0:`n        return None`n    return ord(char[0])`n"
func_getDataFromAPI_func := "`nimport json`nimport urllib.request`nimport urllib.error`ndef getDataFromAPI(url):`n    try:`n        with urllib.request.urlopen(url) as response:`n            if response.getcode() == 200:`n                return response.read()`n            else:`n                return None`n    except urllib.error.URLError as e:`n        print(f" . Chr(34) . "Error accessing URL: {e.reason}" . Chr(34) . ")`n        return None`n"
func_getDataFromJSON_func := "`nimport json`nimport re`ndef getDataFromJSON(json_data, json_path):`n    try:`n        if json_data:`n            json_data = json.loads(json_data)  # Parse JSON data into Python object`n`n        # Check if the path starts with a dot and remove it if present`n        if json_path.startswith(" . Chr(34) . "." . Chr(34) . "):`n            json_path = json_path[1:]`n`n        path_segments = json_path.split(" . Chr(34) . "." . Chr(34) . ")  # Split the path into segments`n        current_data = json_data  # Use json_data directly (already an object)`n`n        for segment in path_segments:`n            if current_data is None:`n                return None`n`n            # Handle array indices e.g., " . Chr(34) . "Children[0]" . Chr(34) . "`n            if " . Chr(34) . "[" . Chr(34) . " in segment and " . Chr(34) . "]" . Chr(34) . " in segment:`n                array_index = re.search(r" . Chr(34) . "" . Chr(92) . "[(" . Chr(92) . "d+)" . Chr(92) . "]" . Chr(34) . ", segment)`n                if array_index:`n                    array_name = segment[:segment.index(" . Chr(34) . "[" . Chr(34) . ")]`n                    index = int(array_index.group(1))`n                    if array_name:`n                        current_data = current_data.get(array_name, [])[index]`n                    else:`n                        current_data = current_data[index]`n                    segment = segment[segment.index(" . Chr(34) . "]" . Chr(34) . ") + 1:]`n`n            # Handle regular dictionary keys`n            if segment:`n                current_data = current_data.get(segment, None)`n`n        return current_data`n`n    except (TypeError, IndexError, KeyError) as error:`n        print(f" . Chr(34) . "Error accessing data: {error}" . Chr(34) . ")`n        return None`n"

funcs_func := "LoopParseFunc|InStr|SubStr|Trim|StrReplace|StringTrimLeft|StringTrimRight|StrLower|RegExReplace|StrSplit|Chr|Mod|FileRead|FileAppend|FileDelete|GetParams|Floor|RunCMD|SortLikeAHK|BuildInVars|Floor|ExitApp|SetTimer|Abs|ACos|ASin|ATan|Ceil|Cos|Exp|Ln|Log|Round|Sin|Sqrt|Tan|RegExMatch|StrLen|Asc|getDataFromAPI|getDataFromJSON"



functionNames := "input|int|chr|str|InStr|SubStr|Trim|StrReplace|StringTrimLeft|StringTrimRight|StrLower|RegExReplace|StrSplit|Chr|Mod|FileRead|FileAppend|FileDelete|GetParams|RunCMD|SortLikeAHK|BuildInVars|Floor|ExitApp|SetTimer|Abs|ACos|ASin|ATan|Ceil|Cos|Exp|Ln|Log|Round|Sin|Sqrt|Tan|RegExMatch|StrLen|Asc|getDataFromAPI|getDataFromJSON|float"



nothing := ""
HTpyCode := StrReplace(HTpyCode, Chr(13), nothing)

pyCode := ""
out := ""
HTpyCodeD1 := ""
skipLeftCuleyForFuncPLS := 0
eavbnsalvbaslv := 0
port := "8000"
Loop, Parse, HTpyCode, `n, `r
{
if (A_Index = 1)
{
HTpyCodeD1 .= Trim(A_LoopField) . "`n"
}
else
{

if (Trim(A_LoopField) = Chr(123)) && (eavbnsalvbaslv = 1)
{
; nothing
nothing := ""
}
else
{
HTpyCodeD1 .= Trim(A_LoopField) . "`n"
}

eavbnsalvbaslv := 0
if (Trim(A_LoopField) = "")
{
eavbnsalvbaslv := 1
}


}



}
StringTrimRight, HTpyCode, HTpyCodeD1, 1



HTpyCodeOUT754754 := ""
areWEinSome34sNum := 0
theIdNumOfThe34 := 0

Loop, Parse, HTpyCode
{
theIdNumOfThe34theVar%A_Index% := Chr(34)
}

Loop, Parse, HTpyCode
{
if (A_LoopField = Chr(34))
{
areWEinSome34sNum++
}


if (areWEinSome34sNum = 1)
{



if (A_LoopField != Chr(34))
{
if (A_LoopField = Chr(96))
{
theIdNumOfThe34theVar%theIdNumOfThe34% .= Chr(92)
}
else
{
theIdNumOfThe34theVar%theIdNumOfThe34% .= A_LoopField
}
}
else
{
theIdNumOfThe34++
HTpyCodeOUT754754 .= "ihuiuuhuuhtheidFor--asas-theuhturtyphoutr-" . Chr(65) . Chr(65) . theIdNumOfThe34 . Chr(65) . Chr(65)
}

}


if (areWEinSome34sNum = 2) or (areWEinSome34sNum = 0)
{
if (A_LoopField != Chr(34))
{
HTpyCodeOUT754754 .= A_LoopField
}

areWEinSome34sNum := 0
}



}
HTpyCode := HTpyCodeOUT754754

Loop, % theIdNumOfThe34
{
theIdNumOfThe34theVar%A_Index% .= Chr(34)
}


str23IfFuncInNAMEnum := 0

CheckIFandElsesss1 := "if ("
CheckIFandElsesss2 := "if("
CheckIFandElsesss3 := "if !("
CheckIFandElsesss4 := "if!("
CheckIFandElsesss5 := "else if ("
CheckIFandElsesss6 := "else if("
CheckIFandElsesss7 := "else if !("
CheckIFandElsesss8 := "else if!("
CheckIFandElsesssNum := 0



awesdrtf := "|A" . Chr(95) . "LoopField|A" . Chr(95) . "Index"

willNextLineBeCurlyBracee := 0
theFuncWeFound := ""
theFuncWeFoundAllNames := ""
haveWeEverUsedAloop := 0
;OutputDebug, %HTpyCode%
Loop, Parse, HTpyCode, `n, `r
{

if (willNextLineBeCurlyBracee = 1)
{
; 123 is {
if (A_LoopField = Chr(123))
{
willNextLineBeCurlyBracee := 0

functionNames .= "|" . lastFuncName
;lastFuncFullName
theFuncWeFound .= lastFuncFullName . "`n"
theFuncWeFoundAllNames .= lastFuncName . Chr(40) . "`n"
}
}



if (SubStr(StrLower(A_LoopField), 1, 4) = CheckIFandElsesss1) or (SubStr(StrLower(A_LoopField), 1, 3) = CheckIFandElsesss2) or (SubStr(StrLower(A_LoopField), 1, 5) = CheckIFandElsesss3) or (SubStr(StrLower(A_LoopField), 1, 4) = CheckIFandElsesss4) or (SubStr(StrLower(A_LoopField), 1, 9) = CheckIFandElsesss5) or (SubStr(StrLower(A_LoopField), 1, 8) = CheckIFandElsesss6) or (SubStr(StrLower(A_LoopField), 1, 10) = CheckIFandElsesss7) or (SubStr(StrLower(A_LoopField), 1, 9) = CheckIFandElsesss8) or (SubStr(StrLower(A_LoopField), 1, 5) = "loop,")
{
; not a func
willNextLineBeCurlyBracee := 0
;OutputDebug, %A_LoopField%
}
else
{
;OutputDebug, ||%A_LoopField%||
strForCheckIfFunc := StrSplit(A_LoopField, Chr(40), 1)
;OutputDebug, |%strForCheckIfFunc%|
if (PyfuncToChecIfVaidNameForFuncPy(Trim(strForCheckIfFunc))) && (strForCheckIfFunc != "") && (InStr(A_LoopField, Chr(40)))
{
willNextLineBeCurlyBracee := 1
lastFuncName := strForCheckIfFunc
lastFuncFullName := A_LoopField
;OutputDebug, %lastFuncFullName%
}
else
{
willNextLineBeCurlyBracee := 0

}

}


}


StringTrimRight, theFuncWeFound, theFuncWeFound, 1
StringTrimRight, theFuncWeFoundAllNames, theFuncWeFoundAllNames, 1
;OutputDebug, %theFuncWeFound%
;OutputDebug, %functionNames%
;OutputDebug, %theFuncWeFoundAllNames%


onceImportTime := 0
weUseRandomAtLeastOnce := 0
weEverUseVars := ""
usedLib := ""
putEndPointFlask1Up := ""
putEndPointFlask2Down := ""
AindexcharLength := 1
pycodeAcurlyBraceAddSomeVrasFixNL := 0
pycodeAcurlyBraceAddSomeVrasFixLP := 0
pycodeLoopfixa := ""

Loop, Parse, HTpyCode, `n, `r
{
lineDone := 0
if (SubStr(Trim(StrLower(A_LoopField)), 1, 10) = StrLower("msgbox, % "))
{
StringTrimLeft, var1, A_LoopField, 10


var2 := Trim(PytranspileVariablesPy(var1, functionNames))



out := "print(" . var2 . ")"


lineDone := 1
pyCode .= out . "`n"
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 8) = StrLower("msgbox, ")) && (SubStr(Trim(StrLower(A_LoopField)), 1, 10) != StrLower("msgbox, % "))
{
StringTrimLeft, var1, A_LoopField, 8

OUTvarMsgLow := PytranspileLowVariablesPy(var1)

OUTvarMsgLow := StrReplace(OUTvarMsgLow, Chr(96), Chr(92))

out := "print(" . OUTvarMsgLow . ")"


lineDone := 1
pyCode .= out . "`n"
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 6) = "sort, ")
{
StringTrimLeft, str1, A_LoopField, 6

str1 := Trim(str1)
weHaveAcommaFixSortCommand := 0
if (SubStr(str1, 0) = Chr(44))
{
;MsgBox, comma YES
StringTrimRight, str1, str1, 1
weHaveAcommaFixSortCommand := 1
}
else
{
;MsgBox, comma NO
gg := 0
}

s := StrSplit(str1, ",", 1)
out1 := Trim(s)

s := StrSplit(str1, ",", 2)
out2 := Trim(s)

if (weHaveAcommaFixSortCommand = 1)
{
out2 := out2 . Chr(44)
}


var1 := "variables['" . out1 . "'] = SortLikeAHK(variables['" . out1 . "'], " . Chr(34) . out2 . Chr(34) . ")"
lineDone := 1
pyCode .= var1 . "`n"


}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 6) = StrLower("Port, "))
{
StringTrimLeft, str1, A_LoopField, 6
str1 := Trim(PytranspileVariablesPy(str1, functionNames))



var1 := "variables['port'] = " . str(str1)
port := "variables['port']"
lineDone := 1
pyCode .= var1 . "`n"
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 8) = StrLower("Random, "))
{
varr1 := StrSplit(A_LoopField, ",", 2)
varr2 := StrSplit(A_LoopField, ",", 3)
varr3 := StrSplit(A_LoopField, ",", 4)

outt1 := Trim(PytranspileVariablesPy(varr1, functionNames))
outt2 := Trim(PytranspileVariablesPy(varr2, functionNames))
outt3 := Trim(PytranspileVariablesPy(varr3, functionNames))
weUseRandomAtLeastOnce++
if (weUseRandomAtLeastOnce = 1)
{
usedLib .= "import random`n"
}
out := outt1 . " = " . "random.randint(" . outt2 . ", " . outt3 . ")"

lineDone := 1
pyCode .= out . "`n"
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 17) = StrLower("StringTrimRight, "))
{
varr1 := StrSplit(A_LoopField, ",", 2)
varr2 := StrSplit(A_LoopField, ",", 3)
varr3 := StrSplit(A_LoopField, ",", 4)

outt1 := Trim(PytranspileVariablesPy(varr1, functionNames))
outt2 := Trim(PytranspileVariablesPy(varr2, functionNames))
outt3 := Trim(PytranspileVariablesPy(varr3, functionNames))

out := outt1 . " = " . "StringTrimRight(" . outt2 . ", " . outt3 . ")"

lineDone := 1
pyCode .= out . "`n"
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 16) = StrLower("StringTrimLeft, "))
{
varr1 := StrSplit(A_LoopField, ",", 2)
varr2 := StrSplit(A_LoopField, ",", 3)
varr3 := StrSplit(A_LoopField, ",", 4)

outt1 := Trim(PytranspileVariablesPy(varr1, functionNames))
outt2 := Trim(PytranspileVariablesPy(varr2, functionNames))
outt3 := Trim(PytranspileVariablesPy(varr3, functionNames))

out := outt1 . " = " . "StringTrimLeft(" . outt2 . ", " . outt3 . ")"

lineDone := 1
pyCode .= out . "`n"
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 7) = StrLower("sleep, "))
{

StringTrimLeft, var1, A_LoopField, 7

var1 := Trim(PytranspileVariablesPy(var1, functionNames))
out := "time.sleep(" . var1 . " / 1000" . ")"
lineDone := 1
onceImportTime++
if (onceImportTime = 1)
{
usedLib .= "import time`n"
}
pyCode .= out . "`n"

}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 10) = "settimer, ")
{
StringTrimLeft, str1, A_LoopField, 10

str2 := Trim(StrSplit(str1, ",", 1))
str3 := Trim(StrSplit(str1, ",", 2))

if (StrLower(str3) = "on")
{
str3 := Chr(34) . "On" . Chr(34)
}

if (StrLower(str3) = "off")
{
str3 := Chr(34) . "Off" . Chr(34)
}

out1 := "SetTimer(" . str2 . ", " . str3 . ")"

lineDone := 1
pyCode .= out1 . "`n"
}
else if (Trim(StrLower(A_LoopField)) = "exitapp")
{

lineDone := 1
pyCode .= "ExitApp()" . "`n"
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 10) = "fileread, ")
{
StringTrimLeft, filereadCommand, A_LoopField, 10
filereadCommand1varname := StrSplit(filereadCommand, ", ", 1)
filereadCommand2path := StrSplit(filereadCommand, ", ", 2)

filereadCommand2path := StrReplace(filereadCommand2path, Chr(92) . Chr(92), Chr(92) . Chr(92) . Chr(92) . Chr(92))

filereadCommand2path := Trim(PytranspileLowVariablesPy(filereadCommand2path))
filereadCommand1varname := Trim(PytranspileVariablesPy(filereadCommand1varname, functionNames))
pyCode .= filereadCommand1varname . " = FileRead(" . filereadCommand2path . ")`n"
lineDone := 1
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 12) = "fileappend, ")
{
StringTrimLeft, fileAppendCommand, A_LoopField, 12
fileAppendCommand1varname := StrSplit(fileAppendCommand, ", ", 1)
fileAppendCommand2path := StrSplit(fileAppendCommand, ", ", 2)

fileAppendCommand2path := StrReplace(fileAppendCommand2path, Chr(92) . Chr(92), Chr(92) . Chr(92) . Chr(92) . Chr(92))

fileAppendCommand1varname := Trim(PytranspileLowVariablesPy(fileAppendCommand1varname))
fileAppendCommand2path := Trim(PytranspileLowVariablesPy(fileAppendCommand2path))

pyCode .= "FileAppend(" . fileAppendCommand1varname . ", " . fileAppendCommand2path . ")`n"
lineDone := 1
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 12) = "filedelete, ")
{
StringTrimLeft, fileDeleteCommand, A_LoopField, 12

fileDeleteCommand2path := StrSplit(fileDeleteCommand, ", ", 1)

fileDeleteCommand2path := StrReplace(fileDeleteCommand2path, Chr(92) . Chr(92), Chr(92) . Chr(92) . Chr(92) . Chr(92))
fileDeleteCommand2path := Trim(PytranspileLowVariablesPy(fileDeleteCommand2path))


pyCode .= "FileDelete(" . fileDeleteCommand2path . ")`n"
lineDone := 1
}
else if (PyifTheLineIsAFuncDecPy(Trim(A_LoopField), theFuncWeFound))
{

;OutputDebug, %A_LoopField%
str23IfFuncIn := A_LoopField
str23IfFuncInNAME := StrSplit(str23IfFuncIn, Chr(40), 1)




str23IfFuncIn := StrSplit(str23IfFuncIn, Chr(40), 2)
nothing := ""
str23IfFuncInALL := StrReplace(str23IfFuncIn, Chr(40), nothing)
str23IfFuncInALL := StrReplace(str23IfFuncInALL, Chr(41), nothing)
wasHereInfuncAndgetingVar1 := 0
theVarsPArmFormTheFunc := ""
if (str23IfFuncInALL != "")
{
Loop, Parse, str23IfFuncInALL, `,
{
wasHereInfuncAndgetingVar1 := 1
var1 := Trim(A_LoopField)
theVarsPArmFormTheFunc .= "variables['" . var1 . "'] = " . var1 . "`n"
}
}

skipLeftCuleyForFuncPLS := 0
if (str23IfFuncInALL != "")
{
str234567 := "def " . str23IfFuncInNAME . Chr(40) . str23IfFuncInALL . Chr(41) . ":`n{`n" . theVarsPArmFormTheFunc
skipLeftCuleyForFuncPLS := 1
}
else
{
str234567 := "def " . str23IfFuncInNAME . Chr(40) . str23IfFuncInALL . Chr(41) . ":"
}


Loop, % str23IfFuncInNAMEnum
{

if (str23IfFuncInNAME%A_Index% = str23IfFuncInNAME)
{
var12312 := ""
if (str23IfFuncInALL != "")
{
Loop, Parse, str23IfFuncInALL, `,
{
wasHereInfuncAndgetingVar1 := 1
var1 := Trim(A_LoopField)

var12312 .= PytranspileVariablesPy(var1, functionNames) . ", "

}
StringTrimRight, var12312, var12312, 2
}


if (wasHereInfuncAndgetingVar1 = 0)
{
str2345678 := str23IfFuncInNAME . Chr(40) . Chr(41)
}
else
{
str2345678 := str23IfFuncInNAME . Chr(40) . var12312 . Chr(41)
}
lineDone := 1

}


}

str23IfFuncInNAMEnum++
str23IfFuncInNAME%str23IfFuncInNAMEnum% := str23IfFuncInNAME






if (lineDone = 1)
{
pyCode .= str2345678 . "`n"
}
else
{
lineDone := 1
pyCode .= str234567 . "`n"
}

}
else if (SubStr(Trim(A_LoopField), 1, 7) = "return ")
{

StringTrimLeft, strFormReturn, A_LoopField, 7

var12312 := PytranspileVariablesPy(strFormReturn, functionNames)
out := "return " . var12312

lineDone := 1
pyCode .= out . "`n"

}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 10) = "endpoint, ")
{

StringTrimLeft, strFormEndpoint, A_LoopField, 10

strFormEndpoint1 := Trim(StrSplit(strFormEndpoint, ",", 1))
strFormEndpoint2 := Trim(StrSplit(strFormEndpoint, ",", 2))


putEndPointFlask1Up := "from flask import Flask, send_file, request, jsonify`nimport os`nvariables = {}`napp = Flask(__name__)`n`n@app.route('/')`ndef app_route():`n    return send_file(os.path.join(os.path.dirname(__file__), 'index.html')), 200`n"

putEndPointFlask2Down := "`n@app.errorhandler(404)`ndef not_found(e):`n    return " . Chr(34) . "Page not found" . Chr(34) . ", 404`n`nif __name__ == '__main__':`n    app.run(host='0.0.0.0', port=" . str(port) . ", debug=True)"




firstLineVar1 := "@app.route('/" . strFormEndpoint2 . "', methods=['POST'])"
firstLineVar2 := "def " . strFormEndpoint2 . "():"
firstLineVar3 := "|variables['" . strFormEndpoint1 . "'] = request.get_json()"

out := firstLineVar1 . "`n" . firstLineVar2 . "`n" . firstLineVar3

lineDone := 1
pyCode .= out . "`n"

}
else if (StrLower(A_LoopField) = "loop")
{
; infinity loops
haveWeEverUsedAloop := 1
lineDone := 1
var1 := "for A" . Chr(95) . "Index" . AindexcharLength . " , value in enumerate(iter(int, 1), start=1):"
nothing := ""
AindexcharLengthStr := nothing . AindexcharLength . nothing
theFixTextLoopNL := "variables['A" . Chr(95) . "Index" . AindexcharLengthStr . "'] = A" . Chr(95) . "Index" . AindexcharLengthStr

pycodeAcurlyBraceAddSomeVrasFixNL := 1
lineDone := 1
pycodeLoopfixa .= "nl|itsaersdtgtgfergsdgfsegdfsedAA|" . AindexcharLength . "`n"
pycodeLoopfixa1 := "nl|itsaersdtgtgfergsdgfsegdfsedAA|" . AindexcharLength
AindexcharLength++
pyCode .= pycodeLoopfixa1 . "`n" . var1 . "`n"

}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 6) = "loop, ") && (SubStr(Trim(StrLower(A_LoopField)), 1, 8) != "loop, % ") && (SubStr(Trim(StrLower(A_LoopField)), 1, 7) != "loop % ") && (SubStr(Trim(StrLower(A_LoopField)), 1, 11) != StrLower("Loop, Parse"))
{



str123 := A_LoopField
;MsgBox, % str123


StringTrimLeft, out2, str123, 6

;MsgBox % out2

;MsgBox, % out2
out2 := Trim(out2)


myVar := out2
lineYGI := PytranspileVariablesPy(myVar, functionNames)
line := lineYGI
haveWeEverUsedAloop := 1
;MsgBox, % line
var1 := "for A" . Chr(95) . "Index" . AindexcharLength . " in range(1, " . line . " + 1):"
nothing := ""
AindexcharLengthStr := nothing . AindexcharLength . nothing
theFixTextLoopNL := "variables['A" . Chr(95) . "Index" . AindexcharLengthStr . "'] = A" . Chr(95) . "Index" . AindexcharLengthStr

pycodeAcurlyBraceAddSomeVrasFixNL := 1

pycodeLoopfixa .= "nl|itsaersdtgtgfergsdgfsegdfsedAA|" . AindexcharLength . "`n"
pycodeLoopfixa1 := "nl|itsaersdtgtgfergsdgfsegdfsedAA|" . AindexcharLength
AindexcharLength++
lineDone := 1
pyCode .= pycodeLoopfixa1 . "`n" . var1 . "`n"
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 8) = "loop, % ")
{
str123 := A_LoopField
;MsgBox, % str123


StringTrimLeft, out2, str123, 8

;MsgBox % out2

;MsgBox, % out2
out2 := Trim(out2)


myVar := out2
lineYGI := PytranspileVariablesPy(myVar, functionNames)
line := lineYGI

;MsgBox, % line
var1 := "for A" . Chr(95) . "Index" . AindexcharLength . " in range(1, " . line . " + 1):"
nothing := ""
AindexcharLengthStr := nothing . AindexcharLength . nothing
theFixTextLoopNL := "variables['A" . Chr(95) . "Index" . AindexcharLengthStr . "'] = A" . Chr(95) . "Index" . AindexcharLengthStr

pycodeAcurlyBraceAddSomeVrasFixNL := 1
haveWeEverUsedAloop := 1
pycodeLoopfixa .= "nl|itsaersdtgtgfergsdgfsegdfsedAA|" . AindexcharLength . "`n"
pycodeLoopfixa1 := "nl|itsaersdtgtgfergsdgfsegdfsedAA|" . AindexcharLength
AindexcharLength++
lineDone := 1
pyCode .= pycodeLoopfixa1 . "`n" . var1 . "`n"
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 13) = StrLower("Loop, Parse, "))
{

var1 := A_LoopField
lineDone := 1
var1 := Trim(var1)
StringTrimLeft, var1, var1, 13

line1 := Trim(StrSplit(var1, ",", 1))

line1 := PytranspileVariablesPy(line1, functionNames)
line2 := ""
line3 := ""
itemsOut := ""
line2 := Trim(StrSplit(var1, ",", 2))
line3 := Trim(StrSplit(var1, ",", 3))



if (InStr(var1, Chr(96) . ","))
{
line2 := Chr(34) . "," . Chr(34)
itemsOut := "items = LoopParseFunc(" . line1 . ", " . line2 . ")"
}
else
{



if (line2 = "") && (line3 = "")
{
; nothing so only each char
itemsOut := "items = LoopParseFunc(" . line1 . ")"
}

if (line2 != "") && (line3 = "")
{
if (InStr(line2, Chr(96)))
{
line2 := Chr(34) . line2 . Chr(34)
}
itemsOut := "items = LoopParseFunc(" . line1 . ", " . line2 . ")"
}

if (line2 != "") && (line3 != "")
{
if (InStr(line2, Chr(96)))
{
line2 := Chr(34) . line2 . Chr(34)
}
if (InStr(line3, Chr(96)))
{
line3 := Chr(34) . line3 . Chr(34)
}

itemsOut := "items = LoopParseFunc(" . line1 . ", " . line2 . ", " . line3 . ")"
}



itemsOut := StrReplace(itemsOut, Chr(96), Chr(92))



}


var1out := itemsOut . "`n" . "for A" . Chr(95) . "Index" . AindexcharLength . ", A" . Chr(95) . "LoopField" . AindexcharLength . " in enumerate(items, start=1):"



nothing := ""
AindexcharLengthStr := nothing . AindexcharLength . nothing


theFixTextLoopLP := "variables['A" . Chr(95) . "Index" . AindexcharLengthStr . "'] = A" . Chr(95) . "Index" . AindexcharLengthStr . "`n" . "variables['A" . Chr(95) . "LoopField" . AindexcharLengthStr . "'] = A" . Chr(95) . "LoopField" . AindexcharLengthStr

pycodeAcurlyBraceAddSomeVrasFixLP := 1
haveWeEverUsedAloop := 1
pycodeLoopfixa .= "lp|itsaersdtgtgfergsdgfsegdfsedAA|" . AindexcharLength . "`n"
pycodeLoopfixa1 := "lp|itsaersdtgtgfergsdgfsegdfsedAA|" . AindexcharLength
AindexcharLength++
pyCode .= pycodeLoopfixa1 . "`n" . var1out . "`n"
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 7) = "gosub, ")
{

;MsgBox, % A_LoopField


sstr1 := A_LoopField

s := StrSplit(sstr1, ",", 2)
out1 := s

out1 := Trim(out1)

out2 := out1 . "()"

;MsgBox, % out2
lineDone := 1
pyCode .= out2 . "`n"

}
else if (A_LoopField == "Return")
{
pyCode .= "}" . "`n"
lineDone := 1
}
else if (RegExReplace(A_LoopField, "^\\w+:$", "") != A_LoopField) && (Trim(SubStr(A_LoopField, 0)) = ":") && (lineDone != 1)
{

;MsgBox, % A_LoopField



out1 := A_LoopField

out1 := Trim(out1)

StringTrimRight, out1, out1, 1



pyCode .= "def " . out1 . "():`n{`n"

;MsgBox, % out1
;~ MsgBox, % see

lineDone := 1
}
else if (SubStr(A_LoopField, -1) = "++")
{
str123 := Trim(A_LoopField)
StringTrimRight, str123, str123, 2

str123 := Trim(PytranspileVariablesPy(str123, functionNames))

out := str123 . " += 1"
lineDone := 1
pyCode .= out . "`n"
}
else if (SubStr(A_LoopField, -1) = "--")
{
str123 := Trim(A_LoopField)
StringTrimRight, str123, str123, 2

str123 := Trim(PytranspileVariablesPy(str123, functionNames))

out := str123 . " -= 1"
lineDone := 1
pyCode .= out . "`n"
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 4) = StrLower(CheckIFandElsesss1)) or (SubStr(Trim(StrLower(A_LoopField)), 1, 3) = StrLower(CheckIFandElsesss2)) or (SubStr(Trim(StrLower(A_LoopField)), 1, 5) = StrLower(CheckIFandElsesss3)) or (SubStr(Trim(StrLower(A_LoopField)), 1, 4) = StrLower(CheckIFandElsesss4)) or (SubStr(Trim(StrLower(A_LoopField)), 1, 9) = StrLower(CheckIFandElsesss5)) or (SubStr(Trim(StrLower(A_LoopField)), 1, 8) = StrLower(CheckIFandElsesss6)) or (SubStr(Trim(StrLower(A_LoopField)), 1, 10) = StrLower(CheckIFandElsesss7)) or (SubStr(Trim(StrLower(A_LoopField)), 1, 9) = StrLower(CheckIFandElsesss8))
{


if (SubStr(Trim(StrLower(A_LoopField)), 1, 4) = StrLower(CheckIFandElsesss1))
{
CheckIFandElsesssNum := 4
CheckIFandElsesssNumNum := 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 3) = StrLower(CheckIFandElsesss2))
{
CheckIFandElsesssNum := 3
CheckIFandElsesssNumNum := 2
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 5) = StrLower(CheckIFandElsesss3))
{
CheckIFandElsesssNum := 5
CheckIFandElsesssNumNum := 3
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 4) = StrLower(CheckIFandElsesss4))
{
CheckIFandElsesssNum := 4
CheckIFandElsesssNumNum := 4
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 9) = StrLower(CheckIFandElsesss5))
{
CheckIFandElsesssNum := 9
CheckIFandElsesssNumNum := 5
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 8) = StrLower(CheckIFandElsesss6))
{
CheckIFandElsesssNum := 8
CheckIFandElsesssNumNum := 6
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 10) = StrLower(CheckIFandElsesss7))
{
CheckIFandElsesssNum := 10
CheckIFandElsesssNumNum := 7
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 9) = StrLower(CheckIFandElsesss8))
{
CheckIFandElsesssNum := 9
CheckIFandElsesssNumNum := 8
}

StringTrimLeft, str123, A_LoopField, variables.CheckIFandElsesssNum

str123 := CheckIFandElsesss%CheckIFandElsesssNumNum% . Chr(32) . PytranspileVariablesPy(str123, functionNames)


if (SubStr(Trim(StrLower(str123)), 1, 7) = StrLower("else if"))
{
str123 := StrReplace(str123, "else if", "elif")
}
else
{
str123 := str123
StringTrimLeft, str123, str123, 2
str123 := "if" . str123
}


str123 := Trim(str123) . ":"

str123 := StrReplace(str123, "if " . Chr(40) . Chr(32), "if " . Chr(40))
str123 := StrReplace(str123, Chr(32) . Chr(41) . ":", Chr(41) . ":")


out := str123


lineDone := 1
pyCode .= out . "`n"
}
else if (StrLower(A_LoopField) = StrLower("else"))
{

out := "else:"

lineDone := 1
pyCode .= out . "`n"
}
else if (InStr(A_LoopField, " := ")) or (InStr(A_LoopField, " .= ")) or (InStr(A_LoopField, " += ")) or (InStr(A_LoopField, " -= ")) or (InStr(A_LoopField, " *= ")) && (lineDone = 0)
{
lineDone := 1
str123 := A_LoopField

whatVarWeUse := ""
if (InStr(A_LoopField, " := "))
{
whatVarWeUse := " = "
}
if (InStr(A_LoopField, " .= "))
{
whatVarWeUse := " += "
}
if (InStr(A_LoopField, " += "))
{
whatVarWeUse := " += "
}
if (InStr(A_LoopField, " -= "))
{
whatVarWeUse := " -= "
}
if (InStr(A_LoopField, " *= "))
{
whatVarWeUse := " *= "
}




str123 := StrReplace(str123, ":=", "=")
str123 := StrReplace(str123, ".=", "=")
str123 := StrReplace(str123, "+=", "=")
str123 := StrReplace(str123, "-=", "=")
str123 := StrReplace(str123, "*=", "=")


var1avavavavva := Trim(StrSplit(str123, "=", 1))
var2avavavavva := Trim(StrSplit(str123, "=", 2))
;OutputDebug, ||||||||||||%var2%||||||||||||

varOUT1avavavavva := PytranspileVariablesPy(var1avavavavva, functionNames)
varOUT2avavavavva := PytranspileVariablesPy(var2avavavavva, functionNames)


out := varOUT1avavavavva . whatVarWeUse . varOUT2avavavavva


pyCode .= out . "`n"

}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = Chr(59)) && (lineDone = 0)
{
StringTrimLeft, str123, A_LoopField, 1

str123 := "#" . str123
out := str123
lineDone := 1
pyCode .= out . "`n"
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = Chr(59)) && (lineDone = 0)
{
StringTrimLeft, str123, A_LoopField, 1

str123 := "#" . str123
out := str123
lineDone := 1
pyCode .= out . "`n"
}
else if (SubStr(Trim(StrLower(A_LoopField)), 0) = Chr(41)) && (lineDone = 0)
{
str123 := A_LoopField
FuncNameWhatIsIt := StrSplit(str123, "(", 1)

Loop, Parse, FuncNameWhatIsIt
{
StringTrimLeft, str123, str123, 1
}

outVarTransiled := PytranspileVariablesPy(str123, functionNames)



out := FuncNameWhatIsIt . outVarTransiled
lineDone := 1
pyCode .= out . "`n"
}
else
{
; this is THE else
if (lineDone != 1)
{
if (skipLeftCuleyForFuncPLS != 1)
{
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = Chr(125))
{
pyCode .= Chr(125) . "`n"
}
else
{
if (pycodeAcurlyBraceAddSomeVrasFixLP = 1) && (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = Chr(123))
{
pycodeAcurlyBraceAddSomeVrasFixLP := 0


pyCode .= A_LoopField . "`n" . theFixTextLoopLP . "`n"
}
else
{
if (pycodeAcurlyBraceAddSomeVrasFixNL = 1) && (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = Chr(123))
{
pycodeAcurlyBraceAddSomeVrasFixNL := 0
pyCode .= A_LoopField . "`n" . theFixTextLoopNL . "`n"
}
else
{
pyCode .= A_LoopField . "`n"
}
}
}
}
else
{
skipLeftCuleyForFuncPLS := 0
}
}
}

} ; end of the parsing loop













































;OutputDebug, %haveWeEverUsedAloop%
if (haveWeEverUsedAloop = 1)
{

StringTrimRight, pycodeLoopfixa, pycodeLoopfixa, 1

;OutputDebug, |%pycodeLoopfixa%|
AIndexLoopCurlyFix := 1
Loop, Parse, pycodeLoopfixa, `n, `r
{



str123 := A_LoopField
fixLoopLokingFor := A_LoopField
fixLoopLokingForfound := 1
out1 := StrSplit(str123 ,"|" , 1)
out2 := StrSplit(str123 ,"|" , 3)
;OutputDebug, |%out1%|
;OutputDebug, |%out2%|



wasAtanyIfsElseAddAIndexLoopCurlyFix := 0


if (out1 = "nl")
{


inTarget := 0
insideBracket := 0
netsedCurly := 0
eldLoopNestedBADlol := 0
readyToEnd := 0
endBracketDOntPutThere := 0
dontSaveStr := 0
weAreDoneHereCurly := 0
DeleayOneCuzOfLoopParse := 0
fixLoopLokingForNum := 0
insdeAnestedLoopBAD := 0
foundTheTopLoop := 0
out4758686d86d86d86578991a%AIndexLoopCurlyFix% := ""
Loop, Parse, pyCode, `n, `r
{
;MsgBox, dsfgsdefgesrdg1
;MsgBox, |%A_LoopField%|`n|%fixLoopLokingFor%|


if (InStr(A_LoopField, fixLoopLokingFor)) && (insdeAnestedLoopBAD != 1)
{
fixLoopLokingForNum := 1

;MsgBox, do we came here 1
}

if (InStr(A_LoopField, "for ")) && (weAreDoneHereCurly != 1) && (insdeAnestedLoopBAD != 1) && (fixLoopLokingForNum = 1)
{

s := StrSplit(A_LoopField ,"A" . Chr(95) . "Index", 2)
out1z := s


s := StrSplit(out1z, " ", 1)
out1z := Trim(s)


;MsgBox, % out1z

;MsgBox, do we came here 2
fixLoopLokingForNum := 0
foundTheTopLoop++
  inTarget := 1
	;MsgBox, % A_LoopField
	dontSaveStr := 1

	ALoopField := A_LoopField

	;ALoopField := StrReplace(ALoopField, "for (/* Loop parse */", "for (/* Loop parse */ /* From AHK */")
DeleayOneCuzOfLoopParse := 1
	out4758686d86d86d86578991a%AIndexLoopCurlyFix% .= ALoopField . "`n"
}

if (inTarget = 1) && (InStr(A_LoopField, Chr(123))) && (insdeAnestedLoopBAD != 1)
{
insideBracket := 1
}

if (insideBracket = 1) && (InStr(A_LoopField, Chr(123))) && (insdeAnestedLoopBAD != 1)
{
netsedCurly++
}

if (insideBracket = 1) && (InStr(A_LoopField, Chr(125))) && (insdeAnestedLoopBAD != 1)
{
netsedCurly--
readyToEnd := 1
}

if (InStr(A_LoopField, "for ")) && (insdeAnestedLoopBAD != 1) && (foundTheTopLoop >= 2)
{
insdeAnestedLoopBAD := 1
insideBracket1 := 0
netsedCurly1 := 0
}
if (inTarget = 1)
{
foundTheTopLoop++
}
if (insdeAnestedLoopBAD = 1)
{



if (InStr(A_LoopField, Chr(123)))
{
insideBracket1 := 1
}

if (insideBracket1 = 1) && (InStr(A_LoopField, Chr(123)))
{
netsedCurly1++
}

if (insideBracket1 = 1) && (InStr(A_LoopField, Chr(125)))
{
netsedCurly1--
readyToEnd1 := 1
}


if (InStr(A_LoopField, Chr(125))) && (readyToEnd1 = 1) && (netsedCurly1 = 0) && (insideBracket = 1)
{
;MsgBox, % A_LoopField
eldLoopNestedBADlol := 1
;out4758686d86d86d86578991a%AIndexLoopCurlyFix% .= A_LoopField . "`n"
}

out4758686d86d86d86578991a%AIndexLoopCurlyFix% .= A_LoopField . "`n"

}


if (inTarget = 1) && (dontSaveStr != 1) && (fixLoopLokingForNum != 1) && (insdeAnestedLoopBAD != 1)
{

ALoopField := A_LoopField




; Replace "A_Index" with or without a following digit with "A_Index" + out1z
ALoopField := RegExReplace(ALoopField, "A" . Chr(95) . "Index(?:\\d+)?", "A" . Chr(95) . "Index" . out1z)



;ALoopField := StrReplace(ALoopField, "A_LoopField", "A_LoopField" . AIndexLoopCurlyFix)


out4758686d86d86d86578991a%AIndexLoopCurlyFix% .= ALoopField . "`n"

}


if (inTarget = 1) && (InStr(A_LoopField, Chr(125))) && (readyToEnd = 1) && (netsedCurly = 0) && (weAreDoneHereCurly = 0) && (dontSaveStr != 1) && (insdeAnestedLoopBAD != 1)
{
;MsgBox, % A_LoopField
weAreDoneHereCurly := 1
inTarget := 0
endBracketDOntPutThere := 1
;out4758686d86d86d86578991a%AIndexLoopCurlyFix% .= A_LoopField . "`n"
}
dontSaveStr := 0

if (inTarget != 1) && (endBracketDOntPutThere != 1) && (insdeAnestedLoopBAD != 1)
{
out4758686d86d86d86578991a%AIndexLoopCurlyFix% .= A_LoopField . "`n"

}
endBracketDOntPutThere := 0

if (eldLoopNestedBADlol = 1)
{
 insdeAnestedLoopBAD := 0
}


}
strstysrstsytTRIMHELP := out4758686d86d86d86578991a%AIndexLoopCurlyFix%
StringTrimRight, strstysrstsytTRIMHELP, strstysrstsytTRIMHELP, 1
;MsgBox, % out4758686d86d86d86578991a%AIndexLoopCurlyFix%


pyCode := strstysrstsytTRIMHELP

;MsgBox, % jsCode
wasAtanyIfsElseAddAIndexLoopCurlyFix := 1
}
else
{


inTarget := 0
insideBracket := 0
netsedCurly := 0
eldLoopNestedBADlol := 0
readyToEnd := 0
endBracketDOntPutThere := 0
dontSaveStr := 0
weAreDoneHereCurly := 0
DeleayOneCuzOfLoopParse := 0
fixLoopLokingForNum := 0
insdeAnestedLoopBAD := 0
foundTheTopLoop := 0
out4758686d86d86d86578991a%AIndexLoopCurlyFix% := ""
Loop, Parse, pyCode, `n, `r
{

if (InStr(A_LoopField , fixLoopLokingFor)) && (insdeAnestedLoopBAD != 1)
{
fixLoopLokingForNum := 1
;MsgBox, do we came here 3
}

if (InStr(A_LoopField , "for ")) && (weAreDoneHereCurly != 1) && (insdeAnestedLoopBAD != 1) && (fixLoopLokingForNum = 1)
{


s := StrSplit(A_LoopField ,"A" . Chr(95) . "LoopField", 2)
out1z := s

s := StrSplit(out1z, " ", 1)
out1z := Trim(s)

;MsgBox, % out1z

fixLoopLokingForNum := 0
;MsgBox, do we came here 4
foundTheTopLoop++
  inTarget := 1
	;MsgBox, % A_LoopField
	dontSaveStr := 1

	ALoopField := A_LoopField

	;ALoopField := StrReplace(ALoopField, "for (/* Loop parse */", "for (/* Loop parse */ /* From AHK */")
DeleayOneCuzOfLoopParse := 1
	out4758686d86d86d86578991a%AIndexLoopCurlyFix% .= ALoopField . "`n"
}

if (inTarget = 1) && (InStr(A_LoopField, Chr(123))) && (insdeAnestedLoopBAD != 1)
{
insideBracket := 1
}

if (insideBracket = 1) && (InStr(A_LoopField, Chr(123))) && (insdeAnestedLoopBAD != 1)
{
netsedCurly++
}

if (insideBracket = 1) && (InStr(A_LoopField, Chr(125))) && (insdeAnestedLoopBAD != 1)
{
netsedCurly--
readyToEnd := 1
}

if (InStr(A_LoopField, "for ")) && (insdeAnestedLoopBAD != 1) && (foundTheTopLoop >= 2)
{
insdeAnestedLoopBAD := 1
insideBracket1 := 0
netsedCurly1 := 0
}
if (inTarget = 1)
{
foundTheTopLoop++
}
if (insdeAnestedLoopBAD = 1)
{



if (InStr(A_LoopField, Chr(123)))
{
insideBracket1 := 1
}

if (insideBracket1 = 1) && (InStr(A_LoopField, Chr(123)))
{
netsedCurly1++
}

if (insideBracket1 = 1) && (InStr(A_LoopField, Chr(125)))
{
netsedCurly1--
readyToEnd1 := 1
}


if (InStr(A_LoopField, Chr(125))) && (readyToEnd1 = 1) && (netsedCurly1 = 0) && (insideBracket = 1)
{
;MsgBox, % A_LoopField
eldLoopNestedBADlol := 1
;out4758686d86d86d86578991a%AIndexLoopCurlyFix% .= A_LoopField . "`n"
}


out4758686d86d86d86578991a%AIndexLoopCurlyFix% .= A_LoopField . "`n"

}


if (inTarget = 1) && (dontSaveStr != 1) && (fixLoopLokingForNum != 1) && (insdeAnestedLoopBAD != 1)
{

ALoopField := A_LoopField


; Replace "A_Index" with or without a following digit with "A_Index" + out1z
ALoopField := RegExReplace(ALoopField, "A" . Chr(95) . "Index(?:\\d+)?", "A" . Chr(95) . "Index" . out1z)
; Replace "A_Index" with or without a following digit with "A_Index" + out1z
ALoopField := RegExReplace(ALoopField, "A" . Chr(95) . "LoopField(?:\\d+)?", "A" . Chr(95) . "LoopField" . out1z)





out4758686d86d86d86578991a%AIndexLoopCurlyFix% .= ALoopField . "`n"

}


if (inTarget = 1) && (InStr(A_LoopField, Chr(125))) && (readyToEnd = 1) && (netsedCurly = 0) && (weAreDoneHereCurly = 0) && (dontSaveStr != 1) && (insdeAnestedLoopBAD != 1)
{
;MsgBox, % A_LoopField
weAreDoneHereCurly := 1
inTarget := 0
endBracketDOntPutThere := 1
;out4758686d86d86d86578991a%AIndexLoopCurlyFix% .= A_LoopField . "`n"
}
dontSaveStr := 0

if (inTarget != 1) && (endBracketDOntPutThere != 1) && (insdeAnestedLoopBAD != 1)
{
out4758686d86d86d86578991a%AIndexLoopCurlyFix% .= A_LoopField . "`n"

}
endBracketDOntPutThere := 0

if (eldLoopNestedBADlol = 1)
{
 insdeAnestedLoopBAD := 0
}


}

strstysrstsytTRIMHELP := out4758686d86d86d86578991a%AIndexLoopCurlyFix%
StringTrimRight, strstysrstsytTRIMHELP, strstysrstsytTRIMHELP, 1
;MsgBox, % out4758686d86d86d86578991a%AIndexLoopCurlyFix%


pyCode := strstysrstsytTRIMHELP

;MsgBox, % jsCode
wasAtanyIfsElseAddAIndexLoopCurlyFix := 1
}

if (wasAtanyIfsElseAddAIndexLoopCurlyFix = 1)
{
AIndexLoopCurlyFix++
wasAtanyIfsElseAddAIndexLoopCurlyFix := 0
}
}


out4758686d86dgt8r754444444 := ""
hold := 0
Loop, Parse, pyCode, `n, `r
{
ignore := 0
if (InStr(A_LoopField, "for "))
{
if (hold = 1) && (holdText = A_LoopField)
{
ignore := 1
}
else
{
holdText := A_LoopField
hold := 1
}
}

if (!(ignore))
{
out4758686d86dgt8r754444444 .= A_LoopField . "`n"
}
}

StringTrimRight, out4758686d86dgt8r754444444, out4758686d86dgt8r754444444, 1
pyCode := out4758686d86dgt8r754444444


}





pyCode := indent_nested_curly_braces(pyCode)


































pyCodeOut1234565432 := ""
Loop, Parse, pyCode, `n, `r
{

if (Trim(A_LoopField) != Chr(123)) && (Trim(A_LoopField) != Chr(125))
{
out := A_LoopField

StringTrimLeft, out, out, 1

if (InStr(out, "variables['A" . Chr(95) . "Index")) or (InStr(out, "variables['A" . Chr(95) . "LoopField"))
{

out := StrReplace(out, Chr(39) . Chr(34) . Chr(93) . Chr(125) . Chr(39) . Chr(93), Chr(34) . Chr(93) . Chr(125) . Chr(39) . Chr(93))
out := StrReplace(out, Chr(39) . Chr(39) . Chr(93), Chr(39) . Chr(93))
}

if (!(InStr(out, "|itsaersdtgtgfergsdgfsegdfsedAA|")))
{
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) != Chr(59))
{
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = Chr(124))
{
nothing := ""
out := StrReplace(out, "|", nothing)
pyCodeOut1234565432 .= Chr(32) . Chr(32) . Chr(32) . Chr(32) . out . "`n"
}
else
{
pyCodeOut1234565432 .= out . "`n"
}
}
}


}

}


StringTrimRight, pyCode, pyCodeOut1234565432, 1


pyCodeOutOneLastFix := ""
Loop, Parse, pyCode, `n, `r
{

sstr1 := A_LoopField

sstr1 := StrReplace(sstr1, "variables['A_TickCount']", "BuildInVars(" . Chr(34) . "A_TickCount" . Chr(34) . ")")
sstr1 := StrReplace(sstr1, "variables['A_Now']", "BuildInVars(" . Chr(34) . "A_Now" . Chr(34) . ")")
sstr1 := StrReplace(sstr1, "variables['A_YYYY']", "BuildInVars(" . Chr(34) . "A_YYYY" . Chr(34) . ")")
sstr1 := StrReplace(sstr1, "variables['A_MMMM']", "BuildInVars(" . Chr(34) . "A_MMMM" . Chr(34) . ")")
sstr1 := StrReplace(sstr1, "variables['A_MMM']", "BuildInVars(" . Chr(34) . "A_MMM" . Chr(34) . ")")
sstr1 := StrReplace(sstr1, "variables['A_MM']", "BuildInVars(" . Chr(34) . "A_MM" . Chr(34) . ")")
sstr1 := StrReplace(sstr1, "variables['A_DDDD']", "BuildInVars(" . Chr(34) . "A_DDDD" . Chr(34) . ")")
sstr1 := StrReplace(sstr1, "variables['A_DDD']", "BuildInVars(" . Chr(34) . "A_DDD" . Chr(34) . ")")
sstr1 := StrReplace(sstr1, "variables['A_DD']", "BuildInVars(" . Chr(34) . "A_DD" . Chr(34) . ")")
sstr1 := StrReplace(sstr1, "variables['A_Hour']", "BuildInVars(" . Chr(34) . "A_Hour" . Chr(34) . ")")
sstr1 := StrReplace(sstr1, "variables['A_Min']", "BuildInVars(" . Chr(34) . "A_Min" . Chr(34) . ")")
sstr1 := StrReplace(sstr1, "variables['A_Sec']", "BuildInVars(" . Chr(34) . "A_Sec" . Chr(34) . ")")
sstr1 := StrReplace(sstr1, "variables['A_Space']", "BuildInVars(" . Chr(34) . "A_Space" . Chr(34) . ")")
sstr1 := StrReplace(sstr1, "variables['A_Tab']", "BuildInVars(" . Chr(34) . "A_Tab" . Chr(34) . ")")


pyCodeOutOneLastFix .= sstr1 . "`n"

}
StringTrimRight, pyCode, pyCodeOutOneLastFix, 1





pyCodeFinal := pyCode

allFuncsHere := ""
Loop, Parse, funcs_func, "|"
{
if (InStr(pyCodeFinal, A_LoopField . Chr(40)))
{
hererererehre := A_LoopField . "_func"
allFuncsHere .= func_%hererererehre%
}
}

pyCodeFinal := allFuncsHere . "`n" . pyCodeFinal . "`n"

if (usedLib = "")
{
pyCode := weEverUseVars . "`n" . pyCodeFinal

if (weEverUseVars = "")
{
pyCode := pyCodeFinal
}
else
{
pyCode := weEverUseVars . "`n" . pyCodeFinal
}

}
else
{
pyCode := usedLib . "`n" . weEverUseVars . "`n" . pyCodeFinal
}




pyCode := StrReplace(pyCode, "`n`n", "`n")


if (putEndPointFlask1Up != "")
{
pyCode := putEndPointFlask1Up . "`n" . pyCode . "`n" . putEndPointFlask2Down . "`n"
}




Loop, % theIdNumOfThe34
{
pyCode := StrReplace(pyCode, "ihuiuuhuuhtheidFor--asas-theuhturtyphoutr-" . Chr(65) . Chr(65) . A_Index . Chr(65) . Chr(65), theIdNumOfThe34theVar%A_Index%)
}


return pyCode

}
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;








RepeatSpaces(count)
{
spaces := ""
Loop, % count
{
spaces .= Chr(32)
}
return spaces
}



ifTheLineIsAFuncDec(sstrgjvkh, theFuncWeFound)
{
Loop, Parse, theFuncWeFound, `n, `r
{

numOfChars := 0
Loop, Parse, A_LoopField
{
numOfChars++
}

ALoopFieldd := StrSplit(A_LoopField, Chr(40), 1)
ALoopFieldd2 := StrSplit(sstrgjvkh, Chr(40), 1)

if (SubStr(ALoopFieldd, 1, numOfChars) = ALoopFieldd2) && (InStr(sstrgjvkh, Chr(40)))
{
return true
}


}

return false
}






isVarAnumKindaVar(sstrrrrr)
{

sstrLettersStart := 48
Loop, 10
{
if (InStr(sstrrrrr, Chr(sstrLettersStart)))
{
return true
}
sstrLettersStart++
}

if (InStr(sstrrrrr, Chr(95)))
{
return true
}


return false
}

varDetect(sstrrrrr)
{

sstrLettersStart := 97
Loop, 26
{
if (InStr(sstrrrrr, Chr(sstrLettersStart)))
{
return true
}
sstrLettersStart++
}


sstrLettersStart := 65
Loop, 26
{
if (InStr(sstrrrrr, Chr(sstrLettersStart)))
{
return true
}
sstrLettersStart++
}


sstrLettersStart := 48
Loop, 10
{
if (InStr(sstrrrrr, Chr(sstrLettersStart)))
{
return true
}
sstrLettersStart++
}

if (InStr(sstrrrrr, Chr(95)))
{
return true
}

if (InStr(sstrrrrr, Chr(37)))
{
return true
}

return false
}


funcToChecIfVaidNameForFunc(sstrrrrr)
{
    ; Check if the string is empty
    if (!(sstrrrrr))
    {
        ;MsgBox, Invalid function name: %sstrrrrr% (empty string)
        return false
    }

    ; Check if the first character is a digit (invalid for function name)
    firstChar := SubStr(sstrrrrr, 1, 1)
    if (firstChar >= "0" && firstChar <= "9")
    {
     ;   MsgBox, Invalid function name: %sstrrrrr% (starts with a digit)
        return false
    }

    ; Initialize a flag for validation
    isValid := true

    ; Loop through each character in the string using Loop, Parse
    Loop, Parse, sstrrrrr
    {
        ; Check the current parsed item (character)
        char := A_LoopField

        ; Check if the character is a valid letter, digit, or underscore
        if (!(char >= "A" && char <= "Z" || char >= "a" && char <= "z" || char >= "0" && char <= "9" || char = "_"))
        {
           ; MsgBox, Invalid character %char% in function name: %sstrrrrr%
            isValid := false
            break
        }
    }

    ; If passed all checks, return true (valid function name)
    return isValid
}

transpileVariables(sstr123455, functionNames)
{
sstr123455 := Trim(sstr123455)
numOfStrings := 0

outOftranspileVariables := ""
outOftranspileVariablesOut := sstr123455


outOftranspileVariablesOut := StrReplace(outOftranspileVariablesOut, Chr(40), " ( ")
outOftranspileVariablesOut := StrReplace(outOftranspileVariablesOut, Chr(41), " ) ")
outOftranspileVariablesOut := StrReplace(outOftranspileVariablesOut, Chr(44), " , ")
outOftranspileVariablesOut := StrReplace(outOftranspileVariablesOut, Chr(60), " < ")
outOftranspileVariablesOut := StrReplace(outOftranspileVariablesOut, Chr(62), " > ")
outOftranspileVariablesOut := StrReplace(outOftranspileVariablesOut, Chr(91), " [ ")
outOftranspileVariablesOut := StrReplace(outOftranspileVariablesOut, Chr(93), " ] ")

wasHereVarTryUhBug := 1

Loop, Parse, outOftranspileVariablesOut, " "
{
howManyCharIfVar := 0
Loop, Parse, A_LoopField
{
if (varDetect(A_LoopField))
{
howManyCharIfVar++
}
}
howManyCharIfVar2 := 0
Loop, Parse, A_LoopField
{
howManyCharIfVar2++
}
istAvar := 0
if (howManyCharIfVar = howManyCharIfVar2)
{
istAvar := 1
}

if (istAvar = 1)
{

howManyCharIfVar := 0
Loop, Parse, A_LoopField
{
if (isVarAnumKindaVar(A_LoopField))
{
howManyCharIfVar++
}
}

howManyCharIfVar2 := 0
Loop, Parse, A_LoopField
{
howManyCharIfVar2++
}
isNumKindaVar := 0
if (howManyCharIfVar2 = howManyCharIfVar)
{
isNumKindaVar := 1
}

if (isNumKindaVar = 1)
{
outOftranspileVariables .= A_LoopField . Chr(32)
}
else
{

if (InStr(A_LoopField, "%"))
{

if ((SubStr(Trim(A_LoopField), 1, 1) = "%") && (SubStr(Trim(A_LoopField), 0) = "%"))
{
StringTrimRight, var1, A_LoopField, 1
StringTrimLeft, var1, var1, 1

out1 := "variables." . var1
outOftranspileVariables .= out1 . Chr(32)
}
else
{

var1 := StrSplit(A_LoopField, "%", 1)
var2 := StrSplit(A_LoopField, "%", 2)
out1 := "variables[" . Chr(34) . var1 . Chr(34) . " + variables." . var2 . "]"
outOftranspileVariables .= out1 . Chr(32)
}
}
else
{
out1 := "variables." . A_LoopField
outOftranspileVariables .= out1 . Chr(32)
}
}


}
else
{
outOftranspileVariables .= A_LoopField . Chr(32)
}
wasHereVarTryUhBug := 0
}

if (wasHereVarTryUhBug = 1)
{
outOftranspileVariables := outOftranspileVariablesOut
}

;OutputDebug, |%outOftranspileVariables%|


Loop, Parse, functionNames, "|"
{
ALoopFieldFixFunc := A_LoopField
Loop, Parse, outOftranspileVariables, " "
{
if ("variables." . ALoopFieldFixFunc == A_LoopField)
{
outOftranspileVariables := StrReplace(outOftranspileVariables, "variables." . ALoopFieldFixFunc , "await " . ALoopFieldFixFunc)
}
}
}


Loop, % numOfStrings
{
outOftranspileVariables := StrReplace(outOftranspileVariables, "freeeeepaestine-sav-etehmtyeah-freee-n" . A_Index, Chr(34) . theString%A_Index% . Chr(34))
}


;OutputDebug, |%outOftranspileVariables%|
outOftranspileVariables := Trim(outOftranspileVariables)

outOftranspileVariables := StrReplace(outOftranspileVariables, Chr(96), Chr(92))
outOftranspileVariables := StrReplace(outOftranspileVariables, Chr(92) . Chr(92), Chr(96))
outOftranspileVariables := StrReplace(outOftranspileVariables, "cyiasasasasstAYtheummonlyemlpystringya-a-" . Chr(100), Chr(34) . Chr(34))


;OutputDebug, %outOftranspileVariables%


; Check and replace "variables.false"
if (SubStr(outOftranspileVariables, -14) = "variables.false")
{
outOftranspileVariables := StrReplace(outOftranspileVariables, "variables.false", "false")
}
outOftranspileVariables := StrReplace(outOftranspileVariables, "variables.false ", "false ")

; Check and replace "variables.if"
if (SubStr(outOftranspileVariables, -11) = "variables.if")
{
outOftranspileVariables := StrReplace(outOftranspileVariables, "variables.if", "if")
}
outOftranspileVariables := StrReplace(outOftranspileVariables, "variables.if ", "if ")

; Check and replace "variables.else"
if (SubStr(outOftranspileVariables, -13) = "variables.else")
{
outOftranspileVariables := StrReplace(outOftranspileVariables, "variables.else", "else")
}
outOftranspileVariables := StrReplace(outOftranspileVariables, "variables.else ", "else ")


; Check and replace "variables.true"
if (SubStr(outOftranspileVariables, -13) = "variables.true")
{
outOftranspileVariables := StrReplace(outOftranspileVariables, "variables.true", "true")
}

outOftranspileVariables := StrReplace(outOftranspileVariables, "variables.true ", "true ")


outOftranspileVariables := StrReplace(outOftranspileVariables, "variables.and ", "&& ")
outOftranspileVariables := StrReplace(outOftranspileVariables, "variables.or ", "|| ")


outOftranspileVariables := StrReplace(outOftranspileVariables, " = ", " == ")
outOftranspileVariables := StrReplace(outOftranspileVariables, " = ", " == ")


outOftranspileVariables := StrReplace(outOftranspileVariables, " ( ", " (")
outOftranspileVariables := StrReplace(outOftranspileVariables, " ) ", ") ")



outOftranspileVariables := StrReplace(outOftranspileVariables, "  >= ", " >= ")
outOftranspileVariables := StrReplace(outOftranspileVariables, "  <= ", " <= ")

outOftranspileVariables := StrReplace(outOftranspileVariables, " . ", " + ")
outOftranspileVariables := StrReplace(outOftranspileVariables, " ,  ", ", ")
outOftranspileVariables := StrReplace(outOftranspileVariables, " [ ", "[")
outOftranspileVariables := StrReplace(outOftranspileVariables, " ] ", "]")

outOftranspileVariables := StrReplace(outOftranspileVariables, "!=", " !=")

;OutputDebug, %outOftranspileVariables%

return outOftranspileVariables
}







transpileLowVariables(sstr)
{
sstr := Trim(sstr)

outOftranspileVariablesOut := Chr(34)
if (InStr(sstr, Chr(37)))
{
Loop, Parse, sstr, "%"
{

if (Mod(A_Index, 2))
{
outOftranspileVariablesOut .= A_LoopField
}
else
{
outOftranspileVariablesOut .= Chr(34) . " + variables." . A_LoopField . " + " . Chr(34)
}

}
}
else
{
sstr := Chr(34) . sstr . Chr(34)
return sstr
}

outOftranspileVariablesOut := outOftranspileVariablesOut . Chr(34)
return outOftranspileVariablesOut
}

Ascc(string)
{

plusOffsetLowercase := 96
plusOffsetUpercase := 64

lowerCaseLetters := "abcdefghijklmnopqrstuvwxyz"
uperCaseLetters := "ABCDEFGHIJKLMNOPQRSTUVWXYZ"



Loop, Parse, lowerCaseLetters
{
if (A_LoopField == string)
{
return A_Index + plusOffsetLowercase
}
}

Loop, Parse, uperCaseLetters
{
if (A_LoopField == string)
{
return A_Index + plusOffsetUpercase
}
}
return 32
}

TitleCaseString(string)
{

text := StrLower(string)

out := ""
Loop, Parse, text, `n, `r
{

out1 := ""
Loop, Parse, A_LoopField
{
if (A_Index = 1)
{
out1 .= Chr(Ascc(A_LoopField) - 32)
}
else
{
out1 .= A_LoopField
}
}
out .= out1 . " "


}
StringTrimRight, out, out, 1

return out
}

CountCommasWithoutBacktick(s)
{
bbbackitck := Chr(96)
howManyCommasWhitBacktickAtTheBegining := 0
AIndex := 0
Loop, Parse, s, " "
{


if (InStr(A_LoopField, ",")) && (!(InStr(A_LoopField, bbbackitck . ",")))
{
AIndex++
;~ MsgBox, %A_LoopField%
;~ MsgBox, AIndex %AIndex%
}

;~ MsgBox, % bbbackitck . ","
;~ MsgBox, % A_LoopField
if (InStr(A_LoopField, bbbackitck . ","))
{
  howManyCommasWhitBacktickAtTheBegining++
;MsgBox, % howManyCommasWhitBacktickAtTheBegining
}

} ; Loop, Parse End


if (AIndex >= 3)
{
return true
}
else
{
return false
}


} ; end of func

compilerJs(AHKcode)
{


jsCodeGui := ""

base64soundList := ""
base64soundNum := 0
base64iconNum := 0
base64iconList := ""
out123456 := ""

textAfterSemicolonNum := 0


out123456ggFixTrim := ""
ifWeUseCanvasThenAddUpdateFunc1 := ""
ifWeUseCanvasThenAddUpdateFunc2 := ""
varOutJsCanvasFixTranspernat := ""
rectangleId := 0
switchId := 0
CheckboxId := 0
IDEId := 0
videoId := 0
IframeId := 0
DropDownListId := 0
ifWeUseCanvas := 0
weUseCnanvasAtALL := 0
weUseCnanvasAtALLEver := 0
libNum := 0
isFullScrenOnce := 0

filenameOfHTH := "HTH"
TextData := ""
out := ""
base64ImageData := ""
base64soundList := ""
base64iconList := ""
base64VideoData := ""
jsCode01CanvasW := ""
jsCode01CanvasH := ""
skipLeftCuleyForFuncPLS := 0
eavbnsalvbaslv := 0
ifWeUseCanvas := 0
weUseCnanvasAtALL := 0
numOfTextData := 0
funcs := "let funcs = {`n"
doWeEvenDecAnyFuncHUH := 0
onKeyPress := ""
jsCodeGui := ""
isFullScrenOnce := 0
HotKeyCalledHotKyes := ""
jsCode := ""
outAHKCodeTrimed := ""

guiColorShow := "linear-gradient(90deg, " . Chr(34) . " + " . Chr(34) . "#121212" . Chr(34) . " + " . Chr(34) . " 0" . Chr(37) . ", " . Chr(34) . " + " . Chr(34) . "#121212" . Chr(34) . " + " . Chr(34) . " 100" . Chr(37) . ")"
guiFontShow := "15"

nothing := ""
if (AHKcode = "")
{
AHKcode := "OutputDebug, no code"
}
AHKcode := StrReplace(AHKcode, Chr(13), "")

Loop, Parse, AHKcode, `n, `r
{
outAHKCodeTrimed .= Trim(A_LoopField) . "`n"
}
StringTrimRight, AHKcode, outAHKCodeTrimed, 1




AHKcodeOUT754754 := ""
areWEinSome34sNum := 0
theIdNumOfThe34 := 0

Loop, Parse, AHKcode
{
theIdNumOfThe34theVar%A_Index% := Chr(34)
}

Loop, Parse, AHKcode
{
if (A_LoopField = Chr(34))
{
areWEinSome34sNum++
}


if (areWEinSome34sNum = 1)
{



if (A_LoopField != Chr(34))
{
if (A_LoopField = Chr(96))
{
theIdNumOfThe34theVar%theIdNumOfThe34% .= Chr(92)
}
else
{
theIdNumOfThe34theVar%theIdNumOfThe34% .= A_LoopField
}
}
else
{
theIdNumOfThe34++
AHKcodeOUT754754 .= "ihuiuuhuuhtheidFor--asas-theuhturtyphoutr-" . Chr(65) . Chr(65) . str(theIdNumOfThe34) . Chr(65) . Chr(65)
}

}


if (areWEinSome34sNum = 2) or (areWEinSome34sNum = 0)
{
if (A_LoopField != Chr(34))
{
AHKcodeOUT754754 .= A_LoopField
}

areWEinSome34sNum := 0
}



}
AHKcode := AHKcodeOUT754754

Loop, % theIdNumOfThe34
{
theIdNumOfThe34theVar%A_Index% .= Chr(34)
}

sstr23IfFuncInNAMEnum := 0


CheckIFandElsesss1 := "if ("
CheckIFandElsesss2 := "if("
CheckIFandElsesss3 := "if !("
CheckIFandElsesss4 := "if!("
CheckIFandElsesss5 := "else if ("
CheckIFandElsesss6 := "else if("
CheckIFandElsesss7 := "else if !("
CheckIFandElsesss8 := "else if!("
CheckIFandElsesssNum := 0
onceImportTime := 0
weUseRandomAtLeastOnce := 0

base64ImageNum := 0
NumOfEdits := 0
NumOfButtons := 0
NumOfPictures := 0
onceGuiAdd := 0
NumOfTexts := 0
GuiNumber := ""
haveWeEverUsedAloop := 0
usedLib := ""
putEndPointFlask1Up := ""
putEndPointFlask2Down := ""
AindexcharLength := 1
jsCodeAcurlyBraceAddSomeVrasFixNL := 0
jsCodeAcurlyBraceAddSomeVrasFixLP := 0
AHKcodeLoopfixa := ""
base64soundNum := 0
out := ""
fontName := ""
skipLeftCuleyForFuncPLS := 0
eavbnsalvbaslv := 0
theMainFuncDec := 0
upCode := ""
varOutJsCanvasFixTranspernat := ""



functionNames := "eval|str|showCustomMessageBox|BuildInVars|MakeHotKey|Abs|ACos|ASin|ATan|Ceil|Cos|Exp|Floor|Ln|Log|Round|Sin|Sqrt|Tan|Chr|sleep|InStr|RegExMatch|StrLen|getRandomNumber|SubStr|Trim|ParseInt|StrReplace|Mod|Asc|StringTrimLeft|StringTrimRight|isMobileDevice|SetTimer|GuiControl|getDataFromEndpoint|FileAppend|isConnectedToBackend|MouseGetPos|SoundPlay|StoreLocally|createToggleSwitch|getUrlParams|reloadWithParams|PlayVideoFromBase64|PlayVideoFromUrl|PlayYoutubeVid|changeFavicon|OnKeyPress|GetKeyState|createCustomDropdown|StrLower|getDataFromAPI|getDataFromJSON|createCheckbox|createCustomIframe|StrSplit|RegExReplace|AddIDE|runPyCode|SortLikeAHK"



awesdrtf := "|A" . Chr(95) . "LoopField|A" . Chr(95) . "Index"

willNextLineBeCurlyBracee := 0
theFuncWeFound := ""
theFuncWeFoundAllNames := ""
haveWeEverUsedAloop := 0

Loop, Parse, AHKcode, `n, `r
{

if (willNextLineBeCurlyBracee = 1)
{
; 123 is {
if (A_LoopField = Chr(123))
{
willNextLineBeCurlyBracee := 0

functionNames .= "|" . lastFuncName
;lastFuncFullName
theFuncWeFound .= lastFuncFullName . "`n"
theFuncWeFoundAllNames .= lastFuncName . Chr(40) . "`n"
}
}



if (SubStr(StrLower(A_LoopField), 1, 4) = CheckIFandElsesss1) or (SubStr(StrLower(A_LoopField), 1, 3) = CheckIFandElsesss2) or (SubStr(StrLower(A_LoopField), 1, 5) = CheckIFandElsesss3) or (SubStr(StrLower(A_LoopField), 1, 4) = CheckIFandElsesss4) or (SubStr(StrLower(A_LoopField), 1, 9) = CheckIFandElsesss5) or (SubStr(StrLower(A_LoopField), 1, 8) = CheckIFandElsesss6) or (SubStr(StrLower(A_LoopField), 1, 10) = CheckIFandElsesss7) or (SubStr(StrLower(A_LoopField), 1, 9) = CheckIFandElsesss8) or (SubStr(StrLower(A_LoopField), 1, 5) = "loop,")
{
; not a func
willNextLineBeCurlyBracee := 0
;OutputDebug, %A_LoopField%
}
else
{
;OutputDebug, ||%A_LoopField%||
sstrForCheckIfFunc := StrSplit(A_LoopField, Chr(40), 1)
;OutputDebug, |%sstrForCheckIfFunc%|
if (funcToChecIfVaidNameForFunc(Trim(sstrForCheckIfFunc))) && (sstrForCheckIfFunc != "") && (InStr(A_LoopField, Chr(40)))
{
willNextLineBeCurlyBracee := 1
lastFuncName := sstrForCheckIfFunc
lastFuncFullName := A_LoopField
;OutputDebug, %lastFuncFullName%
}
else
{
willNextLineBeCurlyBracee := 0

}

}


}


StringTrimRight, theFuncWeFound, theFuncWeFound, 1
StringTrimRight, theFuncWeFoundAllNames, theFuncWeFoundAllNames, 1
;OutputDebug, %theFuncWeFound%
;OutputDebug, %functionNames%
;OutputDebug, %theFuncWeFoundAllNames%


AindexcharLength := 1
jsCodeAcurlyBraceAddSomeVrasFixNL := 0
jsCodeAcurlyBraceAddSomeVrasFixLP := 0
jsCodeLoopfixa := ""

numAIndexfixFuncSyntaxBugFixNum := 0
Loop, Parse, AHKcode, `n, `r
{
fixFuncSyntaxBugFixNum%A_Index% := A_LoopField
numAIndexfixFuncSyntaxBugFixNum := A_Index
}
numAIndexfixFuncSyntaxBugFixNum++
fixFuncSyntaxBugFixNum%numAIndexfixFuncSyntaxBugFixNum% := ""

if (InStr(AHKcode, "OnMouseClick:"))
{
AHKcodeOnMouseClickAdd := "`nAttw456543w45eqsubeotibebrawaaachingeventlistenertodocumentaddEventListeneThisfunnctionaftertouchends768ds798y9z7s7xcfy8s7d9fcx`n"
AHKcode := AHKcodeOnMouseClickAdd . "`n" . AHKcode . "`n"
}

Loop, Parse, AHKcode, `n, `r
{

out := A_LoopField

if (SubStr(StrLower(out), 1, 19) = StrLower("Gui, Add, Rectangle")) or (SubStr(StrLower(out), 1, 16) = StrLower("Gui, Add, Circle"))
{
weUseCnanvasAtALL := 1
}

}

Loop, Parse, AHKcode, `n, `r
{
lineDone := 0
if (SubStr(Trim(StrLower(A_LoopField)), 1, 15) = StrLower("OutputDebug, % "))
{
StringTrimLeft, var1, A_LoopField, 14


var2 := Trim(transpileVariables(var1, functionNames))



out := "console.log(" . var2 . ")"


lineDone := 1
jsCode .= out . "`n"
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 13) = StrLower("OutputDebug, ")) && (SubStr(Trim(StrLower(A_LoopField)), 1, 15) != StrLower("OutputDebug, % "))
{
StringTrimLeft, var1, A_LoopField, 12

OUTvarMsgLow := transpileLowVariables(var1)

out := "console.log(" . OUTvarMsgLow . ")"


lineDone := 1
jsCode .= out . "`n"
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 6) = "sort, ")
{
StringTrimLeft, str1, A_LoopField, 6

str1 := Trim(str1)
weHaveAcommaFixSortCommand := 0
if (SubStr(str1, 0) = Chr(44))
{
;MsgBox, comma YES
StringTrimRight, str1, str1, 1
weHaveAcommaFixSortCommand := 1
}
else
{
;MsgBox, comma NO
gg := 0
}

s := StrSplit(str1, ",", 1)
out1 := Trim(s)

s := StrSplit(str1, ",", 2)
out2 := Trim(s)

if (weHaveAcommaFixSortCommand = 1)
{
out2 := out2 . Chr(44)
}


var1 := "variables." . out1 . " = SortLikeAHK(variables." . out1 . ", " . Chr(34) . out2 . Chr(34) . ")"
lineDone := 1
jsCode .= var1 . "`n"


}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 5) = StrLower("Gui, ")) or (SubStr(Trim(StrLower(A_LoopField)), 1, 4) = StrLower("Gui "))
{


isFullScren := 0
str1 := A_LoopField
StringTrimLeft, gradient, str1, 15
str1 := StrReplace(str1, ": ", ", ")

s := StrSplit(str1, ",", 1)
out1 := Trim(s)
;MsgBox, % out1

GuiNumberOld := GuiNumber
GuiNumber := str(RegExReplace(out1, "\\D", ""))


if (GuiNumber = "")
{
GuiNumber := "1"

}


if (GuiNumberOld != GuiNumber)
{
onceGuiAdd := 1
}


if (ParseInt(GuiNumber) >= 2)
{
weUseCnanvasAtALLEver := 0
weUseCnanvasAtALL := 0
moreThen1GuiMode := 1
}
else
{
moreThen1GuiMode := 0
}

s := StrSplit(str1, ", ", 2)
out2 := StrLower(Trim(s))

s := StrSplit(str1, ", ", 3)
s := Trim(s)
if (out2 != "show")
{
out3 := StrLower(Trim(s))
out3Good := (Trim(s))
}
else
{
out3 := Trim(s)
}

s := StrSplit(str1, ", ", 4)
out4 := Trim(s)

s := StrSplit(str1, ", ", 5)
out5 := Trim(s)


if (onceGuiAdd = 1)
{
jsCodeGui .= "`nvar Gui" . GuiNumber . " = {}`nGui" . GuiNumber . " = document.createElement(" . Chr(34) . "div" . Chr(34) . ")`n" . "Gui" . GuiNumber . ".id = " . Chr(34) . "Gui" . GuiNumber . Chr(34) . "`n"
NumOfButtons := 0
}
onceGuiAdd++


;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;



if (out2 = "color")
{


guiColorShow := "linear-gradient(90deg, " . Chr(34) . " + " . Chr(34) . "#121212" . Chr(34) . " + " . Chr(34) . " 0" . Chr(37) . ", " . Chr(34) . " + " . Chr(34) . "#121212" . Chr(34) . " + " . Chr(34) . " 100" . Chr(37) . ")"


Loop, Parse, out3Good, " "
{
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("c"))
{
guiColorShow := Trim(A_LoopField)
StringTrimLeft, guiColorShow, guiColorShow, 1

var1 := "" . Chr(34) . " + " . Chr(34) . "#" . guiColorShow . "" . Chr(34) . " + " . Chr(34) . ""
guiColorShow := var1
if (InStr(guiColorShow, "%")) && !((InStr(guiColorShow, "%,")) or (InStr(guiColorShow, "%)")))
{
str1 := guiColorShow
s := StrSplit(str1, "%", 2)
out2 := s
;MsgBox, % out2
var1 := "linear-gradient(90deg, " . Chr(34) . " + " . Chr(34) . "#" . Chr(34) . " + variables." . out2 . " + " . Chr(34) . "" . Chr(34) . " + " . Chr(34) . " 0" . Chr(37) . ", " . Chr(34) . " + " . Chr(34) . "#" . Chr(34) . " + variables." . out2 . " + " . Chr(34) . "" . Chr(34) . " + " . Chr(34) . " 100" . Chr(37) . ")"
guiColorShow := var1
}
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 3) = StrLower("gr-"))
{
guiColorShow := gradient
;MsgBox, % linearGradient
if (InStr(guiColorShow, "thisissemicolonattheendplaceokmansurebruh49475472472"))
{
StringTrimRight, guiColorShow, guiColorShow, 54
}

if (InStr(guiColorShow, "%")) && !((InStr(guiColorShow, "%,")) or (InStr(guiColorShow, "%)")))
{


str1 := guiColorShow

s := StrSplit(str1, "%", 2)
out2 := s



var1 := "" . Chr(34) . " + variables." . out2 . " + " . Chr(34) . ""
guiColorShow := var1
}



}
}






;MsgBox, % guiColorShow
}



if (out2 = "font")
{


Loop, Parse, out3Good, " "
{
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("s"))
{
guiFontShow := Trim(A_LoopField)
StringTrimLeft, guiFontShow, guiFontShow, 1
if (InStr(guiFontShow, "%"))
{
str1 := guiFontShow
s := StrSplit(str1, "%", 2)
out2 := s

var1 := "" . Chr(34) . " + variables." . out2 . " + " . Chr(34) . ""
guiFontShow := var1
}
}

if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("f"))
{
fontName := Trim(A_LoopField)
StringTrimLeft, fontName, fontName, 1
if (InStr(fontName, "%"))
{
str1 := fontName
s := StrSplit(str1, "%", 2)
out2 := s
var1 := "" . Chr(34) . " + variables." . out2 . " + " . Chr(34) . ""
fontName := str(var1)
}
}


}

}




if (out2 = "add")
{

if (out3 = "text")
{
guiOutOfTextNum := 0
guiOutOfTextC := 0
guiOutOfTextX := 0
guiOutOfTextY := 0
guiOutOfTextW := 0
guiOutOfTextH := 0
guiOutOfTextV := 0
guiOutOfTextG := 0
Loop, 6
{
guiOutOfText%A_Index% := ""
}
guiOutOfText0 := "black"
dynamicGuiSet := 0
Loop, Parse, out4, " "
{
;MsgBox, |%A_LoopField%|

guiOutOfTextNum++
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("c"))
{
guiOutOfTextC := 1
guiOutOfText0 := StrLower(A_LoopField)
if (InStr(guiOutOfText0, "%"))
{
str1 := guiOutOfText0
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfText0 := " " . Chr(34) . "" . Chr(34) . " + variables." . var1 . " + " . Chr(34) . ""
}
StringTrimLeft, guiOutOfText0, guiOutOfText0, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("x"))
{
guiOutOfTextX := 1
guiOutOfText1 := A_LoopField
if (InStr(guiOutOfText1, "%"))
{
str1 := guiOutOfText1
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfText1 := " " . Chr(34) . "" . Chr(34) . " + variables." . var1 . " + " . Chr(34) . ""
}
StringTrimLeft, guiOutOfText1, guiOutOfText1, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("y"))
{
guiOutOfTextY := 1
guiOutOfText2 := A_LoopField
if (InStr(guiOutOfText2, "%"))
{
str1 := guiOutOfText2
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfText2 := " " . Chr(34) . "" . Chr(34) . " + variables." . var1 . " + " . Chr(34) . ""
}
StringTrimLeft, guiOutOfText2, guiOutOfText2, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("w"))
{
guiOutOfTextW := 1
guiOutOfText3 := A_LoopField
if (InStr(guiOutOfText3, "%"))
{
str1 := guiOutOfText3
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfText3 := " " . Chr(34) . "" . Chr(34) . " + variables." . var1 . " + " . Chr(34) . ""
}
StringTrimLeft, guiOutOfText3, guiOutOfText3, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("h"))
{
guiOutOfTextH := 1
guiOutOfText4 := A_LoopField
if (InStr(guiOutOfText4, "%"))
{
str1 := guiOutOfText4
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfText4 := " " . Chr(34) . "" . Chr(34) . " + variables." . var1 . " + " . Chr(34) . ""
}
StringTrimLeft, guiOutOfText4, guiOutOfText4, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("v"))
{
guiOutOfTextV := 1
guiOutOfText5 := A_LoopField
guiOutOfText52 := A_LoopField
dynamicGuiSet := 1
if (InStr(guiOutOfText5, "%"))
{
str1 := guiOutOfText5
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfText5 := " [variables." . var1 . "]"
guiOutOfText52 := " " . Chr(34) . " + [variables." . var1 . "]" . " + " . "" . Chr(34) . ""
}
StringTrimLeft, guiOutOfText5, guiOutOfText5, 1
StringTrimLeft, guiOutOfText52, guiOutOfText52, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("g"))
{
guiOutOfTextG := 1
guiOutOfText6 := A_LoopField
StringTrimLeft, guiOutOfText6, guiOutOfText6, 1
}
}

NumOfTexts++


if (InStr(out5, "%"))
{
str1 := out5
s := StrSplit(str1, "%", 2)
var1 := s

out5 := "" . Chr(34) . "" . Chr(34) . " + variables." . var1 . " + " . Chr(34) . "" . Chr(34) . ""


}

if (dynamicGuiSet = 0)
{

if (guiOutOfTextV = 1)
{
if (guiOutOfTextG = 1)
{
jsCode0 := "`nGui" . GuiNumber . "" . guiOutOfText5 . " = document.createElement(" . Chr(34) . "div" . Chr(34) . ");`nGui" . GuiNumber . "" . guiOutOfText5 . ".id = " . Chr(34) . "Gui" . GuiNumber . "" . Chr(34) . " + " . Chr(34) . "" . guiOutOfText52 . "" . Chr(34) . "; // Set ID for referencing`nGui" . GuiNumber . "" . guiOutOfText5 . ".textContent = " . Chr(34) . "" . out5 . "" . Chr(34) . ";`nGui" . GuiNumber . "" . guiOutOfText5 . ".style.color = " . Chr(34) . "#" . guiOutOfText0 . "" . Chr(34) . "`nGui" . GuiNumber . "" . guiOutOfText5 . ".style.fontSize = " . Chr(34) . "" . guiFontShow . "px" . Chr(34) . "; // Set font size`nGui" . GuiNumber . "" . guiOutOfText5 . ".style.position = " . Chr(34) . "absolute" . Chr(34) . "; // Set position to absolute`nGui" . GuiNumber . "" . guiOutOfText5 . ".style.left = " . Chr(34) . "" . guiOutOfText1 . "px" . Chr(34) . "; // Set initial x position`nGui" . GuiNumber . "" . guiOutOfText5 . ".style.top = " . Chr(34) . "" . guiOutOfText2 . "px" . Chr(34) . "; // Set initial y position`nGui" . GuiNumber . "" . guiOutOfText5 . ".style.width = " . Chr(34) . "" . guiOutOfText3 . "px" . Chr(34) . "; // Set width`nGui" . GuiNumber . "" . guiOutOfText5 . ".style.height = " . Chr(34) . "" . guiOutOfText4 . "px" . Chr(34) . "; // Set height`nGui" . GuiNumber . "" . guiOutOfText5 . ".onclick = function (event) {`nvariables.A_GuiControl = event.target.id.replace(/^Gui" . Chr(92) . "d*/, " . Chr(34) . "" . Chr(34) . ");`n  " . guiOutOfText6 . "(variables.A_GuiControl);`n};`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "" . guiOutOfText5 . ");`n"

jsCode .= "`n" . jsCode0 . "`n"

}
else
{
jsCode0 := "`nGui" . GuiNumber . "" . guiOutOfText5 . " = document.createElement(" . Chr(34) . "div" . Chr(34) . ");`nGui" . GuiNumber . "" . guiOutOfText5 . ".id = " . Chr(34) . "Gui" . GuiNumber . "" . Chr(34) . " + " . Chr(34) . "" . guiOutOfText52 . "" . Chr(34) . "; // Set ID for referencing`nGui" . GuiNumber . "" . guiOutOfText5 . ".textContent = " . Chr(34) . "" . out5 . "" . Chr(34) . ";`nGui" . GuiNumber . "" . guiOutOfText5 . ".style.color = " . Chr(34) . "#" . guiOutOfText0 . "" . Chr(34) . "`nGui" . GuiNumber . "" . guiOutOfText5 . ".style.fontSize = " . Chr(34) . "" . guiFontShow . "px" . Chr(34) . "; // Set font size`nGui" . GuiNumber . "" . guiOutOfText5 . ".style.position = " . Chr(34) . "absolute" . Chr(34) . "; // Set position to absolute`nGui" . GuiNumber . "" . guiOutOfText5 . ".style.left = " . Chr(34) . "" . guiOutOfText1 . "px" . Chr(34) . "; // Set initial x position`nGui" . GuiNumber . "" . guiOutOfText5 . ".style.top = " . Chr(34) . "" . guiOutOfText2 . "px" . Chr(34) . "; // Set initial y position`nGui" . GuiNumber . "" . guiOutOfText5 . ".style.width = " . Chr(34) . "" . guiOutOfText3 . "px" . Chr(34) . "; // Set width`nGui" . GuiNumber . "" . guiOutOfText5 . ".style.height = " . Chr(34) . "" . guiOutOfText4 . "px" . Chr(34) . "; // Set height`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "" . guiOutOfText5 . ");`n"

jsCode .= "`n" . jsCode0 . "`n"

}
}
else
{
if (guiOutOfTextG = 1)
{
jsCode0 := "`nGui" . GuiNumber . "Static" . str(NumOfTexts) . " = document.createElement(" . Chr(34) . "div" . Chr(34) . ");`nGui" . GuiNumber . "Static" . str(NumOfTexts) . ".id = " . Chr(34) . "Gui" . GuiNumber . "" . Chr(34) . " + " . Chr(34) . "Static" . Chr(34) . " + " . Chr(34) . "" . str(NumOfTexts) . "" . Chr(34) . "; // Set ID for referencing`nGui" . GuiNumber . "Static" . str(NumOfTexts) . ".textContent = " . Chr(34) . "" . out5 . "" . Chr(34) . ";`nGui" . GuiNumber . "Static" . str(NumOfTexts) . ".style.color = " . Chr(34) . "#" . guiOutOfText0 . "" . Chr(34) . "`nGui" . GuiNumber . "Static" . str(NumOfTexts) . ".style.fontSize = " . Chr(34) . "" . guiFontShow . "px" . Chr(34) . "; // Set font size`nGui" . GuiNumber . "Static" . str(NumOfTexts) . ".style.position = " . Chr(34) . "absolute" . Chr(34) . "; // Set position to absolute`nGui" . GuiNumber . "Static" . str(NumOfTexts) . ".style.left = " . Chr(34) . "" . guiOutOfText1 . "px" . Chr(34) . "; // Set initial x position`nGui" . GuiNumber . "Static" . str(NumOfTexts) . ".style.top = " . Chr(34) . "" . guiOutOfText2 . "px" . Chr(34) . "; // Set initial y position`nGui" . GuiNumber . "Static" . str(NumOfTexts) . ".style.width = " . Chr(34) . "" . guiOutOfText3 . "px" . Chr(34) . "; // Set width`nGui" . GuiNumber . "Static" . str(NumOfTexts) . ".style.height = " . Chr(34) . "" . guiOutOfText4 . "px" . Chr(34) . "; // Set height`nGui" . GuiNumber . "Static" . str(NumOfTexts) . ".onclick = function (event) {`nvariables.A_GuiControl = event.target.textContent`n  " . guiOutOfText6 . "(variables.A_GuiControl);`n};`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "Static" . str(NumOfTexts) . ");`n"

jsCode .= "`n" . jsCode0 . "`n"
}
else
{
jsCode0 := "`nGui" . GuiNumber . "Static" . str(NumOfTexts) . " = document.createElement(" . Chr(34) . "div" . Chr(34) . ");`nGui" . GuiNumber . "Static" . str(NumOfTexts) . ".id = " . Chr(34) . "Gui" . GuiNumber . "" . Chr(34) . " + " . Chr(34) . "Static" . Chr(34) . " + " . Chr(34) . "" . str(NumOfTexts) . "" . Chr(34) . "; // Set ID for referencing`nGui" . GuiNumber . "Static" . str(NumOfTexts) . ".textContent = " . Chr(34) . "" . out5 . "" . Chr(34) . ";`nGui" . GuiNumber . "Static" . str(NumOfTexts) . ".style.color = " . Chr(34) . "#" . guiOutOfText0 . "" . Chr(34) . "`nGui" . GuiNumber . "Static" . str(NumOfTexts) . ".style.fontSize = " . Chr(34) . "" . guiFontShow . "px" . Chr(34) . "; // Set font size`nGui" . GuiNumber . "Static" . str(NumOfTexts) . ".style.position = " . Chr(34) . "absolute" . Chr(34) . "; // Set position to absolute`nGui" . GuiNumber . "Static" . str(NumOfTexts) . ".style.left = " . Chr(34) . "" . guiOutOfText1 . "px" . Chr(34) . "; // Set initial x position`nGui" . GuiNumber . "Static" . str(NumOfTexts) . ".style.top = " . Chr(34) . "" . guiOutOfText2 . "px" . Chr(34) . "; // Set initial y position`nGui" . GuiNumber . "Static" . str(NumOfTexts) . ".style.width = " . Chr(34) . "" . guiOutOfText3 . "px" . Chr(34) . "; // Set width`nGui" . GuiNumber . "Static" . str(NumOfTexts) . ".style.height = " . Chr(34) . "" . guiOutOfText4 . "px" . Chr(34) . "; // Set height`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "Static" . str(NumOfTexts) . ");`n"

jsCode .= "`n" . jsCode0 . "`n"
}
}

}
else
{
if (guiOutOfTextV = 1)
{
if (guiOutOfTextG = 1)
{
jsCode0 := "`n`n`nGui" . GuiNumber . "" . guiOutOfText5 . " = document.createElement(" . Chr(34) . "div" . Chr(34) . ");`nGui" . GuiNumber . "" . guiOutOfText5 . ".id = " . Chr(34) . "Gui" . GuiNumber . "" . Chr(34) . " + " . Chr(34) . "" . guiOutOfText52 . "" . Chr(34) . "; // Set ID for referencing`nGui" . GuiNumber . "" . guiOutOfText5 . ".textContent = " . Chr(34) . "" . out5 . "" . Chr(34) . ";`nGui" . GuiNumber . "" . guiOutOfText5 . ".style.color = " . Chr(34) . "#" . guiOutOfText0 . "" . Chr(34) . "`nGui" . GuiNumber . "" . guiOutOfText5 . ".style.fontSize = " . Chr(34) . "" . guiFontShow . "px" . Chr(34) . "; // Set font size`nGui" . GuiNumber . "" . guiOutOfText5 . ".style.position = " . Chr(34) . "absolute" . Chr(34) . "; // Set position to absolute`nGui" . GuiNumber . "" . guiOutOfText5 . ".style.left = " . Chr(34) . "" . guiOutOfText1 . "px" . Chr(34) . "; // Set initial x position`nGui" . GuiNumber . "" . guiOutOfText5 . ".style.top = " . Chr(34) . "" . guiOutOfText2 . "px" . Chr(34) . "; // Set initial y position`nGui" . GuiNumber . "" . guiOutOfText5 . ".style.width = " . Chr(34) . "" . guiOutOfText3 . "px" . Chr(34) . "; // Set width`nGui" . GuiNumber . "" . guiOutOfText5 . ".style.height = " . Chr(34) . "" . guiOutOfText4 . "px" . Chr(34) . "; // Set height`nGui" . GuiNumber . "" . guiOutOfText5 . ".onclick = function (event) {`nvariables.A_GuiControl = event.target.id.replace(/^Gui" . Chr(92) . "d*/, " . Chr(34) . "" . Chr(34) . ");`n  " . guiOutOfText6 . "(variables.A_GuiControl);`n};`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "" . guiOutOfText5 . ");`n"

jsCode .= "`n" . jsCode0 . "`n"

}
else
{
jsCode0 := "`nGui" . GuiNumber . "" . guiOutOfText5 . " = document.createElement(" . Chr(34) . "div" . Chr(34) . ");`nGui" . GuiNumber . "" . guiOutOfText5 . ".id = " . Chr(34) . "Gui" . GuiNumber . "" . Chr(34) . " + " . Chr(34) . "" . guiOutOfText52 . "" . Chr(34) . "; // Set ID for referencing`nGui" . GuiNumber . "" . guiOutOfText5 . ".textContent = " . Chr(34) . "" . out5 . "" . Chr(34) . ";`nGui" . GuiNumber . "" . guiOutOfText5 . ".style.color = " . Chr(34) . "#" . guiOutOfText0 . "" . Chr(34) . "`nGui" . GuiNumber . "" . guiOutOfText5 . ".style.fontSize = " . Chr(34) . "" . guiFontShow . "px" . Chr(34) . "; // Set font size`nGui" . GuiNumber . "" . guiOutOfText5 . ".style.position = " . Chr(34) . "absolute" . Chr(34) . "; // Set position to absolute`nGui" . GuiNumber . "" . guiOutOfText5 . ".style.left = " . Chr(34) . "" . guiOutOfText1 . "px" . Chr(34) . "; // Set initial x position`nGui" . GuiNumber . "" . guiOutOfText5 . ".style.top = " . Chr(34) . "" . guiOutOfText2 . "px" . Chr(34) . "; // Set initial y position`nGui" . GuiNumber . "" . guiOutOfText5 . ".style.width = " . Chr(34) . "" . guiOutOfText3 . "px" . Chr(34) . "; // Set width`nGui" . GuiNumber . "" . guiOutOfText5 . ".style.height = " . Chr(34) . "" . guiOutOfText4 . "px" . Chr(34) . "; // Set height`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "" . guiOutOfText5 . ");`n"

jsCode .= "`n" . jsCode0 . "`n"

}
}
else
{
if (guiOutOfTextG = 1)
{
jsCode0 := "`nGui" . GuiNumber . "Static" . str(NumOfTexts) . " = document.createElement(" . Chr(34) . "div" . Chr(34) . ");`nGui" . GuiNumber . "Static" . str(NumOfTexts) . ".id = " . Chr(34) . "Gui" . GuiNumber . "" . Chr(34) . " + " . Chr(34) . "Static" . Chr(34) . " + " . Chr(34) . "" . str(NumOfTexts) . "" . Chr(34) . "; // Set ID for referencing`nGui" . GuiNumber . "Static" . str(NumOfTexts) . ".textContent = " . Chr(34) . "" . out5 . "" . Chr(34) . ";`nGui" . GuiNumber . "Static" . str(NumOfTexts) . ".style.color = " . Chr(34) . "#" . guiOutOfText0 . "" . Chr(34) . "`nGui" . GuiNumber . "Static" . str(NumOfTexts) . ".style.fontSize = " . Chr(34) . "" . guiFontShow . "px" . Chr(34) . "; // Set font size`nGui" . GuiNumber . "Static" . str(NumOfTexts) . ".style.position = " . Chr(34) . "absolute" . Chr(34) . "; // Set position to absolute`nGui" . GuiNumber . "Static" . str(NumOfTexts) . ".style.left = " . Chr(34) . "" . guiOutOfText1 . "px" . Chr(34) . "; // Set initial x position`nGui" . GuiNumber . "Static" . str(NumOfTexts) . ".style.top = " . Chr(34) . "" . guiOutOfText2 . "px" . Chr(34) . "; // Set initial y position`nGui" . GuiNumber . "Static" . str(NumOfTexts) . ".style.width = " . Chr(34) . "" . guiOutOfText3 . "px" . Chr(34) . "; // Set width`nGui" . GuiNumber . "Static" . str(NumOfTexts) . ".style.height = " . Chr(34) . "" . guiOutOfText4 . "px" . Chr(34) . "; // Set height`nGui" . GuiNumber . "Static" . str(NumOfTexts) . ".onclick = function (event) {`nvariables.A_GuiControl = event.target.textContent`n  " . guiOutOfText6 . "(variables.A_GuiControl);`n};`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "Static" . str(NumOfTexts) . ");`n`n"

jsCode .= "`n" . jsCode0 . "`n"
}
else
{
jsCode0 := "`nGui" . GuiNumber . "Static" . str(NumOfTexts) . " = document.createElement(" . Chr(34) . "div" . Chr(34) . ");`nGui" . GuiNumber . "Static" . str(NumOfTexts) . ".id = " . Chr(34) . "Gui" . GuiNumber . "" . Chr(34) . " + " . Chr(34) . "Static" . Chr(34) . " + " . Chr(34) . "" . str(NumOfTexts) . "" . Chr(34) . "; // Set ID for referencing`nGui" . GuiNumber . "Static" . str(NumOfTexts) . ".textContent = " . Chr(34) . "" . out5 . "" . Chr(34) . ";`nGui" . GuiNumber . "Static" . str(NumOfTexts) . ".style.color = " . Chr(34) . "#" . guiOutOfText0 . "" . Chr(34) . "`nGui" . GuiNumber . "Static" . str(NumOfTexts) . ".style.fontSize = " . Chr(34) . "" . guiFontShow . "px" . Chr(34) . "; // Set font size`nGui" . GuiNumber . "Static" . str(NumOfTexts) . ".style.position = " . Chr(34) . "absolute" . Chr(34) . "; // Set position to absolute`nGui" . GuiNumber . "Static" . str(NumOfTexts) . ".style.left = " . Chr(34) . "" . guiOutOfText1 . "px" . Chr(34) . "; // Set initial x position`nGui" . GuiNumber . "Static" . str(NumOfTexts) . ".style.top = " . Chr(34) . "" . guiOutOfText2 . "px" . Chr(34) . "; // Set initial y position`nGui" . GuiNumber . "Static" . str(NumOfTexts) . ".style.width = " . Chr(34) . "" . guiOutOfText3 . "px" . Chr(34) . "; // Set width`nGui" . GuiNumber . "Static" . str(NumOfTexts) . ".style.height = " . Chr(34) . "" . guiOutOfText4 . "px" . Chr(34) . "; // Set height`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "Static" . str(NumOfTexts) . ");`n"

jsCode .= "`n" . jsCode0 . "`n"
}
}
}



}



if (out3 = "button")
{

guiOutOfButtonNum := 0
guiOutOfButtonX := 0
guiOutOfButtonY := 0
guiOutOfButtonW := 0
guiOutOfButtonH := 0
guiOutOfButtonV := 0
guiOutOfButtonG := 0
guiOutOfButtonC := 0
Loop, 12
{
guiOutOfButton%A_Index% := ""
}
dynamicGuiSet := 0
Loop, Parse, out4, " "
{
;MsgBox, |%A_LoopField%|

guiOutOfButtonNum++



if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("c"))
{

guiOutOfButton7 := A_LoopField
StringTrimLeft, guiOutOfButton7, guiOutOfButton7, 1


if (InStr(guiOutOfButton7, "%"))
{
str1 := guiOutOfButton7
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfButton7 := "#" . Chr(34) . " + variables." . var1 . "//"

}
else
{
 guiOutOfButton7 := "#" . guiOutOfButton7
}

}

if (SubStr(Trim(StrLower(A_LoopField)), 1, 3) = StrLower("gr-"))
{

guiOutOfButton11 := A_LoopField
StringTrimLeft, guiOutOfButton11, guiOutOfButton11, 3


if (InStr(guiOutOfButton11, "%"))
{
str1 := guiOutOfButton11
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfButton11 := "" . Chr(34) . " + variables." . var1 . "//"
}


}


if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("f"))
{
guiOutOfButton12 := Trim(A_LoopField)
StringTrimLeft, guiOutOfButton12, guiOutOfButton12, 1
if (InStr(guiOutOfButton12, "%"))
{
str1 := guiOutOfButton12
s := StrSplit(str1, "%", 2)
out2 := s
var1 := "" . Chr(34) . " + variables." . out2 . " + " . Chr(34) . ""
guiOutOfButton12 := var1
}
}

if (SubStr(Trim(StrLower(A_LoopField)), 1, 2) = StrLower("bg"))
{

guiOutOfButton8 := A_LoopField
StringTrimLeft, guiOutOfButton8, guiOutOfButton8, 2


if (InStr(guiOutOfButton8, "%"))
{
str1 := guiOutOfButton8
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfButton8 := "#" . Chr(34) . " + variables." . var1 . "//"

}
else
{
guiOutOfButton8 := "#" . guiOutOfButton8
}

}


if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("r"))
{

guiOutOfButton9 := A_LoopField
StringTrimLeft, guiOutOfButton9, guiOutOfButton9, 1


if (InStr(guiOutOfButton9, "%"))
{
str1 := guiOutOfButton9
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfButton9 := "" . Chr(34) . " + variables." . var1 . " + " . Chr(34) . "px"

}
else
{
guiOutOfButton9 := guiOutOfButton9 . "px"
}

}


if (SubStr(Trim(StrLower(A_LoopField)), 1, 7) = StrLower("-border"))
{

guiOutOfButton10 := A_LoopField
StringTrimLeft, guiOutOfButton10, guiOutOfButton10, 7
guiOutOfButton10 := "none"

if (InStr(guiOutOfButton10, "%"))
{
str1 := guiOutOfButton10
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfButton10 := "" . Chr(34) . " + variables." . var1 . " + " . Chr(34) . ""

}


}




if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("x"))
{
guiOutOfButtonX := 1
guiOutOfButton1 := A_LoopField
if (InStr(guiOutOfButton1, "%"))
{
str1 := guiOutOfButton1
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfButton1 := " " . Chr(34) . "" . Chr(34) . " + variables." . var1 . " + " . Chr(34) . ""
}
StringTrimLeft, guiOutOfButton1, guiOutOfButton1, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("y"))
{
guiOutOfButtonY := 1
guiOutOfButton2 := A_LoopField
if (InStr(guiOutOfButton2, "%"))
{
str1 := guiOutOfButton2
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfButton2 := " " . Chr(34) . "" . Chr(34) . " + variables." . var1 . " + " . Chr(34) . ""
}
StringTrimLeft, guiOutOfButton2, guiOutOfButton2, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("w"))
{
guiOutOfButtonW := 1
guiOutOfButton3 := A_LoopField
if (InStr(guiOutOfButton3, "%"))
{
str1 := guiOutOfButton3
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfButton3 := " " . Chr(34) . "" . Chr(34) . " + variables." . var1 . " + " . Chr(34) . ""
}
StringTrimLeft, guiOutOfButton3, guiOutOfButton3, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("h"))
{
guiOutOfButtonH := 1
guiOutOfButton4 := A_LoopField
if (InStr(guiOutOfButton4, "%"))
{
str1 := guiOutOfButton4
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfButton4 := " " . Chr(34) . "" . Chr(34) . " + variables." . var1 . " + " . Chr(34) . ""
}
StringTrimLeft, guiOutOfButton4, guiOutOfButton4, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("v"))
{
guiOutOfButtonV := 1
guiOutOfButton5 := A_LoopField
guiOutOfButton52 := A_LoopField
dynamicGuiSet := 1
if (InStr(guiOutOfButton5, "%"))
{
str1 := guiOutOfButton5
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfButton5 := " [variables." . var1 . "]"
guiOutOfButton52 := " " . Chr(34) . " + [variables." . var1 . "]" . " + " . "" . Chr(34) . ""
}
StringTrimLeft, guiOutOfButton5, guiOutOfButton5, 1
StringTrimLeft, guiOutOfButton52, guiOutOfButton52, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("g")) && !((SubStr(Trim(StrLower(A_LoopField)), 1, 3) = StrLower("gr-")))
{
guiOutOfButtonG := 1
guiOutOfButton6 := A_LoopField
StringTrimLeft, guiOutOfButton6, guiOutOfButton6, 1
}
}

NumOfButtons++


if (InStr(out5, "%"))
{
str1 := out5
s := StrSplit(str1, "%", 2)
var1 := s

out5 := "" . Chr(34) . "" . Chr(34) . " + variables." . var1 . " + " . Chr(34) . "" . Chr(34) . ""


}

if (dynamicGuiSet = 0)
{

if (guiOutOfButtonV = 1)
{
if (guiOutOfButtonG = 1)
{
jsCode0 := "`nGui" . GuiNumber . "" . guiOutOfButton5 . " = document.createElement(" . Chr(34) . "button" . Chr(34) . ");`nGui" . GuiNumber . "" . guiOutOfButton5 . ".id = " . Chr(34) . "Gui" . GuiNumber . "" . Chr(34) . " + " . Chr(34) . "" . guiOutOfButton52 . "" . Chr(34) . "; // Set ID for referencing`nGui" . GuiNumber . "" . guiOutOfButton5 . ".textContent = " . Chr(34) . "" . out5 . "" . Chr(34) . ";`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.fontSize = " . Chr(34) . "" . guiFontShow . "px" . Chr(34) . "; // Set font size`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.position = " . Chr(34) . "absolute" . Chr(34) . "; // Set position to absolute`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.left = " . Chr(34) . "" . guiOutOfButton1 . "px" . Chr(34) . "; // Set initial x position`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.top = " . Chr(34) . "" . guiOutOfButton2 . "px" . Chr(34) . "; // Set initial y position`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.width = " . Chr(34) . "" . guiOutOfButton3 . "px" . Chr(34) . "; // Set width`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.height = " . Chr(34) . "" . guiOutOfButton4 . "px" . Chr(34) . "; // Set height`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.cursor = " . Chr(34) . "pointer" . Chr(34) . "; // Change cursor on hover`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.border = " . Chr(34) . "" . guiOutOfButton10 . "" . Chr(34) . ";`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.background = " . Chr(34) . "" . guiOutOfButton11 . "" . Chr(34) . ";`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.backgroundColor = " . Chr(34) . "" . guiOutOfButton8 . "" . Chr(34) . ";`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.borderRadius = " . Chr(34) . "" . guiOutOfButton9 . "" . Chr(34) . ";`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.color = " . Chr(34) . "" . guiOutOfButton7 . "" . Chr(34) . ";`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.fontFamily = " . Chr(34) . "" . guiOutOfButton12 . ", sans-serif" . Chr(34) . "; // Specify your desired font here`nGui" . GuiNumber . "" . guiOutOfButton5 . ".onclick = function (event) {`nvariables.A_GuiControl = event.target.id.replace(/^Gui" . Chr(92) . "d*/, " . Chr(34) . "" . Chr(34) . ");`n  " . guiOutOfButton6 . "(variables.A_GuiControl);`n};`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "" . guiOutOfButton5 . ");`n"

jsCode .= "`n" . jsCode0 . "`n"


}
else
{
jsCode0 := "`nGui" . GuiNumber . "" . guiOutOfButton5 . " = document.createElement(" . Chr(34) . "button" . Chr(34) . ");`nGui" . GuiNumber . "" . guiOutOfButton5 . ".id = " . Chr(34) . "Gui" . GuiNumber . "" . Chr(34) . " + " . Chr(34) . "" . guiOutOfButton52 . "" . Chr(34) . "; // Set ID for referencing`nGui" . GuiNumber . "" . guiOutOfButton5 . ".textContent = " . Chr(34) . "" . out5 . "" . Chr(34) . ";`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.fontSize = " . Chr(34) . "" . guiFontShow . "px" . Chr(34) . "; // Set font size`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.position = " . Chr(34) . "absolute" . Chr(34) . "; // Set position to absolute`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.left = " . Chr(34) . "" . guiOutOfButton1 . "px" . Chr(34) . "; // Set initial x position`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.top = " . Chr(34) . "" . guiOutOfButton2 . "px" . Chr(34) . "; // Set initial y position`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.width = " . Chr(34) . "" . guiOutOfButton3 . "px" . Chr(34) . "; // Set width`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.height = " . Chr(34) . "" . guiOutOfButton4 . "px" . Chr(34) . "; // Set height`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.cursor = " . Chr(34) . "pointer" . Chr(34) . "; // Change cursor on hover`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.border = " . Chr(34) . "" . guiOutOfButton10 . "" . Chr(34) . ";`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.background = " . Chr(34) . "" . guiOutOfButton11 . "" . Chr(34) . ";`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.backgroundColor = " . Chr(34) . "" . guiOutOfButton8 . "" . Chr(34) . ";`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.borderRadius = " . Chr(34) . "" . guiOutOfButton9 . "" . Chr(34) . ";`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.fontFamily = " . Chr(34) . "" . guiOutOfButton12 . ", sans-serif" . Chr(34) . "; // Specify your desired font here`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.color = " . Chr(34) . "" . guiOutOfButton7 . "" . Chr(34) . ";`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "" . guiOutOfButton5 . ");`n"

jsCode .= "`n" . jsCode0 . "`n"

}
}
else
{
if (guiOutOfButtonG = 1)
{
jsCode0 := "`nGui" . GuiNumber . "Button" . str(NumOfButtons) . " = document.createElement(" . Chr(34) . "button" . Chr(34) . ");`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".id = " . Chr(34) . "Gui" . GuiNumber . "" . Chr(34) . " + " . Chr(34) . "Button" . Chr(34) . " + " . Chr(34) . "" . str(NumOfButtons) . "" . Chr(34) . "; // Set ID for referencing`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".textContent = " . Chr(34) . "" . out5 . "" . Chr(34) . ";`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.fontSize = " . Chr(34) . "" . guiFontShow . "px" . Chr(34) . "; // Set font size`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.position = " . Chr(34) . "absolute" . Chr(34) . "; // Set position to absolute`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.left = " . Chr(34) . "" . guiOutOfButton1 . "px" . Chr(34) . "; // Set initial x position`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.top = " . Chr(34) . "" . guiOutOfButton2 . "px" . Chr(34) . "; // Set initial y position`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.width = " . Chr(34) . "" . guiOutOfButton3 . "px" . Chr(34) . "; // Set width`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.height = " . Chr(34) . "" . guiOutOfButton4 . "px" . Chr(34) . "; // Set height`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.cursor = " . Chr(34) . "pointer" . Chr(34) . "; // Change cursor on hover`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.border = " . Chr(34) . "" . guiOutOfButton10 . "" . Chr(34) . ";`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.background = " . Chr(34) . "" . guiOutOfButton11 . "" . Chr(34) . ";`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.backgroundColor = " . Chr(34) . "" . guiOutOfButton8 . "" . Chr(34) . ";`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.borderRadius = " . Chr(34) . "" . guiOutOfButton9 . "" . Chr(34) . ";`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.color = " . Chr(34) . "" . guiOutOfButton7 . "" . Chr(34) . ";`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.fontFamily = " . Chr(34) . "" . guiOutOfButton12 . ", sans-serif" . Chr(34) . "; // Specify your desired font here`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".onclick = function (event) {`nvariables.A_GuiControl = event.target.textContent`n  " . guiOutOfButton6 . "(variables.A_GuiControl);`n};`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "Button" . str(NumOfButtons) . ");`n"

jsCode .= "`n" . jsCode0 . "`n"
}
else
{
jsCode0 := "`nGui" . GuiNumber . "Button" . str(NumOfButtons) . " = document.createElement(" . Chr(34) . "button" . Chr(34) . ");`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".id = " . Chr(34) . "Gui" . GuiNumber . "" . Chr(34) . " + " . Chr(34) . "Button" . Chr(34) . " + " . Chr(34) . "" . str(NumOfButtons) . "" . Chr(34) . "; // Set ID for referencing`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".textContent = " . Chr(34) . "" . out5 . "" . Chr(34) . ";`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.fontSize = " . Chr(34) . "" . guiFontShow . "px" . Chr(34) . "; // Set font size`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.position = " . Chr(34) . "absolute" . Chr(34) . "; // Set position to absolute`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.left = " . Chr(34) . "" . guiOutOfButton1 . "px" . Chr(34) . "; // Set initial x position`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.top = " . Chr(34) . "" . guiOutOfButton2 . "px" . Chr(34) . "; // Set initial y position`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.width = " . Chr(34) . "" . guiOutOfButton3 . "px" . Chr(34) . "; // Set width`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.height = " . Chr(34) . "" . guiOutOfButton4 . "px" . Chr(34) . "; // Set height`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.cursor = " . Chr(34) . "pointer" . Chr(34) . "; // Change cursor on hover`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.border = " . Chr(34) . "" . guiOutOfButton10 . "" . Chr(34) . ";`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.background = " . Chr(34) . "" . guiOutOfButton11 . "" . Chr(34) . ";`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.backgroundColor = " . Chr(34) . "" . guiOutOfButton8 . "" . Chr(34) . ";`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.borderRadius = " . Chr(34) . "" . guiOutOfButton9 . "" . Chr(34) . ";`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.color = " . Chr(34) . "" . guiOutOfButton7 . "" . Chr(34) . ";`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.fontFamily = " . Chr(34) . "" . guiOutOfButton12 . ", sans-serif" . Chr(34) . "; // Specify your desired font here`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "Button" . str(NumOfButtons) . ");`n"

jsCode .= "`n" . jsCode0 . "`n"
}
}

}
else
{
if (guiOutOfButtonV = 1)
{
if (guiOutOfButtonG = 1)
{
jsCode0 := "`n`n`nGui" . GuiNumber . "" . guiOutOfButton5 . " = document.createElement(" . Chr(34) . "button" . Chr(34) . ");`nGui" . GuiNumber . "" . guiOutOfButton5 . ".id = " . Chr(34) . "Gui" . GuiNumber . "" . Chr(34) . " + " . Chr(34) . "" . guiOutOfButton52 . "" . Chr(34) . "; // Set ID for referencing`nGui" . GuiNumber . "" . guiOutOfButton5 . ".textContent = " . Chr(34) . "" . out5 . "" . Chr(34) . ";`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.fontSize = " . Chr(34) . "" . guiFontShow . "px" . Chr(34) . "; // Set font size`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.position = " . Chr(34) . "absolute" . Chr(34) . "; // Set position to absolute`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.left = " . Chr(34) . "" . guiOutOfButton1 . "px" . Chr(34) . "; // Set initial x position`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.top = " . Chr(34) . "" . guiOutOfButton2 . "px" . Chr(34) . "; // Set initial y position`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.width = " . Chr(34) . "" . guiOutOfButton3 . "px" . Chr(34) . "; // Set width`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.height = " . Chr(34) . "" . guiOutOfButton4 . "px" . Chr(34) . "; // Set height`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.cursor = " . Chr(34) . "pointer" . Chr(34) . "; // Change cursor on hover`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.border = " . Chr(34) . "" . guiOutOfButton10 . "" . Chr(34) . ";`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.background = " . Chr(34) . "" . guiOutOfButton11 . "" . Chr(34) . ";`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.backgroundColor = " . Chr(34) . "" . guiOutOfButton8 . "" . Chr(34) . ";`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.borderRadius = " . Chr(34) . "" . guiOutOfButton9 . "" . Chr(34) . ";`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.color = " . Chr(34) . "" . guiOutOfButton7 . "" . Chr(34) . ";`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.fontFamily = " . Chr(34) . "" . guiOutOfButton12 . ", sans-serif" . Chr(34) . "; // Specify your desired font here`nGui" . GuiNumber . "" . guiOutOfButton5 . ".onclick = function (event) {`nvariables.A_GuiControl = event.target.id.replace(/^Gui" . Chr(92) . "d*/, " . Chr(34) . "" . Chr(34) . ");`n  " . guiOutOfButton6 . "(variables.A_GuiControl);`n};`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "" . guiOutOfButton5 . ");`n"

jsCode .= "`n" . jsCode0 . "`n"

}
else
{
jsCode0 := "`nGui" . GuiNumber . "" . guiOutOfButton5 . " = document.createElement(" . Chr(34) . "button" . Chr(34) . ");`nGui" . GuiNumber . "" . guiOutOfButton5 . ".id = " . Chr(34) . "Gui" . GuiNumber . "" . Chr(34) . " + " . Chr(34) . "" . guiOutOfButton52 . "" . Chr(34) . "; // Set ID for referencing`nGui" . GuiNumber . "" . guiOutOfButton5 . ".textContent = " . Chr(34) . "" . out5 . "" . Chr(34) . ";`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.fontSize = " . Chr(34) . "" . guiFontShow . "px" . Chr(34) . "; // Set font size`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.position = " . Chr(34) . "absolute" . Chr(34) . "; // Set position to absolute`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.left = " . Chr(34) . "" . guiOutOfButton1 . "px" . Chr(34) . "; // Set initial x position`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.top = " . Chr(34) . "" . guiOutOfButton2 . "px" . Chr(34) . "; // Set initial y position`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.width = " . Chr(34) . "" . guiOutOfButton3 . "px" . Chr(34) . "; // Set width`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.height = " . Chr(34) . "" . guiOutOfButton4 . "px" . Chr(34) . "; // Set height`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.border = " . Chr(34) . "" . guiOutOfButton10 . "" . Chr(34) . ";`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.background = " . Chr(34) . "" . guiOutOfButton11 . "" . Chr(34) . ";`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.backgroundColor = " . Chr(34) . "" . guiOutOfButton8 . "" . Chr(34) . ";`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.borderRadius = " . Chr(34) . "" . guiOutOfButton9 . "" . Chr(34) . ";`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.color = " . Chr(34) . "" . guiOutOfButton7 . "" . Chr(34) . ";`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.fontFamily = " . Chr(34) . "" . guiOutOfButton12 . ", sans-serif" . Chr(34) . "; // Specify your desired font here`nGui" . GuiNumber . "" . guiOutOfButton5 . ".style.cursor = " . Chr(34) . "pointer" . Chr(34) . "; // Change cursor on hover`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "" . guiOutOfButton5 . ");`n"

jsCode .= "`n" . jsCode0 . "`n"

}
}
else
{
if (guiOutOfButtonG = 1)
{
jsCode0 := "`nGui" . GuiNumber . "Button" . str(NumOfButtons) . " = document.createElement(" . Chr(34) . "button" . Chr(34) . ");`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".id = " . Chr(34) . "Gui" . GuiNumber . "" . Chr(34) . " + " . Chr(34) . "Button" . Chr(34) . " + " . Chr(34) . "" . str(NumOfButtons) . "" . Chr(34) . "; // Set ID for referencing`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".textContent = " . Chr(34) . "" . out5 . "" . Chr(34) . ";`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.fontSize = " . Chr(34) . "" . guiFontShow . "px" . Chr(34) . "; // Set font size`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.position = " . Chr(34) . "absolute" . Chr(34) . "; // Set position to absolute`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.left = " . Chr(34) . "" . guiOutOfButton1 . "px" . Chr(34) . "; // Set initial x position`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.top = " . Chr(34) . "" . guiOutOfButton2 . "px" . Chr(34) . "; // Set initial y position`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.width = " . Chr(34) . "" . guiOutOfButton3 . "px" . Chr(34) . "; // Set width`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.height = " . Chr(34) . "" . guiOutOfButton4 . "px" . Chr(34) . "; // Set height`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.cursor = " . Chr(34) . "pointer" . Chr(34) . "; // Change cursor on hover`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.border = " . Chr(34) . "" . guiOutOfButton10 . "" . Chr(34) . ";`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.background = " . Chr(34) . "" . guiOutOfButton11 . "" . Chr(34) . ";`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.backgroundColor = " . Chr(34) . "" . guiOutOfButton8 . "" . Chr(34) . ";`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.borderRadius = " . Chr(34) . "" . guiOutOfButton9 . "" . Chr(34) . ";`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.color = " . Chr(34) . "" . guiOutOfButton7 . "" . Chr(34) . ";`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.fontFamily = " . Chr(34) . "" . guiOutOfButton12 . ", sans-serif" . Chr(34) . "; // Specify your desired font here`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".onclick = function (event) {`nvariables.A_GuiControl = event.target.textContent`n  " . guiOutOfButton6 . "(variables.A_GuiControl);`n};`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "Button" . str(NumOfButtons) . ");`n`n"

jsCode .= "`n" . jsCode0 . "`n"
}
else
{
jsCode0 := "`nGui" . GuiNumber . "Button" . str(NumOfButtons) . " = document.createElement(" . Chr(34) . "button" . Chr(34) . ");`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".id = " . Chr(34) . "Gui" . GuiNumber . "" . Chr(34) . " + " . Chr(34) . "Button" . Chr(34) . " + " . Chr(34) . "" . str(NumOfButtons) . "" . Chr(34) . "; // Set ID for referencing`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".textContent = " . Chr(34) . "" . out5 . "" . Chr(34) . ";`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.fontSize = " . Chr(34) . "" . guiFontShow . "px" . Chr(34) . "; // Set font size`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.position = " . Chr(34) . "absolute" . Chr(34) . "; // Set position to absolute`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.left = " . Chr(34) . "" . guiOutOfButton1 . "px" . Chr(34) . "; // Set initial x position`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.top = " . Chr(34) . "" . guiOutOfButton2 . "px" . Chr(34) . "; // Set initial y position`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.width = " . Chr(34) . "" . guiOutOfButton3 . "px" . Chr(34) . "; // Set width`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.height = " . Chr(34) . "" . guiOutOfButton4 . "px" . Chr(34) . "; // Set height`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.cursor = " . Chr(34) . "pointer" . Chr(34) . "; // Change cursor on hover`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.border = " . Chr(34) . "" . guiOutOfButton10 . "" . Chr(34) . ";`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.background = " . Chr(34) . "" . guiOutOfButton11 . "" . Chr(34) . ";`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.backgroundColor = " . Chr(34) . "" . guiOutOfButton8 . "" . Chr(34) . ";`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.borderRadius = " . Chr(34) . "" . guiOutOfButton9 . "" . Chr(34) . ";`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.color = " . Chr(34) . "" . guiOutOfButton7 . "" . Chr(34) . ";`nGui" . GuiNumber . "Button" . str(NumOfButtons) . ".style.fontFamily = " . Chr(34) . "" . guiOutOfButton12 . ", sans-serif" . Chr(34) . "; // Specify your desired font here`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "Button" . str(NumOfButtons) . ");`n"

jsCode .= "`n" . jsCode0 . "`n"
}
}
}





}



if (out3 = "edit")
{
guiOutOfEditNum := 0
guiOutOfEditX := 0
guiOutOfEditY := 0
guiOutOfEditW := 0
guiOutOfEditH := 0
guiOutOfEditV := 0
guiOutOfEditG := 0
Loop, 12
{
guiOutOfEdit%A_Index% := ""
}
dynamicGuiSet := 0
Loop, Parse, out4, " "
{
;MsgBox, |%A_LoopField%|

guiOutOfEditNum++



if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("c"))
{

guiOutOfEdit7 := A_LoopField
StringTrimLeft, guiOutOfEdit7, guiOutOfEdit7, 1


if (InStr(guiOutOfEdit7, "%"))
{
str1 := guiOutOfEdit7
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfEdit7 := "#" . Chr(34) . " + variables." . var1 . "//"

}
else
{
 guiOutOfEdit7 := "#" . guiOutOfEdit7
}

}



if (SubStr(Trim(StrLower(A_LoopField)), 1, 3) = StrLower("gr-"))
{

guiOutOfEdit11 := A_LoopField
StringTrimLeft, guiOutOfEdit11, guiOutOfEdit11, 3


if (InStr(guiOutOfEdit11, "%"))
{
str1 := guiOutOfEdit11
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfEdit11 := "" . Chr(34) . " + variables." . var1 . "//"

}


}

if (SubStr(Trim(StrLower(A_LoopField)), 1, 2) = StrLower("bg"))
{

guiOutOfEdit8 := A_LoopField
StringTrimLeft, guiOutOfEdit8, guiOutOfEdit8, 2


if (InStr(guiOutOfEdit8, "%"))
{
str1 := guiOutOfEdit8
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfEdit8 := "#" . Chr(34) . " + variables." . var1 . "//"

}
else
{
guiOutOfEdit8 := "#" . guiOutOfEdit8
}

}


if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("f"))
{
guiOutOfEdit12 := Trim(A_LoopField)
StringTrimLeft, guiOutOfEdit12, guiOutOfEdit12, 1
if (InStr(guiOutOfEdit12, "%"))
{
str1 := guiOutOfEdit12
s := StrSplit(str1, "%", 2)
out2 := s
var1 := "" . Chr(34) . " + variables." . out2 . " + " . Chr(34) . ""
guiOutOfEdit12 := var1
}
}


if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("r"))
{

guiOutOfEdit9 := A_LoopField
StringTrimLeft, guiOutOfEdit9, guiOutOfEdit9, 1


if (InStr(guiOutOfEdit9, "%"))
{
str1 := guiOutOfEdit9
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfEdit9 := "" . Chr(34) . " + variables." . var1 . " + " . Chr(34) . "px"

}
else
{
guiOutOfEdit9 := guiOutOfEdit9 . "px"
}

}


if (SubStr(Trim(StrLower(A_LoopField)), 1, 7) = StrLower("-border"))
{

guiOutOfEdit10 := A_LoopField
StringTrimLeft, guiOutOfEdit10, guiOutOfEdit10, 7
guiOutOfEdit10 := "none"

if (InStr(guiOutOfEdit10, "%"))
{
str1 := guiOutOfEdit10
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfEdit10 := "" . Chr(34) . " + variables." . var1 . " + " . Chr(34) . ""

}


}




if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("x"))
{
guiOutOfEditX := 1
guiOutOfEdit1 := A_LoopField
if (InStr(guiOutOfEdit1, "%"))
{
str1 := guiOutOfEdit1
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfEdit1 := " " . Chr(34) . "" . Chr(34) . " + variables." . var1 . " + " . Chr(34) . ""
}
StringTrimLeft, guiOutOfEdit1, guiOutOfEdit1, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("y"))
{
guiOutOfEditY := 1
guiOutOfEdit2 := A_LoopField
if (InStr(guiOutOfEdit2, "%"))
{
str1 := guiOutOfEdit2
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfEdit2 := " " . Chr(34) . "" . Chr(34) . " + variables." . var1 . " + " . Chr(34) . ""
}
StringTrimLeft, guiOutOfEdit2, guiOutOfEdit2, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("w"))
{
guiOutOfEditW := 1
guiOutOfEdit3 := A_LoopField
if (InStr(guiOutOfEdit3, "%"))
{
str1 := guiOutOfEdit3
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfEdit3 := " " . Chr(34) . "" . Chr(34) . " + variables." . var1 . " + " . Chr(34) . ""
}
StringTrimLeft, guiOutOfEdit3, guiOutOfEdit3, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("h"))
{
guiOutOfEditH := 1
guiOutOfEdit4 := A_LoopField
if (InStr(guiOutOfEdit4, "%"))
{
str1 := guiOutOfEdit4
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfEdit4 := " " . Chr(34) . "" . Chr(34) . " + variables." . var1 . " + " . Chr(34) . ""
}
StringTrimLeft, guiOutOfEdit4, guiOutOfEdit4, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("v"))
{
guiOutOfEditV := 1
guiOutOfEdit5 := A_LoopField
guiOutOfEdit52 := A_LoopField
dynamicGuiSet := 1
if (InStr(guiOutOfEdit5, "%"))
{
str1 := guiOutOfEdit5
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfEdit5 := " [variables." . var1 . "]"
guiOutOfEdit52 := " " . Chr(34) . " + [variables." . var1 . "]" . " + " . "" . Chr(34) . ""
}
StringTrimLeft, guiOutOfEdit52, guiOutOfEdit52, 1
StringTrimLeft, guiOutOfEdit5, guiOutOfEdit5, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("g")) && !((SubStr(Trim(StrLower(A_LoopField)), 1, 3) = StrLower("gr-")))
{
guiOutOfEditG := 1
guiOutOfEdit6 := A_LoopField
StringTrimLeft, guiOutOfEdit6, guiOutOfEdit6, 1
}
}

NumOfEdits++


if (InStr(out5, "%"))
{
str1 := out5
s := StrSplit(str1, "%", 2)
var1 := s

out5 := "" . Chr(34) . "" . Chr(34) . " + variables." . var1 . " + " . Chr(34) . "" . Chr(34) . ""


}

if (dynamicGuiSet = 0)
{

if (guiOutOfEditV = 1)
{
if (guiOutOfEditG = 1)
{
jsCode0 := "`nGui" . GuiNumber . "" . guiOutOfEdit5 . " = document.createElement(" . Chr(34) . "textarea" . Chr(34) . ");`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".id = " . Chr(34) . "Gui" . GuiNumber . "" . Chr(34) . " + " . Chr(34) . "" . guiOutOfEdit52 . "" . Chr(34) . "; // Set ID for referencing`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".placeholder = " . Chr(34) . "" . out5 . "" . Chr(34) . ";`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.fontSize = " . Chr(34) . "" . guiFontShow . "px" . Chr(34) . "; // Set font size`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.resize = " . Chr(34) . "none" . Chr(34) . "; // Disable resizing`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.position = " . Chr(34) . "absolute" . Chr(34) . "; // Set position to absolute`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.left = " . Chr(34) . "" . guiOutOfEdit1 . "px" . Chr(34) . "; // Set initial x position`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.top = " . Chr(34) . "" . guiOutOfEdit2 . "px" . Chr(34) . "; // Set initial y position`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.width = " . Chr(34) . "" . guiOutOfEdit3 . "px" . Chr(34) . "; // Set width`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.height = " . Chr(34) . "" . guiOutOfEdit4 . "px" . Chr(34) . "; // Set height`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.border = " . Chr(34) . "" . guiOutOfEdit10 . "" . Chr(34) . "`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.color = " . Chr(34) . "" . guiOutOfEdit7 . "" . Chr(34) . "`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.background = " . Chr(34) . "" . guiOutOfEdit11 . "" . Chr(34) . "`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.backgroundColor = " . Chr(34) . "" . guiOutOfEdit8 . "" . Chr(34) . "`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.borderRadius = " . Chr(34) . "" . guiOutOfEdit9 . "" . Chr(34) . "`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.fontFamily = " . Chr(34) . "" . guiOutOfEdit12 . ", sans-serif" . Chr(34) . "; // Specify your desired font here`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".addEventListener(" . Chr(34) . "input" . Chr(34) . ", function () {`nvariables.A_GuiControl = Gui" . GuiNumber . "" . guiOutOfEdit5 . ".value`n  " . guiOutOfEdit6 . "(variables.A_GuiControl);`n});`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "" . guiOutOfEdit5 . ");`n"

jsCode .= "`n" . jsCode0 . "`n"

}
else
{
jsCode0 := "`nGui" . GuiNumber . "" . guiOutOfEdit5 . " = document.createElement(" . Chr(34) . "textarea" . Chr(34) . ");`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".id = " . Chr(34) . "Gui" . GuiNumber . "" . Chr(34) . " + " . Chr(34) . "" . guiOutOfEdit52 . "" . Chr(34) . "; // Set ID for referencing`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".placeholder = " . Chr(34) . "" . out5 . "" . Chr(34) . ";`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.fontSize = " . Chr(34) . "" . guiFontShow . "px" . Chr(34) . "; // Set font size`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.resize = " . Chr(34) . "none" . Chr(34) . "; // Disable resizing`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.position = " . Chr(34) . "absolute" . Chr(34) . "; // Set position to absolute`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.left = " . Chr(34) . "" . guiOutOfEdit1 . "px" . Chr(34) . "; // Set initial x position`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.top = " . Chr(34) . "" . guiOutOfEdit2 . "px" . Chr(34) . "; // Set initial y position`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.width = " . Chr(34) . "" . guiOutOfEdit3 . "px" . Chr(34) . "; // Set width`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.height = " . Chr(34) . "" . guiOutOfEdit4 . "px" . Chr(34) . "; // Set height`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.border = " . Chr(34) . "" . guiOutOfEdit10 . "" . Chr(34) . "`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.color = " . Chr(34) . "" . guiOutOfEdit7 . "" . Chr(34) . "`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.background = " . Chr(34) . "" . guiOutOfEdit11 . "" . Chr(34) . "`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.backgroundColor = " . Chr(34) . "" . guiOutOfEdit8 . "" . Chr(34) . "`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.borderRadius = " . Chr(34) . "" . guiOutOfEdit9 . "" . Chr(34) . "`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.fontFamily = " . Chr(34) . "" . guiOutOfEdit12 . ", sans-serif" . Chr(34) . "; // Specify your desired font here`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "" . guiOutOfEdit5 . ");`n"

jsCode .= "`n" . jsCode0 . "`n"

}
}
else
{
if (guiOutOfEditG = 1)
{
jsCode0 := "`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . " = document.createElement(" . Chr(34) . "textarea" . Chr(34) . ");`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".id = " . Chr(34) . "Gui" . GuiNumber . "" . Chr(34) . " + " . Chr(34) . "Edit" . Chr(34) . " + " . Chr(34) . "" . str(NumOfEdits) . "" . Chr(34) . "; // Set ID for referencing`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".placeholder = " . Chr(34) . "" . out5 . "" . Chr(34) . ";`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.fontSize = " . Chr(34) . "" . guiFontShow . "px" . Chr(34) . "; // Set font size`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.resize = " . Chr(34) . "none" . Chr(34) . "; // Disable resizing`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.position = " . Chr(34) . "absolute" . Chr(34) . "; // Set position to absolute`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.left = " . Chr(34) . "" . guiOutOfEdit1 . "px" . Chr(34) . "; // Set initial x position`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.top = " . Chr(34) . "" . guiOutOfEdit2 . "px" . Chr(34) . "; // Set initial y position`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.width = " . Chr(34) . "" . guiOutOfEdit3 . "px" . Chr(34) . "; // Set width`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.height = " . Chr(34) . "" . guiOutOfEdit4 . "px" . Chr(34) . "; // Set height`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.border = " . Chr(34) . "" . guiOutOfEdit10 . "" . Chr(34) . "`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.color = " . Chr(34) . "" . guiOutOfEdit7 . "" . Chr(34) . "`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.background = " . Chr(34) . "" . guiOutOfEdit11 . "" . Chr(34) . "`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.backgroundColor = " . Chr(34) . "" . guiOutOfEdit8 . "" . Chr(34) . "`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.borderRadius = " . Chr(34) . "" . guiOutOfEdit9 . "" . Chr(34) . "`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.fontFamily = " . Chr(34) . "" . guiOutOfEdit12 . ", sans-serif" . Chr(34) . "; // Specify your desired font here`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".addEventListener(" . Chr(34) . "input" . Chr(34) . ", function () {`nvariables.A_GuiControl = Gui" . GuiNumber . "Edit" . str(NumOfEdits) . ".value`n  " . guiOutOfEdit6 . "(variables.A_GuiControl);`n});`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "Edit" . str(NumOfEdits) . ");`n"

jsCode .= "`n" . jsCode0 . "`n"
}
else
{
jsCode0 := "`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . " = document.createElement(" . Chr(34) . "textarea" . Chr(34) . ");`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".id = " . Chr(34) . "Gui" . GuiNumber . "" . Chr(34) . " + " . Chr(34) . "Edit" . Chr(34) . " + " . Chr(34) . "" . str(NumOfEdits) . "" . Chr(34) . "; // Set ID for referencing`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".placeholder = " . Chr(34) . "" . out5 . "" . Chr(34) . ";`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.fontSize = " . Chr(34) . "" . guiFontShow . "px" . Chr(34) . "; // Set font size`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.resize = " . Chr(34) . "none" . Chr(34) . "; // Disable resizing`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.position = " . Chr(34) . "absolute" . Chr(34) . "; // Set position to absolute`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.left = " . Chr(34) . "" . guiOutOfEdit1 . "px" . Chr(34) . "; // Set initial x position`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.top = " . Chr(34) . "" . guiOutOfEdit2 . "px" . Chr(34) . "; // Set initial y position`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.width = " . Chr(34) . "" . guiOutOfEdit3 . "px" . Chr(34) . "; // Set width`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.height = " . Chr(34) . "" . guiOutOfEdit4 . "px" . Chr(34) . "; // Set height`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.border = " . Chr(34) . "" . guiOutOfEdit10 . "" . Chr(34) . "`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.color = " . Chr(34) . "" . guiOutOfEdit7 . "" . Chr(34) . "`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.background = " . Chr(34) . "" . guiOutOfEdit11 . "" . Chr(34) . "`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.backgroundColor = " . Chr(34) . "" . guiOutOfEdit8 . "" . Chr(34) . "`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.borderRadius = " . Chr(34) . "" . guiOutOfEdit9 . "" . Chr(34) . "`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.fontFamily = " . Chr(34) . "" . guiOutOfEdit12 . ", sans-serif" . Chr(34) . "; // Specify your desired font here`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "Edit" . str(NumOfEdits) . ");`n"

jsCode .= "`n" . jsCode0 . "`n"
}
}

}
else
{
if (guiOutOfEditV = 1)
{
if (guiOutOfEditG = 1)
{
jsCode0 := "`n`n`nGui" . GuiNumber . "" . guiOutOfEdit5 . " = document.createElement(" . Chr(34) . "textarea" . Chr(34) . ");`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".id = " . Chr(34) . "Gui" . GuiNumber . "" . Chr(34) . " + " . Chr(34) . "" . guiOutOfEdit52 . "" . Chr(34) . "; // Set ID for referencing`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".placeholder = " . Chr(34) . "" . out5 . "" . Chr(34) . ";`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.fontSize = " . Chr(34) . "" . guiFontShow . "px" . Chr(34) . "; // Set font size`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.resize = " . Chr(34) . "none" . Chr(34) . "; // Disable resizing`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.position = " . Chr(34) . "absolute" . Chr(34) . "; // Set position to absolute`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.left = " . Chr(34) . "" . guiOutOfEdit1 . "px" . Chr(34) . "; // Set initial x position`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.top = " . Chr(34) . "" . guiOutOfEdit2 . "px" . Chr(34) . "; // Set initial y position`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.width = " . Chr(34) . "" . guiOutOfEdit3 . "px" . Chr(34) . "; // Set width`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.height = " . Chr(34) . "" . guiOutOfEdit4 . "px" . Chr(34) . "; // Set height`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.border = " . Chr(34) . "" . guiOutOfEdit10 . "" . Chr(34) . "`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.color = " . Chr(34) . "" . guiOutOfEdit7 . "" . Chr(34) . "`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.background = " . Chr(34) . "" . guiOutOfEdit11 . "" . Chr(34) . "`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.backgroundColor = " . Chr(34) . "" . guiOutOfEdit8 . "" . Chr(34) . "`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.borderRadius = " . Chr(34) . "" . guiOutOfEdit9 . "" . Chr(34) . "`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.fontFamily = " . Chr(34) . "" . guiOutOfEdit12 . ", sans-serif" . Chr(34) . "; // Specify your desired font here`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".addEventListener(" . Chr(34) . "input" . Chr(34) . ", function () {`nvariables.A_GuiControl = Gui" . GuiNumber . "" . guiOutOfEdit5 . ".value`n  " . guiOutOfEdit6 . "(variables.A_GuiControl);`n});`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "" . guiOutOfEdit5 . ");`n"

jsCode .= "`n" . jsCode0 . "`n"

}
else
{
jsCode0 := "`nGui" . GuiNumber . "" . guiOutOfEdit5 . " = document.createElement(" . Chr(34) . "textarea" . Chr(34) . ");`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".id = " . Chr(34) . "Gui" . GuiNumber . "" . Chr(34) . " + " . Chr(34) . "" . guiOutOfEdit52 . "" . Chr(34) . "; // Set ID for referencing`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".placeholder = " . Chr(34) . "" . out5 . "" . Chr(34) . ";`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.fontSize = " . Chr(34) . "" . guiFontShow . "px" . Chr(34) . "; // Set font size`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.resize = " . Chr(34) . "none" . Chr(34) . "; // Disable resizing`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.position = " . Chr(34) . "absolute" . Chr(34) . "; // Set position to absolute`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.left = " . Chr(34) . "" . guiOutOfEdit1 . "px" . Chr(34) . "; // Set initial x position`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.top = " . Chr(34) . "" . guiOutOfEdit2 . "px" . Chr(34) . "; // Set initial y position`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.width = " . Chr(34) . "" . guiOutOfEdit3 . "px" . Chr(34) . "; // Set width`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.height = " . Chr(34) . "" . guiOutOfEdit4 . "px" . Chr(34) . "; // Set height`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.border = " . Chr(34) . "" . guiOutOfEdit10 . "" . Chr(34) . "`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.color = " . Chr(34) . "" . guiOutOfEdit7 . "" . Chr(34) . "`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.background = " . Chr(34) . "" . guiOutOfEdit11 . "" . Chr(34) . "`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.backgroundColor = " . Chr(34) . "" . guiOutOfEdit8 . "" . Chr(34) . "`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.borderRadius = " . Chr(34) . "" . guiOutOfEdit9 . "" . Chr(34) . "`nGui" . GuiNumber . "" . guiOutOfEdit5 . ".style.fontFamily = " . Chr(34) . "" . guiOutOfEdit12 . ", sans-serif" . Chr(34) . "; // Specify your desired font here`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "" . guiOutOfEdit5 . ");`n"

jsCode .= "`n" . jsCode0 . "`n"

}
}
else
{
if (guiOutOfEditG = 1)
{
jsCode0 := "`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . " = document.createElement(" . Chr(34) . "textarea" . Chr(34) . ");`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".id = " . Chr(34) . "Gui" . GuiNumber . "" . Chr(34) . " + " . Chr(34) . "Edit" . Chr(34) . " + " . Chr(34) . "" . str(NumOfEdits) . "" . Chr(34) . "; // Set ID for referencing`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".placeholder = " . Chr(34) . "" . out5 . "" . Chr(34) . ";`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.fontSize = " . Chr(34) . "" . guiFontShow . "px" . Chr(34) . "; // Set font size`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.resize = " . Chr(34) . "none" . Chr(34) . "; // Disable resizing`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.position = " . Chr(34) . "absolute" . Chr(34) . "; // Set position to absolute`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.left = " . Chr(34) . "" . guiOutOfEdit1 . "px" . Chr(34) . "; // Set initial x position`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.top = " . Chr(34) . "" . guiOutOfEdit2 . "px" . Chr(34) . "; // Set initial y position`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.width = " . Chr(34) . "" . guiOutOfEdit3 . "px" . Chr(34) . "; // Set width`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.height = " . Chr(34) . "" . guiOutOfEdit4 . "px" . Chr(34) . "; // Set height`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.border = " . Chr(34) . "" . guiOutOfEdit10 . "" . Chr(34) . "`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.color = " . Chr(34) . "" . guiOutOfEdit7 . "" . Chr(34) . "`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.background = " . Chr(34) . "" . guiOutOfEdit11 . "" . Chr(34) . "`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.backgroundColor = " . Chr(34) . "" . guiOutOfEdit8 . "" . Chr(34) . "`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.borderRadius = " . Chr(34) . "" . guiOutOfEdit9 . "" . Chr(34) . "`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.fontFamily = " . Chr(34) . "" . guiOutOfEdit12 . ", sans-serif" . Chr(34) . "; // Specify your desired font here`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".addEventListener(" . Chr(34) . "input" . Chr(34) . ", function () {`nvariables.A_GuiControl = Gui" . GuiNumber . "Edit" . str(NumOfEdits) . ".value`n  " . guiOutOfEdit6 . "(variables.A_GuiControl);`n});`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "Edit" . str(NumOfEdits) . ");`n`n"

jsCode .= "`n" . jsCode0 . "`n"
}
else
{
jsCode0 := "`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . " = document.createElement(" . Chr(34) . "textarea" . Chr(34) . ");`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".id = " . Chr(34) . "Gui" . GuiNumber . "" . Chr(34) . " + " . Chr(34) . "Edit" . Chr(34) . " + " . Chr(34) . "" . str(NumOfEdits) . "" . Chr(34) . "; // Set ID for referencing`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".placeholder = " . Chr(34) . "" . out5 . "" . Chr(34) . ";`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.fontSize = " . Chr(34) . "" . guiFontShow . "px" . Chr(34) . "; // Set font size`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.resize = " . Chr(34) . "none" . Chr(34) . "; // Disable resizing`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.position = " . Chr(34) . "absolute" . Chr(34) . "; // Set position to absolute`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.left = " . Chr(34) . "" . guiOutOfEdit1 . "px" . Chr(34) . "; // Set initial x position`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.top = " . Chr(34) . "" . guiOutOfEdit2 . "px" . Chr(34) . "; // Set initial y position`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.width = " . Chr(34) . "" . guiOutOfEdit3 . "px" . Chr(34) . "; // Set width`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.height = " . Chr(34) . "" . guiOutOfEdit4 . "px" . Chr(34) . "; // Set height`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.border = " . Chr(34) . "" . guiOutOfEdit10 . "" . Chr(34) . "`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.color = " . Chr(34) . "" . guiOutOfEdit7 . "" . Chr(34) . "`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.background = " . Chr(34) . "" . guiOutOfEdit11 . "" . Chr(34) . "`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.backgroundColor = " . Chr(34) . "" . guiOutOfEdit8 . "" . Chr(34) . "`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.borderRadius = " . Chr(34) . "" . guiOutOfEdit9 . "" . Chr(34) . "`nGui" . GuiNumber . "Edit" . str(NumOfEdits) . ".style.fontFamily = " . Chr(34) . "" . guiOutOfEdit12 . ", sans-serif" . Chr(34) . "; // Specify your desired font here`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "Edit" . str(NumOfEdits) . ");`n"

jsCode .= "`n" . jsCode0 . "`n"
}
}
}


}




if (out3 = "picture")
{
base64ImageNum++




guiOutOfPictureNum := 0
guiOutOfPictureX := 0
guiOutOfPictureY := 0
guiOutOfPictureW := 0
guiOutOfPictureH := 0
guiOutOfPictureV := 0
guiOutOfPictureG := 0
Loop, 6
{
guiOutOfPicture%A_Index% := ""
}
dynamicGuiSet := 0
Loop, Parse, out4, " "
{
;MsgBox, |%A_LoopField%|

guiOutOfPictureNum++

if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("x"))
{
guiOutOfPictureX := 1
guiOutOfPicture1 := A_LoopField
if (InStr(guiOutOfPicture1, "%"))
{
str1 := guiOutOfPicture1
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfPicture1 := " " . Chr(34) . "" . Chr(34) . " + variables." . var1 . " + " . Chr(34) . ""
}
StringTrimLeft, guiOutOfPicture1, guiOutOfPicture1, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("y"))
{
guiOutOfPictureY := 1
guiOutOfPicture2 := A_LoopField
if (InStr(guiOutOfPicture2, "%"))
{
str1 := guiOutOfPicture2
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfPicture2 := " " . Chr(34) . "" . Chr(34) . " + variables." . var1 . " + " . Chr(34) . ""
}
StringTrimLeft, guiOutOfPicture2, guiOutOfPicture2, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("w"))
{
guiOutOfPictureW := 1
guiOutOfPicture3 := A_LoopField
if (InStr(guiOutOfPicture3, "%"))
{
str1 := guiOutOfPicture3
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfPicture3 := " " . Chr(34) . "" . Chr(34) . " + variables." . var1 . " + " . Chr(34) . ""
}
StringTrimLeft, guiOutOfPicture3, guiOutOfPicture3, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("h"))
{
guiOutOfPictureH := 1
guiOutOfPicture4 := A_LoopField
if (InStr(guiOutOfPicture4, "%"))
{
str1 := guiOutOfPicture4
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfPicture4 := " " . Chr(34) . "" . Chr(34) . " + variables." . var1 . " + " . Chr(34) . ""
}
StringTrimLeft, guiOutOfPicture4, guiOutOfPicture4, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("v"))
{
guiOutOfPictureV := 1
guiOutOfPicture5 := A_LoopField
guiOutOfPicture52 := A_LoopField
dynamicGuiSet := 1
if (InStr(guiOutOfPicture5, "%"))
{
str1 := guiOutOfPicture5
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfPicture5 := " [variables." . var1 . "]"
guiOutOfPicture52 := " " . Chr(34) . " + [variables." . var1 . "]" . " + " . "" . Chr(34) . ""
}
StringTrimLeft, guiOutOfPicture5, guiOutOfPicture5, 1
StringTrimLeft, guiOutOfPicture52, guiOutOfPicture52, 1
weDontHaveAvImage := 0
}
else
{
weDontHaveAvImage := 1

}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("g"))
{
guiOutOfPictureG := 1
guiOutOfPicture6 := A_LoopField
StringTrimLeft, guiOutOfPicture6, guiOutOfPicture6, 1
}
}

NumOfPictures++


if (weDontHaveAvImage = 1)
{

guiOutOfPictureV := 1
guiOutOfPicture5 := "v" . "Picture" . str(NumOfPictures)
guiOutOfPicture52 := "v" . "Picture" . str(NumOfPictures)
dynamicGuiSet := 1
if (InStr(guiOutOfPicture5, "%"))
{
str1 := guiOutOfPicture5
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfPicture5 := " [variables." . var1 . "]"
guiOutOfPicture52 := " " . Chr(34) . " + [variables." . var1 . "]" . " + " . "" . Chr(34) . ""
}
StringTrimLeft, guiOutOfPicture5, guiOutOfPicture5, 1
StringTrimLeft, guiOutOfPicture52, guiOutOfPicture52, 1
}

if (InStr(out5, "%"))
{
str1 := out5
s := StrSplit(str1, "%", 2)
var1 := s

out5 := "" . Chr(34) . "" . Chr(34) . " + variables." . var1 . " + " . Chr(34) . "" . Chr(34) . ""


}




if (InStr(out5, "https://") or InStr(out5, "http://") or InStr(out5, "www.") or InStr(out5, "ftp://"))
{
    ; One or more of the specified substrings are found in out5
    ;MsgBox, URL or FTP link detected in out5: %out5%

isBase64orURL2 := "`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".src = base64Image" . str(base64ImageNum) . ";`n"

base64out := out5

isBase64orURL := isBase64orURL2




}
else
{
    ; None of the specified substrings are found in out5
    ;MsgBox, No URL or FTP link detected in out5: %out5%

gg := 0
}




base64 := "let base64Image" . str(base64ImageNum) . " = " . Chr(34) . "" . base64out . "" . Chr(34) . ""

base64ImageData .= base64 . "`n"




if (dynamicGuiSet = 0)
{

if (guiOutOfPictureV = 1)
{
if (guiOutOfPictureG = 1)
{
jsCode0 := "`nGui" . GuiNumber . "" . guiOutOfPicture5 . " = document.createElement(" . Chr(34) . "img" . Chr(34) . ");`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".id = " . Chr(34) . "Gui" . GuiNumber . "" . Chr(34) . " + " . Chr(34) . "" . guiOutOfPicture52 . "" . Chr(34) . "; // Set ID for referencing`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".style.fontSize = " . Chr(34) . "" . guiFontShow . "px" . Chr(34) . "; // Set font size`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".style.position = " . Chr(34) . "absolute" . Chr(34) . "; // Set position to absolute`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".style.left = " . Chr(34) . "" . guiOutOfPicture1 . "px" . Chr(34) . "; // Set initial x position`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".style.top = " . Chr(34) . "" . guiOutOfPicture2 . "px" . Chr(34) . "; // Set initial y position`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".style.width = " . Chr(34) . "" . guiOutOfPicture3 . "px" . Chr(34) . "; // Set width`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".style.height = " . Chr(34) . "" . guiOutOfPicture4 . "px" . Chr(34) . "; // Set height`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".onclick = function (event) {`nvariables.A_GuiControl = event.target.id.replace(/^Gui" . Chr(92) . "d*/, " . Chr(34) . "" . Chr(34) . ");`n  " . guiOutOfPicture6 . "(variables.A_GuiControl);`n};`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "" . guiOutOfPicture5 . ");`n`n`n`n// Set the src attribute to the Base64-encoded image string for the second block`n" . isBase64orURL . "`n`n// Set CSS styles to resize the image to fit inside the div`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".style.maxWidth = " . Chr(34) . "100" . Chr(37) . "" . Chr(34) . "; // Resize the image to fit the width of the div`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".style.maxHeight = " . Chr(34) . "100" . Chr(37) . "" . Chr(34) . "; // Resize the image to fit the height of the div`n`n// Append the img element to the div for the second block`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "" . guiOutOfPicture5 . ");`n"

jsCode .= "`n" . jsCode0 . "`n"




}
else
{
jsCode0 := "`nGui" . GuiNumber . "" . guiOutOfPicture5 . " = document.createElement(" . Chr(34) . "img" . Chr(34) . ");`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".id = " . Chr(34) . "Gui" . GuiNumber . "" . Chr(34) . " + " . Chr(34) . "" . guiOutOfPicture52 . "" . Chr(34) . "; // Set ID for referencing`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".style.fontSize = " . Chr(34) . "" . guiFontShow . "px" . Chr(34) . "; // Set font size`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".style.position = " . Chr(34) . "absolute" . Chr(34) . "; // Set position to absolute`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".style.left = " . Chr(34) . "" . guiOutOfPicture1 . "px" . Chr(34) . "; // Set initial x position`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".style.top = " . Chr(34) . "" . guiOutOfPicture2 . "px" . Chr(34) . "; // Set initial y position`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".style.width = " . Chr(34) . "" . guiOutOfPicture3 . "px" . Chr(34) . "; // Set width`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".style.height = " . Chr(34) . "" . guiOutOfPicture4 . "px" . Chr(34) . "; // Set height`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "" . guiOutOfPicture5 . ");`n`n`n`n`n// Set the src attribute to the Base64-encoded image string for the second block`n" . isBase64orURL . "`n`n`n// Set CSS styles to resize the image to fit inside the div`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".style.maxWidth = " . Chr(34) . "100" . Chr(37) . "" . Chr(34) . "; // Resize the image to fit the width of the div`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".style.maxHeight = " . Chr(34) . "100" . Chr(37) . "" . Chr(34) . "; // Resize the image to fit the height of the div`n`n// Append the img element to the div for the second block`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "" . guiOutOfPicture5 . ");`n"

jsCode .= "`n" . jsCode0 . "`n"

}
}
else
{
if (guiOutOfPictureG = 1)
{
jsCode0 := "`nGui" . GuiNumber . "Picture" . str(NumOfPictures) . " = document.createElement(" . Chr(34) . "img" . Chr(34) . ");`nGui" . GuiNumber . "Picture" . str(NumOfPictures) . ".id = " . Chr(34) . "Gui" . GuiNumber . "" . Chr(34) . " + " . Chr(34) . "Picture" . Chr(34) . " + " . Chr(34) . "" . str(NumOfPictures) . "" . Chr(34) . "; // Set ID for referencing`nGui" . GuiNumber . "Picture" . str(NumOfPictures) . ".style.fontSize = " . Chr(34) . "" . guiFontShow . "px" . Chr(34) . "; // Set font size`nGui" . GuiNumber . "Picture" . str(NumOfPictures) . ".style.position = " . Chr(34) . "absolute" . Chr(34) . "; // Set position to absolute`nGui" . GuiNumber . "Picture" . str(NumOfPictures) . ".style.left = " . Chr(34) . "" . guiOutOfPicture1 . "px" . Chr(34) . "; // Set initial x position`nGui" . GuiNumber . "Picture" . str(NumOfPictures) . ".style.top = " . Chr(34) . "" . guiOutOfPicture2 . "px" . Chr(34) . "; // Set initial y position`nGui" . GuiNumber . "Picture" . str(NumOfPictures) . ".style.width = " . Chr(34) . "" . guiOutOfPicture3 . "px" . Chr(34) . "; // Set width`nGui" . GuiNumber . "Picture" . str(NumOfPictures) . ".style.height = " . Chr(34) . "" . guiOutOfPicture4 . "px" . Chr(34) . "; // Set height`nGui" . GuiNumber . "Picture" . str(NumOfPictures) . ".onclick = function (event) {`nvariables.A_GuiControl = event.target.textContent`n  " . guiOutOfPicture6 . "(variables.A_GuiControl);`n};`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "Picture" . str(NumOfPictures) . ");`n`n`n" . isBase64orURL . "`n`n`n// Set CSS styles to resize the image to fit inside the div`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".style.maxWidth = " . Chr(34) . "100" . Chr(37) . "" . Chr(34) . "; // Resize the image to fit the width of the div`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".style.maxHeight = " . Chr(34) . "100" . Chr(37) . "" . Chr(34) . "; // Resize the image to fit the height of the div`n`n// Append the img element to the div for the second block`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "" . guiOutOfPicture5 . ");`n"

jsCode .= "`n" . jsCode0 . "`n"
}
else
{
jsCode0 := "`nGui" . GuiNumber . "Picture" . str(NumOfPictures) . " = document.createElement(" . Chr(34) . "img" . Chr(34) . ");`nGui" . GuiNumber . "Picture" . str(NumOfPictures) . ".id = " . Chr(34) . "Gui" . GuiNumber . "" . Chr(34) . " + " . Chr(34) . "Picture" . Chr(34) . " + " . Chr(34) . "" . str(NumOfPictures) . "" . Chr(34) . "; // Set ID for referencing`nGui" . GuiNumber . "Picture" . str(NumOfPictures) . ".style.fontSize = " . Chr(34) . "" . guiFontShow . "px" . Chr(34) . "; // Set font size`nGui" . GuiNumber . "Picture" . str(NumOfPictures) . ".style.position = " . Chr(34) . "absolute" . Chr(34) . "; // Set position to absolute`nGui" . GuiNumber . "Picture" . str(NumOfPictures) . ".style.left = " . Chr(34) . "" . guiOutOfPicture1 . "px" . Chr(34) . "; // Set initial x position`nGui" . GuiNumber . "Picture" . str(NumOfPictures) . ".style.top = " . Chr(34) . "" . guiOutOfPicture2 . "px" . Chr(34) . "; // Set initial y position`nGui" . GuiNumber . "Picture" . str(NumOfPictures) . ".style.width = " . Chr(34) . "" . guiOutOfPicture3 . "px" . Chr(34) . "; // Set width`nGui" . GuiNumber . "Picture" . str(NumOfPictures) . ".style.height = " . Chr(34) . "" . guiOutOfPicture4 . "px" . Chr(34) . "; // Set height`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "Picture" . str(NumOfPictures) . ");`n`n`n`n`n// Set the src attribute to the Base64-encoded image string for the second block`n" . isBase64orURL . "`n`n// Set CSS styles to resize the image to fit inside the div`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".style.maxWidth = " . Chr(34) . "100" . Chr(37) . "" . Chr(34) . "; // Resize the image to fit the width of the div`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".style.maxHeight = " . Chr(34) . "100" . Chr(37) . "" . Chr(34) . "; // Resize the image to fit the height of the div`n`n// Append the img element to the div for the second block`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "" . guiOutOfPicture5 . ");`n"

jsCode .= "`n" . jsCode0 . "`n"
}
}

}
else
{
if (guiOutOfPictureV = 1)
{
if (guiOutOfPictureG = 1)
{
jsCode0 := "`nGui" . GuiNumber . "" . guiOutOfPicture5 . " = document.createElement(" . Chr(34) . "img" . Chr(34) . ");`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".id = " . Chr(34) . "Gui" . GuiNumber . "" . Chr(34) . " + " . Chr(34) . "" . guiOutOfPicture52 . "" . Chr(34) . "; // Set ID for referencing`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".style.fontSize = " . Chr(34) . "" . guiFontShow . "px" . Chr(34) . "; // Set font size`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".style.position = " . Chr(34) . "absolute" . Chr(34) . "; // Set position to absolute`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".style.left = " . Chr(34) . "" . guiOutOfPicture1 . "px" . Chr(34) . "; // Set initial x position`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".style.top = " . Chr(34) . "" . guiOutOfPicture2 . "px" . Chr(34) . "; // Set initial y position`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".style.width = " . Chr(34) . "" . guiOutOfPicture3 . "px" . Chr(34) . "; // Set width`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".style.height = " . Chr(34) . "" . guiOutOfPicture4 . "px" . Chr(34) . "; // Set height`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".onclick = function (event) {`nvariables.A_GuiControl = event.target.id.replace(/^Gui" . Chr(92) . "d*/, " . Chr(34) . "" . Chr(34) . ");`n  " . guiOutOfPicture6 . "(variables.A_GuiControl);`n};`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "" . guiOutOfPicture5 . ");`n`n`n`n`n// Set the src attribute to the Base64-encoded image string for the second block`n" . isBase64orURL . "`n`n// Set CSS styles to resize the image to fit inside the div`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".style.maxWidth = " . Chr(34) . "100" . Chr(37) . "" . Chr(34) . "; // Resize the image to fit the width of the div`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".style.maxHeight = " . Chr(34) . "100" . Chr(37) . "" . Chr(34) . "; // Resize the image to fit the height of the div`n`n// Append the img element to the div for the second block`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "" . guiOutOfPicture5 . ");`n"

jsCode .= "`n" . jsCode0 . "`n"

}
else
{
jsCode0 := "`nGui" . GuiNumber . "" . guiOutOfPicture5 . " = document.createElement(" . Chr(34) . "img" . Chr(34) . ");`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".id = " . Chr(34) . "Gui" . GuiNumber . "" . Chr(34) . " + " . Chr(34) . "" . guiOutOfPicture52 . "" . Chr(34) . "; // Set ID for referencing`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".style.fontSize = " . Chr(34) . "" . guiFontShow . "px" . Chr(34) . "; // Set font size`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".style.position = " . Chr(34) . "absolute" . Chr(34) . "; // Set position to absolute`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".style.left = " . Chr(34) . "" . guiOutOfPicture1 . "px" . Chr(34) . "; // Set initial x position`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".style.top = " . Chr(34) . "" . guiOutOfPicture2 . "px" . Chr(34) . "; // Set initial y position`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".style.width = " . Chr(34) . "" . guiOutOfPicture3 . "px" . Chr(34) . "; // Set width`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".style.height = " . Chr(34) . "" . guiOutOfPicture4 . "px" . Chr(34) . "; // Set height`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "" . guiOutOfPicture5 . ");`n`n`n// Set the src attribute to the Base64-encoded image string for the second block`n" . isBase64orURL . "`n`n// Set CSS styles to resize the image to fit inside the div`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".style.maxWidth = " . Chr(34) . "100" . Chr(37) . "" . Chr(34) . "; // Resize the image to fit the width of the div`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".style.maxHeight = " . Chr(34) . "100" . Chr(37) . "" . Chr(34) . "; // Resize the image to fit the height of the div`n`n// Append the img element to the div for the second block`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "" . guiOutOfPicture5 . ");`n"

jsCode .= "`n" . jsCode0 . "`n"

}
}
else
{
if (guiOutOfPictureG = 1)
{
jsCode0 := "`nGui" . GuiNumber . "Picture" . str(NumOfPictures) . " = document.createElement(" . Chr(34) . "img" . Chr(34) . ");`nGui" . GuiNumber . "Picture" . str(NumOfPictures) . ".id = " . Chr(34) . "Gui" . GuiNumber . "" . Chr(34) . " + " . Chr(34) . "Picture" . Chr(34) . " + " . Chr(34) . "" . str(NumOfPictures) . "" . Chr(34) . "; // Set ID for referencing`nGui" . GuiNumber . "Picture" . str(NumOfPictures) . ".style.fontSize = " . Chr(34) . "" . guiFontShow . "px" . Chr(34) . "; // Set font size`nGui" . GuiNumber . "Picture" . str(NumOfPictures) . ".style.position = " . Chr(34) . "absolute" . Chr(34) . "; // Set position to absolute`nGui" . GuiNumber . "Picture" . str(NumOfPictures) . ".style.left = " . Chr(34) . "" . guiOutOfPicture1 . "px" . Chr(34) . "; // Set initial x position`nGui" . GuiNumber . "Picture" . str(NumOfPictures) . ".style.top = " . Chr(34) . "" . guiOutOfPicture2 . "px" . Chr(34) . "; // Set initial y position`nGui" . GuiNumber . "Picture" . str(NumOfPictures) . ".style.width = " . Chr(34) . "" . guiOutOfPicture3 . "px" . Chr(34) . "; // Set width`nGui" . GuiNumber . "Picture" . str(NumOfPictures) . ".style.height = " . Chr(34) . "" . guiOutOfPicture4 . "px" . Chr(34) . "; // Set height`nGui" . GuiNumber . "Picture" . str(NumOfPictures) . ".onclick = function (event) {`nvariables.A_GuiControl = event.target.textContent`n  " . guiOutOfPicture6 . "(variables.A_GuiControl);`n};`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "Picture" . str(NumOfPictures) . ");`n`n`n// Set the src attribute to the Base64-encoded image string for the second block`nGui" . GuiNumber . "Picture" . str(NumOfPictures) . ".src = " . Chr(34) . "data:image/*;base64," . Chr(34) . " + base64Image" . str(base64ImageNum) . "; // Assuming the image is in PNG format`n`n// Set CSS styles to resize the image to fit inside the div`nGui" . GuiNumber . "Picture" . str(NumOfPictures) . ".style.maxWidth = " . Chr(34) . "100" . Chr(37) . "" . Chr(34) . "; // Resize the image to fit the width of the div`nGui" . GuiNumber . "Picture" . str(NumOfPictures) . ".style.maxHeight = " . Chr(34) . "100" . Chr(37) . "" . Chr(34) . "; // Resize the image to fit the height of the div`n`n// Append the img element to the div for the second block`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "" . guiOutOfPicture5 . ");`n"

jsCode .= "`n" . jsCode0 . "`n"
}
else
{
jsCode0 := "`nGui" . GuiNumber . "Picture" . str(NumOfPictures) . " = document.createElement(" . Chr(34) . "img" . Chr(34) . ");`nGui" . GuiNumber . "Picture" . str(NumOfPictures) . ".id = " . Chr(34) . "Gui" . GuiNumber . "" . Chr(34) . " + " . Chr(34) . "Picture" . Chr(34) . " + " . Chr(34) . "" . str(NumOfPictures) . "" . Chr(34) . "; // Set ID for referencing`nGui" . GuiNumber . "Picture" . str(NumOfPictures) . ".style.fontSize = " . Chr(34) . "" . guiFontShow . "px" . Chr(34) . "; // Set font size`nGui" . GuiNumber . "Picture" . str(NumOfPictures) . ".style.position = " . Chr(34) . "absolute" . Chr(34) . "; // Set position to absolute`nGui" . GuiNumber . "Picture" . str(NumOfPictures) . ".style.left = " . Chr(34) . "" . guiOutOfPicture1 . "px" . Chr(34) . "; // Set initial x position`nGui" . GuiNumber . "Picture" . str(NumOfPictures) . ".style.top = " . Chr(34) . "" . guiOutOfPicture2 . "px" . Chr(34) . "; // Set initial y position`nGui" . GuiNumber . "Picture" . str(NumOfPictures) . ".style.width = " . Chr(34) . "" . guiOutOfPicture3 . "px" . Chr(34) . "; // Set width`nGui" . GuiNumber . "Picture" . str(NumOfPictures) . ".style.height = " . Chr(34) . "" . guiOutOfPicture4 . "px" . Chr(34) . "; // Set height`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "Picture" . str(NumOfPictures) . ");`n`n`n`n`n// Set the src attribute to the Base64-encoded image string for the second block`n" . isBase64orURL . "`n`n// Set CSS styles to resize the image to fit inside the div`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".style.maxWidth = " . Chr(34) . "100" . Chr(37) . "" . Chr(34) . "; // Resize the image to fit the width of the div`nGui" . GuiNumber . "" . guiOutOfPicture5 . ".style.maxHeight = " . Chr(34) . "100" . Chr(37) . "" . Chr(34) . "; // Resize the image to fit the height of the div`n`n// Append the img element to the div for the second block`nGui" . GuiNumber . ".appendChild(Gui" . GuiNumber . "" . guiOutOfPicture5 . ");`n"

jsCode .= "`n" . jsCode0 . "`n"
}
}
}





}





}


if (out3 = "toggle")
{







guiOutOfSwitchNum := 0
guiOutOfSwitchX := 0
guiOutOfSwitchY := 0
guiOutOfSwitchW := 0
guiOutOfSwitchH := 0
guiOutOfSwitchV := 0
guiOutOfSwitchG := 0
guiOutOfSwitchOn := 0
Loop, 7
{
guiOutOfSwitch%A_Index% := ""
}

guiOutOfSwitch3 := "60"
guiOutOfSwitch4 := "30"
isThereArecId := 1

dynamicGuiSet := 0
Loop, Parse, out4, " "
{
;MsgBox, |%A_LoopField%|

guiOutOfSwitchNum++

if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("x"))
{
guiOutOfSwitchX := 1
guiOutOfSwitch1 := A_LoopField
if (InStr(guiOutOfSwitch1, "%"))
{
str1 := guiOutOfSwitch1
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfSwitch1 := " variables." . var1
}
StringTrimLeft, guiOutOfSwitch1, guiOutOfSwitch1, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("y"))
{
guiOutOfSwitchY := 1
guiOutOfSwitch2 := A_LoopField
if (InStr(guiOutOfSwitch2, "%"))
{
str1 := guiOutOfSwitch2
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfSwitch2 := " variables." . var1
}
StringTrimLeft, guiOutOfSwitch2, guiOutOfSwitch2, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("w"))
{
guiOutOfSwitchW := 1
guiOutOfSwitch3 := A_LoopField
if (InStr(guiOutOfSwitch3, "%"))
{
str1 := guiOutOfSwitch3
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfSwitch3 := " variables." . var1
}
StringTrimLeft, guiOutOfSwitch3, guiOutOfSwitch3, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("h"))
{
guiOutOfSwitchH := 1
guiOutOfSwitch4 := A_LoopField
if (InStr(guiOutOfSwitch4, "%"))
{
str1 := guiOutOfSwitch4
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfSwitch4 := " variables." . var1
}
StringTrimLeft, guiOutOfSwitch4, guiOutOfSwitch4, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("v"))
{
guiOutOfSwitchV := 1
guiOutOfSwitch5 := "" . Chr(34) . "" . "Gui" . GuiNumber . A_LoopField . "" . Chr(34) . ""
guiOutOfSwitch5Fix := "" . Chr(34) . "" . "" . A_LoopField . "" . Chr(34) . ""
StringTrimRight, guiOutOfSwitch5Fix, guiOutOfSwitch5Fix, 1
StringTrimLeft, guiOutOfSwitch5Fix, guiOutOfSwitch5Fix, 2
guiOutOfSwitch52 := A_LoopField
dynamicGuiSet := 1
if (InStr(guiOutOfSwitch5, "%"))
{
str1 := guiOutOfSwitch5
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfSwitch5 := " " . Chr(34) . "Gui" . GuiNumber . "" . Chr(34) . " + [variables." . var1 . "]"
guiOutOfSwitch5Fix := " + [variables." . var1 . "]"
}
else
{
StringTrimLeft, A_LoopFieldOutFixCnavas, A_LoopField, 1
guiOutOfSwitch5 := " " . "" . Chr(34) . "" . "Gui" . GuiNumber . A_LoopFieldOutFixCnavas . "" . Chr(34) . ""
}
StringTrimLeft, guiOutOfSwitch5, guiOutOfSwitch5, 1
StringTrimLeft, guiOutOfSwitch52, guiOutOfSwitch52, 1
isThereArecId := 0
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("g"))
{
guiOutOfSwitchG := 1
guiOutOfSwitch6 := A_LoopField
StringTrimLeft, guiOutOfSwitch6, guiOutOfSwitch6, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 2) = StrLower("on"))
{
guiOutOfSwitchOn := 1
}
}

switchId++


if (isThereArecId = 1)
{
guiOutOfSwitch5 := "" . Chr(34) . "" . "Gui" . GuiNumber . "Switch" . str(switchId) .  "" . Chr(34) . ""
guiOutOfSwitch5Fix := "" . Chr(34) . "" . "" . GuiNumber . "Switch" . str(switchId) .  "" . Chr(34) . ""
StringTrimRight, guiOutOfSwitch5Fix, guiOutOfSwitch5Fix, 1
StringTrimLeft, guiOutOfSwitch5Fix, guiOutOfSwitch5Fix, 1
}


if (guiOutOfSwitchOn = 1)
{
switchOut := "createToggleSwitch(Gui" . GuiNumber . ", " . guiOutOfSwitch5 . ", " . Chr(34) . "" . out5 . "" . Chr(34) . ", " . Chr(34) . "#2196F3" . Chr(34) . ", " . guiOutOfSwitch1 . ", " . guiOutOfSwitch2 . ", " . guiOutOfSwitch3 . ", " . guiOutOfSwitch4 . ", " . guiOutOfSwitch6 . " );`ndocument.getElementById('Gui" . GuiNumber . "" . guiOutOfSwitch5Fix . "').click();"
}
else
{
switchOut := "createToggleSwitch(Gui" . GuiNumber . ", " . guiOutOfSwitch5 . ", " . Chr(34) . "" . out5 . "" . Chr(34) . ", " . Chr(34) . "#2196F3" . Chr(34) . ", " . guiOutOfSwitch1 . ", " . guiOutOfSwitch2 . ", " . guiOutOfSwitch3 . ", " . guiOutOfSwitch4 . ", " . guiOutOfSwitch6 . " );"
}

;MsgBox, % rectangleOut

jsCode .= "`n" . switchOut . "`n"

}



if (out3 = "checkbox")
{




guiOutOfCheckboxNum := 0
guiOutOfCheckboxX := 0
guiOutOfCheckboxY := 0
guiOutOfCheckboxW := 0
guiOutOfCheckboxH := 0
guiOutOfCheckboxV := 0
guiOutOfCheckboxG := 0
guiOutOfCheckboxOn := "false"
Loop, 7
{
guiOutOfCheckbox%A_Index% := ""
}

guiOutOfCheckbox3 := "60"
guiOutOfCheckbox4 := "30"
isThereArecId := 1

dynamicGuiSet := 0
Loop, Parse, out4, " "
{
;MsgBox, |%A_LoopField%|

guiOutOfCheckboxNum++

if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("x"))
{
guiOutOfCheckboxX := 1
guiOutOfCheckbox1 := A_LoopField
if (InStr(guiOutOfCheckbox1, "%"))
{
str1 := guiOutOfCheckbox1
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfCheckbox1 := " variables." . var1
}
StringTrimLeft, guiOutOfCheckbox1, guiOutOfCheckbox1, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("y"))
{
guiOutOfCheckboxY := 1
guiOutOfCheckbox2 := A_LoopField
if (InStr(guiOutOfCheckbox2, "%"))
{
str1 := guiOutOfCheckbox2
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfCheckbox2 := " variables." . var1
}
StringTrimLeft, guiOutOfCheckbox2, guiOutOfCheckbox2, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("w"))
{
guiOutOfCheckboxW := 1
guiOutOfCheckbox3 := A_LoopField
if (InStr(guiOutOfCheckbox3, "%"))
{
str1 := guiOutOfCheckbox3
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfCheckbox3 := " variables." . var1
}
StringTrimLeft, guiOutOfCheckbox3, guiOutOfCheckbox3, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("h"))
{
guiOutOfCheckboxH := 1
guiOutOfCheckbox4 := A_LoopField
if (InStr(guiOutOfCheckbox4, "%"))
{
str1 := guiOutOfCheckbox4
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfCheckbox4 := " variables." . var1
}
StringTrimLeft, guiOutOfCheckbox4, guiOutOfCheckbox4, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("v"))
{
guiOutOfCheckboxV := 1
guiOutOfCheckbox5 := "" . Chr(34) . "" . "Gui" . GuiNumber . A_LoopField . "" . Chr(34) . ""
guiOutOfCheckbox5Fix := "" . Chr(34) . "" . "" . A_LoopField . "" . Chr(34) . ""
StringTrimRight, guiOutOfCheckbox5Fix, guiOutOfCheckbox5Fix, 1
StringTrimLeft, guiOutOfCheckbox5Fix, guiOutOfCheckbox5Fix, 2
guiOutOfCheckbox52 := A_LoopField
dynamicGuiSet := 1
if (InStr(guiOutOfCheckbox5, "%"))
{
str1 := guiOutOfCheckbox5
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfCheckbox5 := " " . Chr(34) . "Gui" . GuiNumber . "" . Chr(34) . " + [variables." . var1 . "]"
guiOutOfCheckbox5Fix := " + [variables." . var1 . "]"
}
else
{
StringTrimLeft, A_LoopFieldOutFixCnavas, A_LoopField, 1
guiOutOfCheckbox5 := " " . "" . Chr(34) . "" . "Gui" . GuiNumber . A_LoopFieldOutFixCnavas . "" . Chr(34) . ""
}
StringTrimLeft, guiOutOfCheckbox5, guiOutOfCheckbox5, 1
StringTrimLeft, guiOutOfCheckbox52, guiOutOfCheckbox52, 1
isThereArecId := 0
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("g"))
{
guiOutOfCheckboxG := 1
guiOutOfCheckbox6 := A_LoopField
StringTrimLeft, guiOutOfCheckbox6, guiOutOfCheckbox6, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 2) = StrLower("on"))
{
guiOutOfCheckboxOn := "true"
}
}

CheckboxId++


if (isThereArecId = 1)
{
guiOutOfCheckbox5 := "" . Chr(34) . "" . "Gui" . GuiNumber . "Checkbox" . str(CheckboxId) .  "" . Chr(34) . ""
guiOutOfCheckbox5Fix := "" . Chr(34) . "" . "" . GuiNumber . "Checkbox" . str(CheckboxId) .  "" . Chr(34) . ""
StringTrimRight, guiOutOfCheckbox5Fix, guiOutOfCheckbox5Fix, 1
StringTrimLeft, guiOutOfCheckbox5Fix, guiOutOfCheckbox5Fix, 1
}



CheckboxOut := "createCheckbox(Gui" . GuiNumber . ", " . guiOutOfCheckbox5 . ", " . Chr(34) . "" . out5 . "" . Chr(34) . ", " . guiOutOfCheckboxOn . ", " . guiOutOfCheckbox1 . ", " . guiOutOfCheckbox2 . ", " . guiOutOfCheckbox6 . " );"



jsCode .= "`n" . CheckboxOut . "`n"

}



if (out3 = "ide")
{




guiOutOfIDENum := 0
guiOutOfIDEX := 0
guiOutOfIDEY := 0
guiOutOfIDEW := 0
guiOutOfIDEH := 0
guiOutOfIDEV := 0
guiOutOfIDEG := 0
guiOutOfIDEL := 0
guiOutOfIDES := 0

Loop, 8
{
guiOutOfIDE%A_Index% := ""
}

guiOutOfIDE3 := "300"
guiOutOfIDE4 := "300"
guiOutOfIDE8 := "18"
isThereArecId := 1

dynamicGuiSet := 0
Loop, Parse, out4, " "
{
;MsgBox, |%A_LoopField%|

guiOutOfIDENum++

if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("x"))
{
guiOutOfIDEX := 1
guiOutOfIDE1 := A_LoopField
if (InStr(guiOutOfIDE1, "%"))
{
str1 := guiOutOfIDE1
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfIDE1 := " variables." . var1
}
StringTrimLeft, guiOutOfIDE1, guiOutOfIDE1, 1
}

if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("s"))
{
guiOutOfIDES := 1
guiOutOfIDE8 := A_LoopField
if (InStr(guiOutOfIDE8, "%"))
{
str1 := guiOutOfIDE8
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfIDE8 := " variables." . var1
}
StringTrimLeft, guiOutOfIDE8, guiOutOfIDE8, 1
}

if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("l"))
{
guiOutOfIDEL := 1
guiOutOfIDE7 := A_LoopField
if (InStr(guiOutOfIDE7, "%"))
{
str1 := guiOutOfIDE7
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfIDE7 := " variables." . var1
}
StringTrimLeft, guiOutOfIDE7, guiOutOfIDE7, 1
}

if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("y"))
{
guiOutOfIDEY := 1
guiOutOfIDE2 := A_LoopField
if (InStr(guiOutOfIDE2, "%"))
{
str1 := guiOutOfIDE2
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfIDE2 := " variables." . var1
}
StringTrimLeft, guiOutOfIDE2, guiOutOfIDE2, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("w"))
{
guiOutOfIDEW := 1
guiOutOfIDE3 := A_LoopField
if (InStr(guiOutOfIDE3, "%"))
{
str1 := guiOutOfIDE3
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfIDE3 := " variables." . var1
}
StringTrimLeft, guiOutOfIDE3, guiOutOfIDE3, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("h"))
{
guiOutOfIDEH := 1
guiOutOfIDE4 := A_LoopField
if (InStr(guiOutOfIDE4, "%"))
{
str1 := guiOutOfIDE4
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfIDE4 := " variables." . var1
}
StringTrimLeft, guiOutOfIDE4, guiOutOfIDE4, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("v"))
{
guiOutOfIDEV := 1
guiOutOfIDE5 := "" . Chr(34) . "" . "Gui" . GuiNumber . A_LoopField . "" . Chr(34) . ""
guiOutOfIDE5Fix := "" . Chr(34) . "" . "" . A_LoopField . "" . Chr(34) . ""
StringTrimRight, guiOutOfIDE5Fix, guiOutOfIDE5Fix, 1
StringTrimLeft, guiOutOfIDE5Fix, guiOutOfIDE5Fix, 2
guiOutOfIDE52 := A_LoopField
dynamicGuiSet := 1
if (InStr(guiOutOfIDE5, "%"))
{
str1 := guiOutOfIDE5
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfIDE5 := " " . Chr(34) . "Gui" . GuiNumber . "" . Chr(34) . " + [variables." . var1 . "]"
guiOutOfIDE5Fix := " + [variables." . var1 . "]"
}
else
{
StringTrimLeft, A_LoopFieldOutFixCnavas, A_LoopField, 1
guiOutOfIDE5 := " " . "" . Chr(34) . "" . "Gui" . GuiNumber . A_LoopFieldOutFixCnavas . "" . Chr(34) . ""
}
StringTrimLeft, guiOutOfIDE5, guiOutOfIDE5, 1
StringTrimLeft, guiOutOfIDE52, guiOutOfIDE52, 1
isThereArecId := 0
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("g"))
{
guiOutOfIDEG := 1
guiOutOfIDE6 := A_LoopField
StringTrimLeft, guiOutOfIDE6, guiOutOfIDE6, 1
}
}

IDEId++


if (isThereArecId = 1)
{
guiOutOfIDE5 := "" . Chr(34) . "" . "Gui" . GuiNumber . "IDE" . str(IDEId) .  "" . Chr(34) . ""
guiOutOfIDE5Fix := "" . Chr(34) . "" . "" . GuiNumber . "IDE" . str(IDEId) .  "" . Chr(34) . ""
StringTrimRight, guiOutOfIDE5Fix, guiOutOfIDE5Fix, 1
StringTrimLeft, guiOutOfIDE5Fix, guiOutOfIDE5Fix, 1
}

if (InStr(out5, "%"))
{
StringTrimRight, out5, out5, 1
StringTrimLeft, out5, out5, 1
out5 := "variables." . out5
}
else
{
out5 := "null"
}
if (guiOutOfIDE7 = "")
{
guiOutOfIDE7 := "autohotkey"
}


;AddIDE(parent, xPos, yPos, w, h, id, font, langName = "autohotkey", onChangeFunc, initialText = "")
IDEOut := "AddIDE(Gui" . GuiNumber . ", " . guiOutOfIDE1 . ", " . guiOutOfIDE2 . ", " . guiOutOfIDE3 . ", " . guiOutOfIDE4 . ", " . guiOutOfIDE5 . ", " . guiOutOfIDE8 . ", " . Chr(34) . "" . guiOutOfIDE7 . "" . Chr(34) . ", " . guiOutOfIDE6 . ",    " . out5 . "    );"



jsCode .= "`n" . IDEOut . "`n"

}


if (out3 = "dropdownlist")
{







guiOutOfDropDownListNum := 0
guiOutOfDropDownListX := 0
guiOutOfDropDownListY := 0
guiOutOfDropDownListW := 0
guiOutOfDropDownListH := 0
guiOutOfDropDownListV := 0
guiOutOfDropDownListG := 0
Loop, 7
{
guiOutOfDropDownList%A_Index% := ""
}
isThereArecId := 1

guiOutOfDropDownList3 := "150"
guiOutOfDropDownList4 := "30"

dynamicGuiSet := 0
Loop, Parse, out4, " "
{
;MsgBox, |%A_LoopField%|

guiOutOfDropDownListNum++

if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("x"))
{
guiOutOfDropDownListX := 1
guiOutOfDropDownList1 := A_LoopField
if (InStr(guiOutOfDropDownList1, "%"))
{
str1 := guiOutOfDropDownList1
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfDropDownList1 := " variables." . var1
}
StringTrimLeft, guiOutOfDropDownList1, guiOutOfDropDownList1, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("y"))
{
guiOutOfDropDownListY := 1
guiOutOfDropDownList2 := A_LoopField
if (InStr(guiOutOfDropDownList2, "%"))
{
str1 := guiOutOfDropDownList2
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfDropDownList2 := " variables." . var1
}
StringTrimLeft, guiOutOfDropDownList2, guiOutOfDropDownList2, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("w"))
{
guiOutOfDropDownListW := 1
guiOutOfDropDownList3 := A_LoopField
if (InStr(guiOutOfDropDownList3, "%"))
{
str1 := guiOutOfDropDownList3
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfDropDownList3 := " variables." . var1
}
StringTrimLeft, guiOutOfDropDownList3, guiOutOfDropDownList3, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("h"))
{
guiOutOfDropDownListH := 1
guiOutOfDropDownList4 := A_LoopField
if (InStr(guiOutOfDropDownList4, "%"))
{
str1 := guiOutOfDropDownList4
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfDropDownList4 := " variables." . var1
}
StringTrimLeft, guiOutOfDropDownList4, guiOutOfDropDownList4, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("v"))
{
guiOutOfDropDownListV := 1
guiOutOfDropDownList5 := "" . Chr(34) . "" . "Gui" . GuiNumber . A_LoopField . "" . Chr(34) . ""
guiOutOfDropDownList52 := A_LoopField
dynamicGuiSet := 1
if (InStr(guiOutOfDropDownList5, "%"))
{
str1 := guiOutOfDropDownList5
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfDropDownList5 := " " . Chr(34) . "Gui" . GuiNumber . "" . Chr(34) . " + [variables." . var1 . "]"

}
else
{
StringTrimLeft, A_LoopFieldOutFixCnavas, A_LoopField, 1
guiOutOfDropDownList5 := " " . "" . Chr(34) . "" . "Gui" . GuiNumber . A_LoopFieldOutFixCnavas . "" . Chr(34) . ""
}
StringTrimLeft, guiOutOfDropDownList5, guiOutOfDropDownList5, 1
StringTrimLeft, guiOutOfDropDownList52, guiOutOfDropDownList52, 1
isThereArecId := 0
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("g"))
{
guiOutOfDropDownListG := 1
guiOutOfDropDownList6 := A_LoopField
StringTrimLeft, guiOutOfDropDownList6, guiOutOfDropDownList6, 1
}
}

DropDownListId++


if (isThereArecId = 1)
{
guiOutOfDropDownList5 := "" . Chr(34) . "" . "Gui" . GuiNumber . "DropDownList" . str(DropDownListId) .  "" . Chr(34) . ""
}



DropDownListOut := "createCustomDropdown(Gui" . GuiNumber . ", " . guiOutOfDropDownList5 . ", " . Chr(34) . "" . out5 . "" . Chr(34) . ", " . Chr(34) . "#333333" . Chr(34) . ", " . guiOutOfDropDownList1 . ", " . guiOutOfDropDownList2 . ", " . guiOutOfDropDownList3 . ", " . guiOutOfDropDownList4 . ", " . guiOutOfDropDownList6 . " );"


;MsgBox, % rectangleOut

jsCode .= "`n" . DropDownListOut . "`n"

}


if (out3 = "iframe")
{







guiOutOfIframeNum := 0
guiOutOfIframeX := 0
guiOutOfIframeY := 0
guiOutOfIframeW := 0
guiOutOfIframeH := 0
guiOutOfIframeV := 0
guiOutOfIframeG := 0
Loop, 7
{
guiOutOfIframe%A_Index% := ""
}
isThereArecId := 1

guiOutOfIframe3 := "150"
guiOutOfIframe4 := "30"

dynamicGuiSet := 0
Loop, Parse, out4, " "
{
;MsgBox, |%A_LoopField%|

guiOutOfIframeNum++

if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("x"))
{
guiOutOfIframeX := 1
guiOutOfIframe1 := A_LoopField
if (InStr(guiOutOfIframe1, "%"))
{
str1 := guiOutOfIframe1
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfIframe1 := " variables." . var1
}
StringTrimLeft, guiOutOfIframe1, guiOutOfIframe1, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("y"))
{
guiOutOfIframeY := 1
guiOutOfIframe2 := A_LoopField
if (InStr(guiOutOfIframe2, "%"))
{
str1 := guiOutOfIframe2
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfIframe2 := " variables." . var1
}
StringTrimLeft, guiOutOfIframe2, guiOutOfIframe2, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("w"))
{
guiOutOfIframeW := 1
guiOutOfIframe3 := A_LoopField
if (InStr(guiOutOfIframe3, "%"))
{
str1 := guiOutOfIframe3
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfIframe3 := " variables." . var1
}
StringTrimLeft, guiOutOfIframe3, guiOutOfIframe3, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("h"))
{
guiOutOfIframeH := 1
guiOutOfIframe4 := A_LoopField
if (InStr(guiOutOfIframe4, "%"))
{
str1 := guiOutOfIframe4
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfIframe4 := " variables." . var1
}
StringTrimLeft, guiOutOfIframe4, guiOutOfIframe4, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("v"))
{
guiOutOfIframeV := 1
guiOutOfIframe5 := "" . Chr(34) . "" . "Gui" . GuiNumber . A_LoopField . "" . Chr(34) . ""
guiOutOfIframe52 := A_LoopField
dynamicGuiSet := 1
if (InStr(guiOutOfIframe5, "%"))
{
str1 := guiOutOfIframe5
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfIframe5 := " " . Chr(34) . "Gui" . GuiNumber . "" . Chr(34) . " + [variables." . var1 . "]"

}
else
{
StringTrimLeft, A_LoopFieldOutFixCnavas, A_LoopField, 1
guiOutOfIframe5 := " " . Chr(34) . "" . "Gui" . GuiNumber . A_LoopFieldOutFixCnavas . "" . Chr(34) . ""
}
StringTrimLeft, guiOutOfIframe5, guiOutOfIframe5, 1
StringTrimLeft, guiOutOfIframe52, guiOutOfIframe52, 1
isThereArecId := 0
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("r"))
{
guiOutOfIframeG := 1
guiOutOfIframe6 := A_LoopField
StringTrimLeft, guiOutOfIframe6, guiOutOfIframe6, 1
}
}

IframeId++


if (isThereArecId = 1)
{
guiOutOfIframe5 := "" . Chr(34) . "" . "Gui" . GuiNumber . "Iframe" . str(IframeId) .  "" . Chr(34) . ""
}



IframeOut := "createCustomIframe(Gui" . GuiNumber . ", " . guiOutOfIframe5 . ", " . Chr(34) . "" . out5 . "" . Chr(34) . ", " . Chr(34) . "#333333" . Chr(34) . ", " . guiOutOfIframe1 . ", " . guiOutOfIframe2 . ", " . guiOutOfIframe3 . ", " . guiOutOfIframe4 . ", " . guiOutOfIframe6 . ");"



jsCode .= "`n" . IframeOut . "`n"

}




if (out3 = "player")
{







guiOutOfVideoNum := 0
guiOutOfVideoX := 0
guiOutOfVideoY := 0
guiOutOfVideoW := 0
guiOutOfVideoH := 0
guiOutOfVideoV := 0
guiOutOfVideoG := 0
Loop, 7
{
guiOutOfVideo%A_Index% := ""
}

guiOutOfVideo3 := "480"
guiOutOfVideo4 := "300"

isThereArecId := 1

dynamicGuiSet := 0
Loop, Parse, out4, " "
{
;MsgBox, |%A_LoopField%|

guiOutOfVideoNum++

if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("x"))
{
guiOutOfVideoX := 1
guiOutOfVideo1 := A_LoopField
if (InStr(guiOutOfVideo1, "%"))
{
str1 := guiOutOfVideo1
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfVideo1 := " variables." . var1
}
StringTrimLeft, guiOutOfVideo1, guiOutOfVideo1, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("y"))
{
guiOutOfVideoY := 1
guiOutOfVideo2 := A_LoopField
if (InStr(guiOutOfVideo2, "%"))
{
str1 := guiOutOfVideo2
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfVideo2 := " variables." . var1
}
StringTrimLeft, guiOutOfVideo2, guiOutOfVideo2, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("w"))
{
guiOutOfVideoW := 1
guiOutOfVideo3 := A_LoopField
if (InStr(guiOutOfVideo3, "%"))
{
str1 := guiOutOfVideo3
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfVideo3 := " variables." . var1
}
StringTrimLeft, guiOutOfVideo3, guiOutOfVideo3, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("h"))
{
guiOutOfVideoH := 1
guiOutOfVideo4 := A_LoopField
if (InStr(guiOutOfVideo4, "%"))
{
str1 := guiOutOfVideo4
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfVideo4 := " variables." . var1
}
StringTrimLeft, guiOutOfVideo4, guiOutOfVideo4, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("v"))
{
guiOutOfVideoV := 1
guiOutOfVideo5 := "" . Chr(34) . "" . "Gui" . GuiNumber . A_LoopField . "" . Chr(34) . ""
guiOutOfVideo52 := A_LoopField
dynamicGuiSet := 1
if (InStr(guiOutOfVideo5, "%"))
{
str1 := guiOutOfVideo5
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfVideo5 := " " . Chr(34) . "Gui" . GuiNumber . "" . Chr(34) . " + [variables." . var1 . "]"

}
else
{
StringTrimLeft, A_LoopFieldOutFixCnavas, A_LoopField, 1
guiOutOfVideo5 := " " . "" . Chr(34) . "" . "Gui" . GuiNumber . A_LoopFieldOutFixCnavas . "" . Chr(34) . ""
}
StringTrimLeft, guiOutOfVideo5, guiOutOfVideo5, 1
StringTrimLeft, guiOutOfVideo52, guiOutOfVideo52, 1
isThereArecId := 0
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("g"))
{
guiOutOfVideoG := 1
guiOutOfVideo6 := A_LoopField
StringTrimLeft, guiOutOfVideo6, guiOutOfVideo6, 1
}
}




; 1 url
; 2 yt url
; 3 base64
typeOfAvideo := 0

if (InStr(out5, "https://") or InStr(out5, "http://") or InStr(out5, "www.") or InStr(out5, "ftp://"))
{
    ; One or more of the specified substrings are found in out5
    ;MsgBox, URL or FTP link detected in out5: %out5%

typeOfAvideo := 1

if (InStr(out5, "https://www.youtube.com/")) or (InStr(out5, "https://youtu.be/"))
{

typeOfAvideo := 2
if (InStr(out5, "https://www.youtube.com/"))
{
gg := 0
}
else
{
str1 := Trim(out5)
s := StrSplit(str1, "https://youtu.be/", 2)
out5 := "https://www.youtube.com/watch?v=" . s
}


}



}
else
{
    ; None of the specified substrings are found in out5
    ;MsgBox, No URL or FTP link detected in out5: %out5%

typeOfAvideo := 3

}



videoId++

if (isThereArecId = 1)
{
guiOutOfVideo5 := "" . Chr(34) . "" . "Gui" . GuiNumber . "Video" . str(videoId) .  "" . Chr(34) . ""
}



if (typeOfAvideo = 1)
{
videoOut := "`nPlayVideoFromUrl(Gui" . GuiNumber . ", " . Chr(34) . "" . out5 . "" . Chr(34) . ", " . guiOutOfVideo5 . ", " . guiOutOfVideo1 . ", " . guiOutOfVideo2 . ", " . guiOutOfVideo3 . ", " . guiOutOfVideo4 . ", false)`n"

}
if (typeOfAvideo = 2)
{
videoOut := "`nPlayYoutubeVid(Gui" . GuiNumber . ", " . Chr(34) . "" . out5 . "" . Chr(34) . ", " . guiOutOfVideo5 . ", " . guiOutOfVideo1 . ", " . guiOutOfVideo2 . ", " . guiOutOfVideo3 . ", " . guiOutOfVideo4 . ", false)`n"

}
if (typeOfAvideo = 3)
{
videoOut := "`nPlayVideoFromBase64(Gui" . GuiNumber . ", base64VideoData" . str(base64ImageNum) . ", " . guiOutOfVideo5 . ", " . guiOutOfVideo1 . ", " . guiOutOfVideo2 . ", " . guiOutOfVideo3 . ", " . guiOutOfVideo4 . ", false)`n"

}



;MsgBox, % rectangleOut

jsCode .= "`n" . videoOut . "`n"

}







if (out3 = "rectangle") or (out3 = "circle")
{
ifWeUseCanvasThenAddUpdateFunc1 := "updateRectangle(id, param1, param2, param3, param4);`nredrawCanvas(); // Redraw the canvas with updated rectangles"
ifWeUseCanvasThenAddUpdateFunc2 := "updateRectangleColor(id, param1);`nredrawCanvas(); // Redraw the canvas with updated rectangles"
ifWeUseCanvas := 1

rectangleOut := ""




guiOutOfRectangleNum := 0
guiOutOfRectangleX := 0
guiOutOfRectangleY := 0
guiOutOfRectangleW := 0
guiOutOfRectangleH := 0
guiOutOfRectangleV := 0
guiOutOfRectangleG := 0
Loop, 6
{
guiOutOfRectangle%A_Index% := ""
}
dynamicGuiSet := 0
isThereArecId := 1
Loop, Parse, out4, " "
{
;MsgBox, |%A_LoopField%|

guiOutOfRectangleNum++

if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("x"))
{
guiOutOfRectangleX := 1
guiOutOfRectangle1 := A_LoopField
if (InStr(guiOutOfRectangle1, "%"))
{
str1 := guiOutOfRectangle1
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfRectangle1 := " variables." . var1
}
StringTrimLeft, guiOutOfRectangle1, guiOutOfRectangle1, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("y"))
{
guiOutOfRectangleY := 1
guiOutOfRectangle2 := A_LoopField
if (InStr(guiOutOfRectangle2, "%"))
{
str1 := guiOutOfRectangle2
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfRectangle2 := " variables." . var1
}
StringTrimLeft, guiOutOfRectangle2, guiOutOfRectangle2, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("w"))
{
guiOutOfRectangleW := 1
guiOutOfRectangle3 := A_LoopField
if (InStr(guiOutOfRectangle3, "%"))
{
str1 := guiOutOfRectangle3
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfRectangle3 := " variables." . var1
}
StringTrimLeft, guiOutOfRectangle3, guiOutOfRectangle3, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("h"))
{
guiOutOfRectangleH := 1
guiOutOfRectangle4 := A_LoopField
if (InStr(guiOutOfRectangle4, "%"))
{
str1 := guiOutOfRectangle4
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfRectangle4 := " variables." . var1
}
StringTrimLeft, guiOutOfRectangle4, guiOutOfRectangle4, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("v"))
{
guiOutOfRectangleV := 1
guiOutOfRectangle5 := "" . Chr(34) . "" . "Gui" . GuiNumber . A_LoopField . "" . Chr(34) . ""
guiOutOfRectangle52 := A_LoopField
dynamicGuiSet := 1
if (InStr(guiOutOfRectangle5, "%"))
{
str1 := guiOutOfRectangle5
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfRectangle5 := " " . Chr(34) . "Gui" . GuiNumber . "" . Chr(34) . " + [variables." . var1 . "]"
}
else
{
StringTrimLeft, A_LoopFieldOutFixCnavas, A_LoopField, 1
guiOutOfRectangle5 := " " . "" . Chr(34) . "" . "Gui" . GuiNumber . A_LoopFieldOutFixCnavas . "" . Chr(34) . ""
}
StringTrimLeft, guiOutOfRectangle5, guiOutOfRectangle5, 1
StringTrimLeft, guiOutOfRectangle52, guiOutOfRectangle52, 1
isThereArecId := 0
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("g"))
{
guiOutOfRectangleG := 1
guiOutOfRectangle6 := A_LoopField
StringTrimLeft, guiOutOfRectangle6, guiOutOfRectangle6, 1
}
}

rectangleId++


if (isThereArecId = 1)
{
guiOutOfRectangle5 := "" . Chr(34) . "" . "Gui1Rectangle" . str(switchId) .  "" . Chr(34) . ""
}



if (out3 = "circle")
{



rectangleOut := "// draw a circle dont look that is says drawRoundedRectangle look at the 6th parameter in function its for rounding the rectangle and since we are rounding it to the half of the width of the rectangle it will look like a circle`nrectangles.push(drawRoundedRectangle(ctx, " . guiOutOfRectangle1 . ", " . guiOutOfRectangle2 . ", " . guiOutOfRectangle3 . ", " . guiOutOfRectangle4 . ", Round(" . guiOutOfRectangle3 . " / 2), " . Chr(34) . "#E5E5E5" . Chr(34) . ", " . guiOutOfRectangle5 . "));"
}
else
{
rectangleOut := "rectangles.push(drawRoundedRectangle(ctx, " . guiOutOfRectangle1 . ", " . guiOutOfRectangle2 . ", " . guiOutOfRectangle3 . ", " . guiOutOfRectangle4 . ", 3, " . Chr(34) . "#E5E5E5" . Chr(34) . ", " . guiOutOfRectangle5 . "));"
}

;MsgBox, % rectangleOut

jsCode .= "`n" . rectangleOut . "`n"


}

if (out2 = "hide")
{

outJSshowNoMore := "Gui" . GuiNumber . ".style.display = " . Chr(34) . "none" . Chr(34) . ";"

jsCode .= "`n" . outJSshowNoMore . "`n"

}

if (out2 = "show") or (out2 = "move")
{



if (Trim(out3) = "")
{

outJSshowNoMore := "Gui" . GuiNumber . ".style.display = " . Chr(34) . "block" . Chr(34) . ";"

jsCode .= "`n" . outJSshowNoMore . "`n"

}
else
{

guiOutOfShowX := 0
guiOutOfShowY := 0
guiOutOfShowW := 0
guiOutOfShowH := 0
guiOutOfShowRound := "0"

boderinGuiYes := "Gui" . GuiNumber . ".style.border = " . Chr(34) . "2px solid white" . Chr(34) . ";"
boderinGuiYesCan := "canvas.style.border = " . Chr(34) . "2px solid white" . Chr(34) . ";"
Loop, 4
{
guiOutOfShow%A_Index% := ""
}
Loop, Parse, out3, " "
{
if (SubStr(Trim(StrLower(A_LoopField)), 1, 7) = StrLower("-border"))
{
boderinGuiYes := "Gui" . GuiNumber . ".style.border = " . Chr(34) . "" . Chr(34) . ";"
boderinGuiYesCan := "canvas.style.border = " . Chr(34) . "" . Chr(34) . ";"
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 12) = StrLower("+WebsiteMode"))
{
isFullScren := 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("x"))
{
guiOutOfShowX := 1
guiOutOfShow1 := A_LoopField
if (InStr(guiOutOfShow1, "%"))
{
str1 := guiOutOfShow1
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfShow1 := " " . Chr(34) . Chr(34) . " + variables." . var1 . " + " . Chr(34) . ""
}
StringTrimLeft, guiOutOfShow1, guiOutOfShow1, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("y"))
{
guiOutOfShowY := 1
guiOutOfShow2 := A_LoopField
if (InStr(guiOutOfShow2, "%"))
{
str1 := guiOutOfShow2
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfShow2 := " " . Chr(34) . Chr(34) . " + variables." . var1 . " + " . Chr(34) . ""
}
StringTrimLeft, guiOutOfShow2, guiOutOfShow2, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("w"))
{
guiOutOfShowW := 1
guiOutOfShow3 := A_LoopField
if (InStr(guiOutOfShow3, "%"))
{
str1 := guiOutOfShow3
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfShow3 := " " . Chr(34) . Chr(34) . " + variables." . var1 . " + " . Chr(34) . ""
}
StringTrimLeft, guiOutOfShow3, guiOutOfShow3, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("h"))
{
guiOutOfShowH := 1
guiOutOfShow4 := A_LoopField
if (InStr(guiOutOfShow4, "%"))
{
str1 := guiOutOfShow4
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfShow4 := " " . Chr(34) . Chr(34) . " + variables." . var1 . " + " . Chr(34) . ""
}
StringTrimLeft, guiOutOfShow4, guiOutOfShow4, 1
}


if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("r"))
{

guiOutOfShowRound := A_LoopField
StringTrimLeft, guiOutOfShowRound, guiOutOfShowRound, 1


if (InStr(guiOutOfShowRound, "%"))
{
str1 := guiOutOfShowRound
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfShowRound := "" . Chr(34) . " + variables." . var1 . " + " . Chr(34) . "px"

}
else
{
guiOutOfButton9 := guiOutOfButton9 . "px"
}

}

}

if (guiOutOfShowX = 1)
{
jsCode01 := "Gui" . GuiNumber . ".style.left = " . Chr(34) . "" . guiOutOfShow1 . "px" . Chr(34) . ";"
}
else
{
jsCode01 := "Gui" . GuiNumber . ".style.left = (window.innerWidth - parseInt(Gui" . GuiNumber . ".style.width)) / 2 + " . Chr(34) . "px" . Chr(34) . ";"
}

if (guiOutOfShowY = 1)
{
jsCode02 := "Gui" . GuiNumber . ".style.top = " . Chr(34) . "" . guiOutOfShow2 . "px" . Chr(34) . ";"
}
else
{
jsCode02 := "Gui" . GuiNumber . ".style.top = (window.innerHeight - parseInt(Gui" . GuiNumber . ".style.height)) / 2 + " . Chr(34) . "px" . Chr(34) . ";"
}









if (guiOutOfShowX = 1)
{
jsCode01Canvas := "canvas.style.left = " . Chr(34) . "" . guiOutOfShow1 . "px" . Chr(34) . ";"
}
else
{
jsCode01Canvas := "canvas.style.left = (window.innerWidth - canvas.width) / 2 + " . Chr(34) . "px" . Chr(34) . ";"
}

if (guiOutOfShowY = 1)
{
jsCode02Canvas := "canvas.style.top = " . Chr(34) . "" . guiOutOfShow2 . "px" . Chr(34) . ";"
}
else
{
jsCode02Canvas := "canvas.style.top = (window.innerHeight - canvas.height) / 2 + " . Chr(34) . "px" . Chr(34) . ";"
}

if (isFullScren = 1)
{
isFullScrenOnce++
if (isFullScrenOnce = 1)
{
FullScrenFixCode := "document.documentElement.setAttribute(" . Chr(34) . "style" . Chr(34) . ", " . Chr(34) . "padding: 0; margin: 0;" . Chr(34) . ");`ndocument.head.setAttribute(" . Chr(34) . "style" . Chr(34) . ", " . Chr(34) . "padding: 0; margin: 0;" . Chr(34) . ");`ndocument.body.setAttribute(" . Chr(34) . "style" . Chr(34) . ", " . Chr(34) . "overflow-x: hidden;padding: 0; margin: 0;" . Chr(34) . ");"
}
else
{
FullScrenFixCode := "`n"
}

}
else
{
FullScrenFixCode := "`n"
}


;MsgBox, % weUseCnanvasAtALL
if (weUseCnanvasAtALL = 1)
{
varOutJsCanvasFixTranspernat := "Gui1.style.backgroundColor = " . Chr(34) . "transparent" . Chr(34) . ";`nGui1.style.zIndex = " . Chr(34) . "5" . Chr(34) . ";"


if (isFullScren = 1)
{
jsCode0 := "`nGui" . GuiNumber . ".style.position = " . Chr(34) . "absolute" . Chr(34) . ";`nGui" . GuiNumber . ".style.width = window.innerWidth + " . Chr(34) . "px" . Chr(34) . "; // Set the width`nGui" . GuiNumber . ".style.height = " . Chr(34) . "" . guiOutOfShow4 . "px" . Chr(34) . "; // Set the height`nGui" . GuiNumber . ".style.color = " . Chr(34) . "white" . Chr(34) . ";`nGui" . GuiNumber . ".style.fontSize = " . Chr(34) . "15px" . Chr(34) . ";`nGui" . GuiNumber . ".style.padding = " . Chr(34) . "0px" . Chr(34) . ";`nGui" . GuiNumber . ".style.borderRadius = " . Chr(34) . "" . guiOutOfShowRound . "px" . Chr(34) . ";`nGui" . GuiNumber . ".style.fontFamily = " . Chr(34) . "" . fontName . ", sans-serif" . Chr(34) . "; // Specify your desired font here`nGui" . GuiNumber . ".style.zIndex = " . Chr(34) . "" . GuiNumber . "0" . Chr(34) . ";`n`n`n" . varOutJsCanvasFixTranspernat . "`n`ndocument.body.appendChild(Gui" . GuiNumber . "); // Append the GUI window to the body`nGui" . GuiNumber . ".style.display = " . Chr(34) . "block" . Chr(34) . ";`n"
}
else
{
jsCode0 := "`nGui" . GuiNumber . ".style.position = " . Chr(34) . "absolute" . Chr(34) . ";`nGui" . GuiNumber . ".style.width = " . Chr(34) . "" . guiOutOfShow3 . "px" . Chr(34) . "; // Set the width`nGui" . GuiNumber . ".style.height = " . Chr(34) . "" . guiOutOfShow4 . "px" . Chr(34) . "; // Set the height`nGui" . GuiNumber . ".style.color = " . Chr(34) . "white" . Chr(34) . ";`nGui" . GuiNumber . ".style.fontSize = " . Chr(34) . "15px" . Chr(34) . ";`nGui" . GuiNumber . ".style.borderRadius = " . Chr(34) . "" . guiOutOfShowRound . "px" . Chr(34) . ";`nGui" . GuiNumber . ".style.padding = " . Chr(34) . "0px" . Chr(34) . ";`n" . boderinGuiYes . "`nGui" . GuiNumber . ".style.zIndex = " . Chr(34) . "" . GuiNumber . "0" . Chr(34) . ";`nGui" . GuiNumber . ".style.fontFamily = " . Chr(34) . "" . fontName . ", sans-serif" . Chr(34) . "; // Specify your desired font here`n`n// Calculate center position`n" . jsCode01 . "`n" . jsCode02 . "`n`n`n" . varOutJsCanvasFixTranspernat . "`n`ndocument.body.appendChild(Gui" . GuiNumber . "); // Append the GUI window to the body`nGui" . GuiNumber . ".style.display = " . Chr(34) . "block" . Chr(34) . ";`n"
}



}
else
{

if (isFullScren = 1)
{
jsCode0 := "`nGui" . GuiNumber . ".style.position = " . Chr(34) . "absolute" . Chr(34) . ";`nGui" . GuiNumber . ".style.width = window.innerWidth + " . Chr(34) . "px" . Chr(34) . "; // Set the width`nGui" . GuiNumber . ".style.height = " . Chr(34) . "" . guiOutOfShow4 . "px" . Chr(34) . "; // Set the height`nGui" . GuiNumber . ".style.background = " . Chr(34) . "" . guiColorShow . "" . Chr(34) . ";`nGui" . GuiNumber . ".style.backgroundColor = " . Chr(34) . "" . guiColorShow . "" . Chr(34) . ";`nGui" . GuiNumber . ".style.color = " . Chr(34) . "white" . Chr(34) . ";`nGui" . GuiNumber . ".style.fontSize = " . Chr(34) . "15px" . Chr(34) . ";`nGui" . GuiNumber . ".style.padding = " . Chr(34) . "0px" . Chr(34) . ";`nGui" . GuiNumber . ".style.borderRadius = " . Chr(34) . "" . guiOutOfShowRound . "px" . Chr(34) . ";`nGui" . GuiNumber . ".style.fontFamily = " . Chr(34) . "" . fontName . ", sans-serif" . Chr(34) . "; // Specify your desired font here`nGui" . GuiNumber . ".style.zIndex = " . Chr(34) . "" . GuiNumber . "0" . Chr(34) . ";`n`n`n" . varOutJsCanvasFixTranspernat . "`n`ndocument.body.appendChild(Gui" . GuiNumber . "); // Append the GUI window to the body`nGui" . GuiNumber . ".style.display = " . Chr(34) . "block" . Chr(34) . ";`n"
}
else
{
jsCode0 := "`nGui" . GuiNumber . ".style.position = " . Chr(34) . "absolute" . Chr(34) . ";`nGui" . GuiNumber . ".style.width = " . Chr(34) . "" . guiOutOfShow3 . "px" . Chr(34) . "; // Set the width`nGui" . GuiNumber . ".style.height = " . Chr(34) . "" . guiOutOfShow4 . "px" . Chr(34) . "; // Set the height`nGui" . GuiNumber . ".style.background = " . Chr(34) . "" . guiColorShow . "" . Chr(34) . ";`nGui" . GuiNumber . ".style.backgroundColor = " . Chr(34) . "" . guiColorShow . "" . Chr(34) . ";`nGui" . GuiNumber . ".style.color = " . Chr(34) . "white" . Chr(34) . ";`nGui" . GuiNumber . ".style.fontSize = " . Chr(34) . "15px" . Chr(34) . ";`nGui" . GuiNumber . ".style.borderRadius = " . Chr(34) . "" . guiOutOfShowRound . "px" . Chr(34) . ";`nGui" . GuiNumber . ".style.padding = " . Chr(34) . "0px" . Chr(34) . ";`n" . boderinGuiYes . "`nGui" . GuiNumber . ".style.fontFamily = " . Chr(34) . "" . fontName . ", sans-serif" . Chr(34) . "; // Specify your desired font here`nGui" . GuiNumber . ".style.zIndex = " . Chr(34) . "" . GuiNumber . "0" . Chr(34) . ";`n`n// Calculate center position`n" . jsCode01 . "`n" . jsCode02 . "`n`n`n" . varOutJsCanvasFixTranspernat . "`n`ndocument.body.appendChild(Gui" . GuiNumber . "); // Append the GUI window to the body`nGui" . GuiNumber . ".style.display = " . Chr(34) . "block" . Chr(34) . ";`n"
}

}

if (isFullScren = 1)
{
jsCode0Canvas := "`n`n// Create a canvas element dynamically`ncanvas = document.createElement(" . Chr(34) . "canvas" . Chr(34) . ");`ncanvas.id = " . Chr(34) . "canvasId" . Chr(34) . "; // Assign ID to the canvas element`ncanvas.style.background = " . Chr(34) . "" . guiColorShow . "" . Chr(34) . ";`ncanvas.width = window.innerWidth;`ncanvas.height = " . Chr(34) . "" . guiOutOfShow4 . "" . Chr(34) . "; // Set the height`ncanvas.style.borderRadius = " . Chr(34) . "" . guiOutOfShowRound . "px" . Chr(34) . ";`ncanvas.style.backgroundColor = " . Chr(34) . "" . guiColorShow . "" . Chr(34) . "; // Set background color`n`n// Get the 2D rendering context`nctx = canvas.getContext(" . Chr(34) . "2d" . Chr(34) . ");`n`n// Center the canvas`ncanvas.style.position = " . Chr(34) . "absolute" . Chr(34) . ";`n`n`n`n// Append the canvas to the body`ndocument.body.appendChild(canvas);`n`n// Array to store information about rectangles`nrectangles = [];`n"
}
else
{
jsCode0Canvas := "`n`n// Create a canvas element dynamically`ncanvas = document.createElement(" . Chr(34) . "canvas" . Chr(34) . ");`ncanvas.id = " . Chr(34) . "canvasId" . Chr(34) . "; // Assign ID to the canvas element`ncanvas.style.background = " . Chr(34) . "" . guiColorShow . "" . Chr(34) . ";`ncanvas.width = " . Chr(34) . "" . guiOutOfShow3 . "" . Chr(34) . "; // Set the width`ncanvas.height = " . Chr(34) . "" . guiOutOfShow4 . "" . Chr(34) . "; // Set the height`ncanvas.style.borderRadius = " . Chr(34) . "" . guiOutOfShowRound . "px" . Chr(34) . ";`n" . boderinGuiYesCan . "`ncanvas.style.backgroundColor = " . Chr(34) . "" . guiColorShow . "" . Chr(34) . "; // Set background color`n`n// Get the 2D rendering context`nctx = canvas.getContext(" . Chr(34) . "2d" . Chr(34) . ");`n`n// Center the canvas`ncanvas.style.position = " . Chr(34) . "absolute" . Chr(34) . ";`n" . jsCode01Canvas . "`n" . jsCode02Canvas . "`n`n`n// Append the canvas to the body`ndocument.body.appendChild(canvas);`n`n// Array to store information about rectangles`nrectangles = [];`n"
}

if (guiOutOfShow3 != "")
{
jsCode01CanvasW := "canvas.width = " . Chr(34) . "" . guiOutOfShow3 . "" . Chr(34) . "; // Set the width"
}

if (guiOutOfShow4 != "")
{
jsCode01CanvasH := "canvas.height = " . Chr(34) . "" . guiOutOfShow4 . "" . Chr(34) . "; // Set the height"
}

jsCode0Canvas2 := "`n" . jsCode01CanvasW . "`n" . jsCode01CanvasH . "`n`n`n" . jsCode01Canvas . "`n" . jsCode02Canvas . "`n`n// Append the canvas to the body`ndocument.body.appendChild(canvas);`nredrawCanvas();`n"


if (weUseCnanvasAtALLEver = 1)
{
jsCode0 := jsCode0 . jsCode0Canvas2
}

if (weUseCnanvasAtALL = 1)
{
jsCode0 := jsCode0 . jsCode0Canvas
weUseCnanvasAtALL := 0
weUseCnanvasAtALLEver := 1
}




jsCode .= "`n" . jsCode0 . "`n" . FullScrenFixCode . "`n"
}
}
lineDone := 1
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 12) = StrLower("GuiControl, ")) or (SubStr(Trim(StrLower(A_LoopField)), 1, 11) = StrLower("GuiControl "))
{


str1 := A_LoopField

str1 := StrReplace(str1, ": ", ", ")

s := StrSplit(str1, "," , 1)
out1 := Trim(s)
;MsgBox, % out1

GuiNumberOld := GuiNumber
GuiNumber := RegExReplace(out1, "\\D", "")


if (GuiNumber = "")
{
GuiNumber := "1"

}


s := StrSplit(str1, ", ", 2)
out2 := StrLower(Trim(s))

s := StrSplit(str1, ", ", 3)
out3 := Trim(s)

s := StrSplit(str1, ", ", 4)
out4 := Trim(s)

s := StrSplit(str1, ", ", 5)
out5 := Trim(s)



if (InStr(out3, "%"))
{
str1 := out3
s := StrSplit(str1, "%", 2)
var1 := s

out3 := "" . Chr(34) . " + variables." . var1
}
else
{
out3 := out3 . Chr(34)
}



if (out2 = "move")
{
guiOutOfMoveX := 0
guiOutOfMoveY := 0
guiOutOfMoveW := 0
guiOutOfMoveH := 0
Loop, 4
{
guiOutOfMove%A_Index% := ""
}
Loop, Parse, out4, " "
{
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("x"))
{
guiOutOfMoveX := 1
guiOutOfMove1 := A_LoopField
if (InStr(guiOutOfMove1, "%"))
{
str1 := guiOutOfMove1
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfMove1 := " variables." . var1
}
StringTrimLeft, guiOutOfMove1, guiOutOfMove1, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("y"))
{
guiOutOfMoveY := 1
guiOutOfMove2 := A_LoopField
if (InStr(guiOutOfMove2, "%"))
{
str1 := guiOutOfMove2
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfMove2 := " variables." . var1
}
StringTrimLeft, guiOutOfMove2, guiOutOfMove2, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("w"))
{
guiOutOfMoveW := 1
guiOutOfMove3 := A_LoopField
if (InStr(guiOutOfMove3, "%"))
{
str1 := guiOutOfMove3
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfMove3 := " variables." . var1
}
StringTrimLeft, guiOutOfMove3, guiOutOfMove3, 1
}
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = StrLower("h"))
{
guiOutOfMoveH := 1
guiOutOfMove4 := A_LoopField
if (InStr(guiOutOfMove4, "%"))
{
str1 := guiOutOfMove4
s := StrSplit(str1, "%", 2)
var1 := s

guiOutOfMove4 := " variables." . var1
}
StringTrimLeft, guiOutOfMove4, guiOutOfMove4, 1
}
}



out0 := "GuiControl(" . Chr(34) . "" . out2 . "" . Chr(34) . ", " . Chr(34) . "Gui" . GuiNumber . "" . out3 . ", " . guiOutOfMove1 . ", " . guiOutOfMove2 . ", " . guiOutOfMove3 . ", " . guiOutOfMove4 . ");"
;MsgBox, % out0
}


if (out2 = "focus")
{
out0 := "GuiControl(" . Chr(34) . "" . out2 . "" . Chr(34) . ", " . Chr(34) . "Gui" . GuiNumber . "" . out3 . ");"
}


if (out2 = "text")
{

var1 := out4

if (InStr(var1, "%"))
{
str1 := var1
s := StrSplit(str1, "%", 2)
var1 := s

var1 := "variables." . var1
out0 := "GuiControl(" . Chr(34) . "" . out2 . "" . Chr(34) . ", " . Chr(34) . "Gui" . GuiNumber . "" . out3 . ", " . var1 . ");"
}
else
{
out0 := "GuiControl(" . Chr(34) . "" . out2 . "" . Chr(34) . ", " . Chr(34) . "Gui" . GuiNumber . "" . out3 . ", " . Chr(34) . "" . var1 . "" . Chr(34) . ");"
}

}

if (out2 = "textide")
{

var1 := out4

if (InStr(var1, "%"))
{
str1 := var1
s := StrSplit(str1, "%", 2)
var1 := s

var1 := "variables." . var1
out0 := "GuiControl(" . Chr(34) . "" . out2 . "" . Chr(34) . ", " . Chr(34) . "Gui" . GuiNumber . "" . out3 . ", " . var1 . ");"
}
else
{
out0 := "GuiControl(" . Chr(34) . "" . out2 . "" . Chr(34) . ", " . Chr(34) . "Gui" . GuiNumber . "" . out3 . ", " . Chr(34) . "" . var1 . "" . Chr(34) . ");"
}

}

if (out2 = "hide")
{
out0 := "GuiControl(" . Chr(34) . "" . out2 . "" . Chr(34) . ", " . Chr(34) . "Gui" . GuiNumber . "" . out3 . ");"
}

if (out2 = "show")
{
out0 := "GuiControl(" . Chr(34) . "" . out2 . "" . Chr(34) . ", " . Chr(34) . "Gui" . GuiNumber . "" . out3 . ");"
}

if (out2 = "disable")
{
out0 := "GuiControl(" . Chr(34) . "" . out2 . "" . Chr(34) . ", " . Chr(34) . "Gui" . GuiNumber . "" . out3 . ");"
}

if (out2 = "destroy")
{
out0 := "GuiControl(" . Chr(34) . "" . out2 . "" . Chr(34) . ", " . Chr(34) . "Gui" . GuiNumber . "" . out3 . ");"
}

if (out2 = "enable")
{
out0 := "GuiControl(" . Chr(34) . "" . out2 . "" . Chr(34) . ", " . Chr(34) . "Gui" . GuiNumber . "" . out3 . ");"
}

if (out2 = "picture")
{
out0 := "GuiControl(" . Chr(34) . "" . out2 . "" . Chr(34) . ", " . Chr(34) . "Gui" . GuiNumber . "" . out3 . ", " . Chr(34) . "" . out4 . "" . Chr(34) . ");"
}

if (out2 = "font")
{

if (InStr(out4, "s"))
{
out2 := "font"
var1 := out4
StringTrimLeft, var1, var1, 1
if (InStr(var1, "%"))
{
str1 := var1
s := StrSplit(str1, "%", 2)
var1 := s

var1 := "variables." . var1
out0 := "GuiControl(" . Chr(34) . "" . out2 . "" . Chr(34) . ", " . Chr(34) . "Gui" . GuiNumber . "" . out3 . ", " . var1 . ");"
}
else
{
out0 := "GuiControl(" . Chr(34) . "" . out2 . "" . Chr(34) . ", " . Chr(34) . "Gui" . GuiNumber . "" . out3 . ", " . var1 . ");"
}
}
if (InStr(out4, "c"))
{
out2 := "color"
var1 := out4
StringTrimLeft, var1, var1, 1

if (InStr(var1, "%"))
{
str1 := var1
s := StrSplit(str1, "%", 2)
var1 := s

var1 := "variables." . var1

var1 := "" . Chr(34) . "#" . Chr(34) . " + " . var1
out0 := "GuiControl(" . Chr(34) . "" . out2 . "" . Chr(34) . ", " . Chr(34) . "Gui" . GuiNumber . "" . out3 . ", " . var1 . ");"
}
else
{
var1 := "#" . var1
out0 := "GuiControl(" . Chr(34) . "" . out2 . "" . Chr(34) . ", " . Chr(34) . "Gui" . GuiNumber . "" . out3 . ", " . Chr(34) . "" . var1 . "" . Chr(34) . ");"
}
}




}
out0 := StrReplace(out0, Chr(44) . Chr(32) . Chr(44) . Chr(32), "")
jsCode .= out0 . "`n"

lineDone := 1
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 8) = StrLower("Random, "))
{
sstr1 := A_LoopField

s := StrSplit(sstr1, ",", 2)
out00 := s
s := StrSplit(sstr1, ",", 3)
out11 := s
s := StrSplit(sstr1, ",", 4)
out22 := s

;MsgBox, % out2
out00 := Trim(out00)
out11 := Trim(out11)
out22 := Trim(out22)


line00 := transpileVariables(out00, functionNames)
line11 := transpileVariables(out11, functionNames)
line22 := transpileVariables(out22, functionNames)
;MsgBox, % line
var1 := line00 . " = getRandomNumber(" . line11 . ", " . line22 . ")"
;MsgBox, % var1
lineDone := 1
jsCode .= var1 . "`n"

}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 7) = "gosub, ")
{

;MsgBox, % A_LoopField


sstr1 := A_LoopField

s := StrSplit(sstr1, ",", 2)
out1 := s

out1 := Trim(out1)

out2 := "await " . out1 . "()"

;MsgBox, % out2
lineDone := 1
jsCode .= out2 . "`n"

}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 10) = "settimer, ")
{

sstr1 := A_LoopField

s := StrSplit(sstr1, ",", 2)
out1 := Trim(s)

s := StrSplit(sstr1, ",", 3)
out2 := Trim(s)

;~ MsgBox, |%out1%|
;~ MsgBox, |%out2%|


myVar := out2

if (RegExReplace(myVar, "^\\d+(\\.\\d+)?$", "") = "")
{
    ;MsgBox, % "The variable is a number."
out3 := "SetTimer(" . out1 . ", " . out2 . ")"

}
else
{

if (StrLower(out2) = "off")
{
out2 := "Off"
}
else
{
out2 := "On"
}

;MsgBox, % "The variable is not a number."
out3 := "SetTimer(" . out1 . ", " . Chr(34) . out2 . Chr(34) . ")"
}
;MsgBox, % out3

jsCode .= out3 . "`n"


lineDone := 1
}
else if (RegExReplace(A_LoopField, "^\\w+:$", "") != A_LoopField) && (Trim(SubStr(A_LoopField, 0)) = ":") && (lineDone != 1)
{

;MsgBox, % A_LoopField



out1 := A_LoopField

out1 := Trim(out1)

StringTrimRight, out1, out1, 1

if (out1 == "OnKeyPress")
{

onKeyPress := "`n     document.addEventListener(" . Chr(34) . "keypress" . Chr(34) . ", function (event) {`n          // Code to execute when a key is pressed`n          console.log(" . Chr(34) . "Key pressed:" . Chr(34) . ", event.key);`n`n          OnKeyPress(event.key);`n          });`n"
forJsCode := "`n async function OnKeyPress(A_ThisHotkey)`n         {`n          variables.A_ThisHotkey = A_ThisHotkey`n"
jsCode .= forJsCode . "`n"
}
else
{
jsCode .= "async function " . out1 . "(A_GuiControl)`n{`n"
}
;MsgBox, % out1
;~ MsgBox, % see

lineDone := 1
}
else if (RegExReplace(A_LoopField, "^.*::$", "") = "") && (lineDone != 1)
{

if (A_LoopField != "")
{


out1 := A_LoopField
out1 := Trim(out1)

;MsgBox, % out1


HotKeyShift := 0
HotKeyAlt := 0
HotKeyCtrl := 0

Loop, Parse, out1
{
if (A_LoopField = "!")
{
HotKeyAlt := 1
}
if (A_LoopField = "+")
{
HotKeyShift := 1
}
if (A_LoopField = "^")
{
HotKeyCtrl := 1
}
}

HotKeylettersOnly := ""
HotKeylettersOnly := RegExReplace(out1, "[^a-zA-Z]", "")
HotKeylettersOnly := TitleCaseString(HotKeylettersOnly)

HotKeylettersOnlySTRLEN := 0
Loop, Parse, HotKeylettersOnly
{
HotKeylettersOnlySTRLEN++
}

if (HotKeylettersOnlySTRLEN != 1)
{
HotKeylettersOnly := "Arrow" . HotKeylettersOnly
}
;MsgBox, % HotKeylettersOnly
HotKeyNumOnly := ""
HotKeyNumOnly := RegExReplace(out1, "\\D", "")

if (HotKeyNumOnly = "")
{
out3 := HotKeylettersOnly
}
else
{
out3 := HotKeyNumOnly
}

if (HotKeyCtrl = 1)
{
out3 := "Ctrl+" . out3
}
if (HotKeyShift = 1)
{
out3 := "Shift+" . out3
}
if (HotKeyAlt = 1)
{
out3 := "Alt+" . out3
}

out4 := out3

out4 := StrReplace(out4, "+", "")

out3 := StrReplace(out3, "ArrowBackspace", "Backspace")
out4 := StrReplace(out4, "ArrowBackspace", "Backspace")
out3 := StrReplace(out3, "ArrowEnter", "Enter")
out4 := StrReplace(out4, "ArrowEnter", "Enter")

HotKeyCalledHotKyesOut := "`nMakeHotKey(" . Chr(34) . "" . out3 . "" . Chr(34) . ", function(hotkey) {`nHotKeyCalled" . out4 . "()`n});`n"

HotKeyCalledHotKyes .= HotKeyCalledHotKyesOut . "`n"

out2 := "`nasync function HotKeyCalled" . out4 . "()`n{`n// console.log(" . Chr(34) . "HotKeyCalled " . out4 . "" . Chr(34) . ")`n`n"
;MsgBox, % out2
jsCode .= out2 . "`n"
lineDone := 1
}
}
else if (A_LoopField == "Return")
{
jsCode .= "}" . "`n"
lineDone := 1
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 10) = "inputbox, ")
{
lineDone := 1
StringTrimLeft, out2, A_LoopField, 10

sstr1 := out2
s := StrSplit(sstr1, ",", 1)
ou1 := s
s := StrSplit(sstr1, ",", 2)
ou2 := s
s := StrSplit(sstr1, ",", 3)
ou3 := s

ou1 := Trim(ou1)
ou2 := Trim(ou2)
ou3 := Trim(ou3)

if (ou3 = "")
{
ou3 := ou2
}

var1 := "variables." . ou1 . " = prompt('" . ou3 . "');"
jsCode .= var1 . "`n"
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 17) = StrLower("StringTrimRight, "))
{
varr1 := StrSplit(A_LoopField, ",", 2)
varr2 := StrSplit(A_LoopField, ",", 3)
varr3 := StrSplit(A_LoopField, ",", 4)

outt1 := Trim(transpileVariables(varr1, functionNames))
outt2 := Trim(transpileVariables(varr2, functionNames))
outt3 := Trim(transpileVariables(varr3, functionNames))

out := outt1 . " = " . "StringTrimRight(" . outt2 . ", " . outt3 . ")"

lineDone := 1
jsCode .= out . "`n"
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 16) = StrLower("StringTrimLeft, "))
{
varr1 := StrSplit(A_LoopField, ",", 2)
varr2 := StrSplit(A_LoopField, ",", 3)
varr3 := StrSplit(A_LoopField, ",", 4)

outt1 := Trim(transpileVariables(varr1, functionNames))
outt2 := Trim(transpileVariables(varr2, functionNames))
outt3 := Trim(transpileVariables(varr3, functionNames))

out := outt1 . " = " . "StringTrimLeft(" . outt2 . ", " . outt3 . ")"

lineDone := 1
jsCode .= out . "`n"
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 7) = StrLower("Run, % "))
{
StringTrimLeft, sstr1, A_LoopField, 7

out1 := transpileVariables(sstr1, functionNames)
out2 := "window.open(" . out1 . ");"

jsCode .= out2 . "`n"
lineDone := 1
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 5) = StrLower("Run, ")) && (!(SubStr(Trim(StrLower(A_LoopField)), 1, 7) = StrLower("Run, % ")))
{
StringTrimLeft, sstr1, A_LoopField, 5

out1 := transpileLowVariables(sstr1)
out2 := "window.open(" . out1 . ");"

jsCode .= out2 . "`n"
lineDone := 1
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 6) = StrLower("Run, %"))
{
StringTrimLeft, sstr1, A_LoopField, 6

out1 := transpileLowVariables(sstr1)
out2 := "window.open(" . out1 . ");"

jsCode .= out2 . "`n"
lineDone := 1
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 13) = StrLower("MouseGetPos, "))
{
str1 := A_LoopField
StringTrimLeft, out2, A_LoopField, 13

;MsgBox, % out2
out2 := Trim(out2)

;MsgBox, |%out2%|

if (InStr(out2, ","))
{

str1 := out2

s := StrSplit(str1, ", ", 1)
out21 := s

s := StrSplit(str1, ", ", 2)
out22 := s



line1 := transpileVariables(out21, functionNames)
line2 := transpileVariables(out22, functionNames)
;MsgBox, % line

var1 := line1 . " = MouseGetPos(" . Chr(34) . "x" . Chr(34) . ")"
var2 := line2 . " = MouseGetPos(" . Chr(34) . "y" . Chr(34) . ")"

if (Trim(out21) = "")
{
jsCode .= var2 . "`n"
}
else
{
jsCode .= var1 . "`n" . var2 . "`n"
}
}
else
{
line := varTraspiler(out2, 0)
;MsgBox, % line
var1 := line . " = MouseGetPos(" . Chr(34) . "x" . Chr(34) . ")"
jsCode .= var1 . "`n"
}
lineDone := 1
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 11) = StrLower("SoundPlay, "))
{
str1 := A_LoopField
StringTrimLeft, out2, A_LoopField, 11

out2 := Trim(out2)

;MsgBox, |%out2%|


str1 := out2

if (InStr(str1, ","))
{

s := StrSplit(str1, ", ", 1)
out21 := StrLower(Trim(s))

s := StrSplit(str1, ", ", 2)
out22 := Trim(s)

if (InStr(out21, "volume"))
{
; volume
var1 := "SoundPlay(" . Chr(34) . "setVolume" . Chr(34) . ", " . out22 . ")"
}
else
{
; play
; in out22 we have a file path that has to converted to base64
base64soundNum++

base64out := Trim(out22)



base64sound := base64out

base64soundListDummy := "`nlet base64sound" . str(base64soundNum) . " = " . Chr(34) . "" . base64sound . "" . Chr(34) . "`n"

base64soundList .= base64soundListDummy

var1 := "SoundPlay(" . Chr(34) . "play" . Chr(34) . ", base64sound" . str(base64soundNum) . ")"
}

}
else
{
str1 := Trim(str1)
var1 := "SoundPlay(" . Chr(34) . str1 . Chr(34) . ")"
}

jsCode .= var1 . "`n"
lineDone := 1

}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 6) = StrLower("Icon, "))
{
StringTrimLeft, out2, A_LoopField, 6
jsCode .= "changeFavicon(" . Chr(34) . Trim(out2) . Chr(34) . ")" . "`n"
lineDone := 1
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 7) = StrLower("Title, "))
{
StringTrimLeft, str1, A_LoopField, 7
jsCode .= "document.title = " . transpileLowVariables(Trim(str1)) . "`n"
lineDone := 1
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 12) = "fileappend, ")
{

sstr1 := A_LoopField

s := StrSplit(sstr1, ",", 2)
out111111 := Trim(s)

s := StrSplit(sstr1, ",", 3)
out222222222222 := Trim(s)

out111111 := transpileLowVariables(out111111)
out222222222222 := transpileLowVariables(out222222222222)

out3 := "FileAppend(" . out111111 . ", " . out222222222222 . ")"

;MsgBox, % out3

jsCode .= out3 . "`n"

lineDone := 1
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 10) = StrLower("FileRead, "))
{

sstr1 := A_LoopField

s := StrSplit(sstr1, ", ", 2)
out1 := s

s := StrSplit(sstr1, ", ", 3)
out2 := s
out1 := Trim(out1)
out2 := Trim(out2)

out2Pure := out2
out2 := transpileLowVariables(out2)

numOfTextData++
;MsgBox, % out2

extractedText := StoreLocally("r", "HT-Playground-" . Trim(out2Pure))



extractedText := StrReplace(extractedText, Chr(96), Chr(92) . Chr(96))
extractedText := StrReplace(extractedText, "$", Chr(92) . Chr(36))
extractedText := StrReplace(extractedText, Chr(92), Chr(92) . Chr(92))

;MsgBox, % extractedText
tempTextData := "let textData" . str(numOfTextData) . " = " . Chr(96) . "" . str(extractedText) . "" . Chr(96) . ";"
;MsgBox, %tempTextData%

TextData .= tempTextData . "`n`n"

out3 := "variables." . out1 . " = " . "textData" . str(numOfTextData)

jsCode .= "`n" . out3 . "`n"
lineDone := 1
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 9) = StrLower("Sleep, % "))
{
StringTrimLeft, var1, A_LoopField, 9
var2 := transpileVariables(var1, functionNames)

out2 := "await sleep(" . var2 . ")"
jsCode .= out2 . "`n"
lineDone := 1
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 7) = StrLower("Sleep, ")) && (!(SubStr(Trim(StrLower(A_LoopField)), 1, 9) = StrLower("Sleep, % ")))
{
StringTrimLeft, var1, A_LoopField, 7
var2 := transpileVariables(var1, functionNames)

out2 := "await sleep(" . var2 . ")"
jsCode .= out2 . "`n"
lineDone := 1
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 7) = StrLower("Msgbox,")) && (!(SubStr(Trim(StrLower(A_LoopField)), 1, 10) = StrLower("Msgbox, % "))) && (InStr(A_LoopField, " % ")) && (CountCommasWithoutBacktick(A_LoopField))
{



sstr1 := A_LoopField

sstr1 := StrReplace(sstr1, "" . Chr(96) . ",", "|comasdhkbdsjvfesvyessfe6uw7igfweiugvseuvk|la|")


s := StrSplit(sstr1, ",", 2)
Options := s
Options := Trim(Options)


s := StrSplit(sstr1, ",", 3)
Title := s
Title := Trim(Title)


s := StrSplit(sstr1, ",", 4)
out2 := s

out2 := StrReplace(out2, " % ", "")

s := StrSplit(sstr1, ",", 5)
timeoutMsgbox := s
timeoutMsgbox := Trim(timeoutMsgbox)


s := StrSplit(sstr1, ",", 6)
toggleAwait := s
toggleAwait := Trim(toggleAwait)

out2 := StrReplace(out2, "|comasdhkbdsjvfesvyessfe6uw7igfweiugvseuvk|la|", "" . Chr(92) . ",")

;MsgBox, % out2
out2 := Trim(out2)

line := transpileVariables(out2, functionNames)
;MsgBox, % line

if (Title = "")
{
Title := " "
}
if (line = "")
{
line := " "
}
if (Options = "")
{
Options := 0
}
if (timeoutMsgbox = "")
{
timeoutMsgbox := 0
}


if (toggleAwait = "1") or (toggleAwait = "")
{
var1 := "await showCustomMessageBox({}," . Chr(34) . Title . Chr(34) . ", " . str(line) . ", " . str(Options) . ", " . str(timeoutMsgbox) . ")"
}
else
{
var1 := "showCustomMessageBox({}," . Chr(34) . Title . Chr(34) . ", " . str(line) . ", " . str(Options) . ", " . str(timeoutMsgbox) . ")"
}
;MsgBox, % var1
lineDone := 1
jsCode .= var1 . "`n"

}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 7) = StrLower("Msgbox,")) && (!(SubStr(Trim(StrLower(A_LoopField)), 1, 10) = StrLower("Msgbox, % "))) && (!(InStr(A_LoopField, " % "))) && (CountCommasWithoutBacktick(A_LoopField))
{



sstr1 := A_LoopField

sstr1 := StrReplace(sstr1, Chr(96) . ",", "|comasdhkbdsjvfesvyessfe6uw7igfweiugvseuvk|la|")


s := StrSplit(sstr1, ",", 2)
Options := s
Options := Trim(Options)


s := StrSplit(sstr1, ",", 3)
Title := s
Title := Trim(Title)

s := StrSplit(sstr1, ", ", 4)
var1 := s
numOfProcentSings := 0
;MsgBox, % var1
Loop, Parse, var1
{
if (A_LoopField = "%")
{
numOfProcentSings++
}
}
Loop, %numOfProcentSings%
{
; Find the position of the first occurrence of "%"
if (InStr(var1, "%"))
{
pos := InStr(var1, "%")

; Replace only the first occurrence of "%" with "|"
var1 := SubStr(var1, 1, pos - 1) . Chr(34) . " + variables." . SubStr(var1, pos + 1)
pos := InStr(var1, "%")
var1 := SubStr(var1, 1, pos - 1) . " + " . Chr(34) . SubStr(var1, pos + 1)
}
else
{
break
}
}

out2 := var1

out2 := Chr(34) . out2 . Chr(34)

s := StrSplit(sstr1, ",", 5)
timeoutMsgbox := s
timeoutMsgbox := Trim(timeoutMsgbox)


s := StrSplit(sstr1, ",", 6)
toggleAwait := s
toggleAwait := Trim(toggleAwait)

out2 := StrReplace(out2, "|comasdhkbdsjvfesvyessfe6uw7igfweiugvseuvk|la|", "" . Chr(92) . ",")

;MsgBox, % out2
out2 := Trim(out2)

line := out2
;MsgBox, % line

if (Title = "")
{
Title := " "
}
if (line = "")
{
line := " "
}
if (Options = "")
{
Options := 0
}
if (timeoutMsgbox = "")
{
timeoutMsgbox := 0
}


if (toggleAwait = "1") or (toggleAwait = "")
{
var1 := "await showCustomMessageBox({}," . Chr(34) . Title . Chr(34) . ", " . str(line) . ", " . str(Options) . ", " . str(timeoutMsgbox) . ")"
}
else
{
var1 := "showCustomMessageBox({}," . Chr(34) . Title . Chr(34) . ", " . str(line) . ", " . str(Options) . ", " . str(timeoutMsgbox) . ")"
}
;MsgBox, % var1
lineDone := 1
jsCode .= var1 . "`n"

}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 7) = StrLower("Msgbox,")) && (!(SubStr(Trim(StrLower(A_LoopField)), 1, 10) = StrLower("Msgbox, % "))) && (!(InStr(A_LoopField, " % "))) && (lineDone != 1) && (!(CountCommasWithoutBacktick(A_LoopField)))
{


ALoopField := StrReplace(A_LoopField, "" . Chr(96) . ",", "|comasdhkbdsjvfesvyessfe6uw7igfweiugvseuvk|la|")

StringTrimLeft, out2, ALoopField, 7


lineDone := 1


;MsgBox, % out2
out2 := Trim(out2)

var1 := out2

var1 := transpileLowVariables(out2)
;MsgBox % var1

;MsgBox % var1

out2 := StrReplace(out2, "|comasdhkbdsjvfesvyessfe6uw7igfweiugvseuvk|la|", "" . Chr(92) . ",")
out2 := Trim(out2)

Title := " "
Options := 0
timeoutMsgbox := 0


var1 := "await showCustomMessageBox({}," . Chr(34) . Title . Chr(34) . ", " . str(var1) . ", " . str(Options) . ", " . str(timeoutMsgbox) . ")"
jsCode .= var1 . "`n"


}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 9) = StrLower("Msgbox, %"))
{
lineDone := 1
StringTrimLeft, out2, A_LoopField, 9



;MsgBox, % out2
out2 := Trim(out2)
;MsgBox, % out2
line := transpileVariables(out2, functionNames)
;MsgBox, % line
var1 := "await showCustomMessageBox({}," . Chr(34) . " " . Chr(34) .  ", " . str(line) . ", " . "0" . ", " . "0." . ")"
;MsgBox, % var1
jsCode .= var1 . "`n"

}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 3) = StrLower("if "))
{
StringTrimLeft, var1, A_LoopField, 3

var2 := Trim(transpileVariables(var1, functionNames))
out := "if (" . var2 . ")"

lineDone := 1
jsCode .= out . "`n"
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 8) = StrLower("else if "))
{
StringTrimLeft, var1, A_LoopField, 8

var2 := Trim(transpileVariables(var1, functionNames))
out := "else if (" . var2 . ")"

lineDone := 1
jsCode .= out . "`n"
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 3) = StrLower("if("))
{
StringTrimLeft, var1, A_LoopField, 2

var2 := Trim(transpileVariables(var1, functionNames))
out := "if (" . var2 . ")"

lineDone := 1
jsCode .= out . "`n"
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 8) = StrLower("else if("))
{
StringTrimLeft, var1, A_LoopField, 7

var2 := Trim(transpileVariables(var1, functionNames))
out := "else if (" . var2 . ")"

lineDone := 1
jsCode .= out . "`n"
}
else if (SubStr(Trim(A_LoopField), 1, 7) = "return ")
{

StringTrimLeft, sstrFormReturn, A_LoopField, 7

var12312 := transpileVariables(sstrFormReturn, functionNames)
out := "return " . var12312

lineDone := 1
jsCode .= out . "`n"

}
else if (StrLower(A_LoopField) = "loop")
{
; infinity loops
haveWeEverUsedAloop := 1
lineDone := 1

var1 := "for (/* Normal Loop */ variables.A" . Chr(95) . "Index" . str(AindexcharLength) . " = 1; ; variables.A" . Chr(95) . "Index" . str(AindexcharLength) . "++)"
nothing := ""
AindexcharLengthStr := nothing . str(AindexcharLength) . nothing
theFixTextLoopNL := ""

jsCodeAcurlyBraceAddSomeVrasFixNL := 1
lineDone := 1
AHKcodeLoopfixa .= "nl|itsaersdtgtgfergsdgfsegdfsedAA|" . str(AindexcharLength) . "`n"
AHKcodeLoopfixa1 := "nl|itsaersdtgtgfergsdgfsegdfsedAA|" . str(AindexcharLength)
AindexcharLength++
jsCode .= AHKcodeLoopfixa1 . "`n" . var1 . "`n"

}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 6) = "loop, ") && (SubStr(Trim(StrLower(A_LoopField)), 1, 8) != "loop, % ") && (SubStr(Trim(StrLower(A_LoopField)), 1, 7) != "loop % ") && (SubStr(Trim(StrLower(A_LoopField)), 1, 11) != StrLower("Loop, Parse"))
{



sstr123 := A_LoopField
;MsgBox, % sstr123


StringTrimLeft, out2, sstr123, 6

;MsgBox % out2

;MsgBox, % out2
out2 := Trim(out2)


myVar := out2
lineYGI := transpileVariables(myVar, functionNames)
line := lineYGI
haveWeEverUsedAloop := 1
;MsgBox, % line


var1 := "for (/* Normal Loop */ variables.A" . Chr(95) . "Index" . str(AindexcharLength) . " = 1; variables.A" . Chr(95) . "Index" . str(AindexcharLength) . " <= " . line . "; variables.A" . Chr(95) . "Index" . str(AindexcharLength) . "++)"
nothing := ""
AindexcharLengthStr := nothing . str(AindexcharLength) . nothing
theFixTextLoopNL := ""

jsCodeAcurlyBraceAddSomeVrasFixNL := 1

AHKcodeLoopfixa .= "nl|itsaersdtgtgfergsdgfsegdfsedAA|" . str(AindexcharLength) . "`n"
AHKcodeLoopfixa1 := "nl|itsaersdtgtgfergsdgfsegdfsedAA|" . str(AindexcharLength)
AindexcharLength++
lineDone := 1
jsCode .= AHKcodeLoopfixa1 . "`n" . var1 . "`n"
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 8) = "loop, % ")
{
sstr123 := A_LoopField
;MsgBox, % sstr123


StringTrimLeft, out2, sstr123, 8

;MsgBox % out2

;MsgBox, % out2
out2 := Trim(out2)


myVar := out2
lineYGI := transpileVariables(myVar, functionNames)
line := lineYGI

;MsgBox, % line
var1 := "for (/* Normal Loop */ variables.A" . Chr(95) . "Index" . str(AindexcharLength) . " = 1; variables.A" . Chr(95) . "Index" . str(AindexcharLength) . " <= " . line . "; variables.A" . Chr(95) . "Index" . str(AindexcharLength) . "++)"
nothing := ""
AindexcharLengthStr := nothing . str(AindexcharLength) . nothing
theFixTextLoopNL := ""

jsCodeAcurlyBraceAddSomeVrasFixNL := 1
haveWeEverUsedAloop := 1
AHKcodeLoopfixa .= "nl|itsaersdtgtgfergsdgfsegdfsedAA|" . str(AindexcharLength) . "`n"
AHKcodeLoopfixa1 := "nl|itsaersdtgtgfergsdgfsegdfsedAA|" . str(AindexcharLength)
AindexcharLength++
lineDone := 1
jsCode .= AHKcodeLoopfixa1 . "`n" . var1 . "`n"
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 13) = StrLower("Loop, Parse, "))
{

var1 := A_LoopField
lineDone := 1
var1 := Trim(var1)
StringTrimLeft, var1, var1, 13

line1 := Trim(StrSplit(var1, ",", 1))

line1 := transpileVariables(line1, functionNames)
line2 := ""
line3 := ""
itemsOut := ""
line2 := Trim(StrSplit(var1, ",", 2))
line3 := Trim(StrSplit(var1, ",", 3))



if (InStr(var1, Chr(96) . ","))
{
line2 := Chr(34) . "," . Chr(34)
itemsOut := "var items" . str(AindexcharLength) . " = LoopParseFunc(" . line1 . ", " . line2 . ");"
}
else
{



if (line2 = "") && (line3 = "")
{
; nothing so only each char
itemsOut := "var items" . str(AindexcharLength) . " = LoopParseFunc(" . line1 . ");"
}

if (line2 != "") && (line3 = "")
{
if (InStr(line2, Chr(96)))
{
line2 := Chr(34) . line2 . Chr(34)
}
itemsOut := "var items" . str(AindexcharLength) . " = LoopParseFunc(" . line1 . ", " . line2 . ");"
}

if (line2 != "") && (line3 != "")
{
if (InStr(line2, Chr(96)))
{
line2 := Chr(34) . line2 . Chr(34)
}
if (InStr(line3, Chr(96)))
{
line3 := Chr(34) . line3 . Chr(34)
}

itemsOut := "var items" . str(AindexcharLength) . " = LoopParseFunc(" . line1 . ", " . line2 . ", " . line3 . ");"
}



itemsOut := StrReplace(itemsOut, Chr(96), Chr(92))



}



var1out := itemsOut . "`n" . "for (/* Loop Parse */ let A" . Chr(95) . "Index" . str(AindexcharLength) . " = 1; A" . Chr(95) . "Index" . str(AindexcharLength) . " <= items" . str(AindexcharLength) . ".length; A" . Chr(95) . "Index" . str(AindexcharLength) . "++)"



nothing := ""
AindexcharLengthStr := nothing . str(AindexcharLength) . nothing



theFixTextLoopLP := "variables.A" . Chr(95) . "Index" . str(AindexcharLength) . " = A" . Chr(95) . "Index" . str(AindexcharLength) . "`n" . "variables.A" . Chr(95) . "LoopField" . str(AindexcharLength) . " = items" . str(AindexcharLength) . "[A" . Chr(95) . "Index" . str(AindexcharLength) . " - 1];"



jsCodeAcurlyBraceAddSomeVrasFixLP := 1
haveWeEverUsedAloop := 1
AHKcodeLoopfixa .= "lp|itsaersdtgtgfergsdgfsegdfsedAA|" . str(AindexcharLength) . "`n"
AHKcodeLoopfixa1 := "lp|itsaersdtgtgfergsdgfsegdfsedAA|" . str(AindexcharLength)
AindexcharLength++
jsCode .= AHKcodeLoopfixa1 . "`n" . var1out . "`n"
}
else if (SubStr(A_LoopField, -1) = "++")
{
sstr123 := Trim(A_LoopField)
StringTrimRight, sstr123, sstr123, 2

sstr123 := Trim(transpileVariables(sstr123, functionNames))

out := sstr123 . " += 1"
lineDone := 1
jsCode .= out . "`n"
}
else if (SubStr(A_LoopField, -1) = "--")
{
sstr123 := Trim(A_LoopField)
StringTrimRight, sstr123, sstr123, 2

sstr123 := Trim(transpileVariables(sstr123, functionNames))

out := sstr123 . " -= 1"
lineDone := 1
jsCode .= out . "`n"
}
else if ((InStr(A_LoopField, " := ")) or (InStr(A_LoopField, " .= ")) or (InStr(A_LoopField, " += ")) or (InStr(A_LoopField, " -= ")) or (InStr(A_LoopField, " *= ")) && (lineDone = 0) && (!(SubStr(Trim(StrLower(A_LoopField)), 1, 1) = Chr(59))))
{
if (!(SubStr(Trim(StrLower(A_LoopField)), 1, 1) = Chr(59)))
{
lineDone := 1
sstr123 := A_LoopField

whatVarWeUse := ""
if (InStr(A_LoopField, " := "))
{
whatVarWeUse := " = "
}
if (InStr(A_LoopField, " .= "))
{
whatVarWeUse := " += "
}
if (InStr(A_LoopField, " += "))
{
whatVarWeUse := " += "
}
if (InStr(A_LoopField, " -= "))
{
whatVarWeUse := " -= "
}
if (InStr(A_LoopField, " *= "))
{
whatVarWeUse := " *= "
}




sstr123 := StrReplace(sstr123, ":=", "=")
sstr123 := StrReplace(sstr123, ".=", "=")
sstr123 := StrReplace(sstr123, "+=", "=")
sstr123 := StrReplace(sstr123, "-=", "=")
sstr123 := StrReplace(sstr123, "*=", "=")


var1avavavavva := Trim(StrSplit(sstr123, "=", 1))
var2avavavavva := Trim(StrSplit(sstr123, "=", 2))
;OutputDebug, ||||||||||||%var2%||||||||||||

varOUT1avavavavva := transpileVariables(var1avavavavva, functionNames)
varOUT2avavavavva := transpileVariables(var2avavavavva, functionNames)

out := varOUT1avavavavva . whatVarWeUse . varOUT2avavavavva


jsCode .= out . "`n"

}
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = Chr(59)) && (lineDone = 0)
{
StringTrimLeft, sstr123, A_LoopField, 1

sstr123 := "//" . sstr123
out := sstr123
lineDone := 1
jsCode .= out . "`n"
}
else if (SubStr(A_LoopField, 0) = ")") && (lineDone = 0)
{
AIndex := A_Index + 1
if (!(fixFuncSyntaxBugFixNum%AIndex% = "{"))
{



var1 := StrSplit(A_LoopField, "(", 1)

if (InStr(var1, "%"))
{



numOfCharsToTrimFuncFixRun := 0
Loop, Parse, var1
{
numOfCharsToTrimFuncFixRun++
}

StringTrimLeft, var2, A_LoopField, numOfCharsToTrimFuncFixRun

var12 := StrSplit(var1, "%", 1)
var13 := StrSplit(var1, "%", 2)
var1 := "funcs" . "[" . Chr(34) . var12 . Chr(34) . " + variables." . var13 . "]"

out := "await " . var1 . transpileVariables(var2, functionNames)
lineDone := 1
jsCode .= out . "`n"



}
else
{

numOfCharsToTrimFuncFixRun := 0
Loop, Parse, var1
{
numOfCharsToTrimFuncFixRun++
}

StringTrimLeft, var2, A_LoopField, numOfCharsToTrimFuncFixRun
out := "await " . var1 . transpileVariables(var2, functionNames)
lineDone := 1
jsCode .= out . "`n"
}
}
else
{

if (!((SubStr(StrLower(A_LoopField), 1, 4) = CheckIFandElsesss1) or (SubStr(StrLower(A_LoopField), 1, 3) = CheckIFandElsesss2) or (SubStr(StrLower(A_LoopField), 1, 5) = CheckIFandElsesss3) or (SubStr(StrLower(A_LoopField), 1, 4) = CheckIFandElsesss4) or (SubStr(StrLower(A_LoopField), 1, 9) = CheckIFandElsesss5) or (SubStr(StrLower(A_LoopField), 1, 8) = CheckIFandElsesss6) or (SubStr(StrLower(A_LoopField), 1, 10) = CheckIFandElsesss7) or (SubStr(StrLower(A_LoopField), 1, 9) = CheckIFandElsesss8) or (SubStr(StrLower(A_LoopField), 1, 5) = "loop,")))
{
; not a func



;OutputDebug, %A_LoopField%
sstr23IfFuncIn := A_LoopField



sstr23IfFuncInNAME := StrSplit(sstr23IfFuncIn, Chr(40), 1)




sstr23IfFuncIn := StrSplit(sstr23IfFuncIn, Chr(40), 2)
nothing := ""
sstr23IfFuncInALL := StrReplace(sstr23IfFuncIn, Chr(40), "")
sstr23IfFuncInALL := StrReplace(sstr23IfFuncInALL, Chr(41), "")
wasHereInfuncAndgetingVar1 := 0
theVarsPArmFormTheFunc := ""
if (sstr23IfFuncInALL != "")
{
Loop, Parse, sstr23IfFuncInALL, `,
{
wasHereInfuncAndgetingVar1 := 1
var1 := Trim(A_LoopField)
theVarsPArmFormTheFunc .= "variables." . var1 . " = " . var1 . "`n"
}
}
funcs .= "  " . "" . sstr23IfFuncInNAME . "" . ": " . sstr23IfFuncInNAME . "," . "`n"
doWeEvenDecAnyFuncHUH := 1
skipLeftCuleyForFuncPLS := 0
if (sstr23IfFuncInALL != "")
{
sstr234567 := "async function " . sstr23IfFuncInNAME . Chr(40) . sstr23IfFuncInALL . Chr(41) . "`n{`n" . theVarsPArmFormTheFunc
skipLeftCuleyForFuncPLS := 1
}
else
{
sstr234567 := "async function " . sstr23IfFuncInNAME . Chr(40) . sstr23IfFuncInALL . Chr(41) . ""
}


Loop, % sstr23IfFuncInNAMEnum
{

if (sstr23IfFuncInNAME%A_Index% = sstr23IfFuncInNAME)
{
var12312 := ""
if (sstr23IfFuncInALL != "")
{
Loop, Parse, sstr23IfFuncInALL, `,
{
wasHereInfuncAndgetingVar1 := 1
var1 := Trim(A_LoopField)

var12312 .= transpileVariables(var1, functionNames) . ", "

}
StringTrimRight, var12312, var12312, 2
}


if (wasHereInfuncAndgetingVar1 = 0)
{
sstr2345678 := sstr23IfFuncInNAME . Chr(40) . Chr(41)
}
else
{
sstr2345678 := sstr23IfFuncInNAME . Chr(40) . var12312 . Chr(41)
}
lineDone := 1

}


}

sstr23IfFuncInNAMEnum++
sstr23IfFuncInNAME%sstr23IfFuncInNAMEnum% := sstr23IfFuncInNAME






if (lineDone = 1)
{
jsCode .= sstr2345678 . "`n"
}
else
{
lineDone := 1
jsCode .= sstr234567 . "`n"
}

}
}
}
else
{
; this is THE else
if (lineDone != 1)
{
if (skipLeftCuleyForFuncPLS != 1)
{
if (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = Chr(125))
{

maybeWeHaveCommentInClosingCurlyBracket := A_LoopField
if (InStr(maybeWeHaveCommentInClosingCurlyBracket, Chr(59)))
{
maybeWeHaveCommentInClosingCurlyBracket := StrReplace(maybeWeHaveCommentInClosingCurlyBracket, Chr(59), "//")
jsCode .= maybeWeHaveCommentInClosingCurlyBracket . "`n"
}
else
{
jsCode .= Chr(125) . "`n"
}
}
else
{
if (jsCodeAcurlyBraceAddSomeVrasFixLP = 1) && (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = Chr(123))
{
jsCodeAcurlyBraceAddSomeVrasFixLP := 0


jsCode .= A_LoopField . "`n" . theFixTextLoopLP . "`n"
}
else
{
if (jsCodeAcurlyBraceAddSomeVrasFixNL = 1) && (SubStr(Trim(StrLower(A_LoopField)), 1, 1) = Chr(123))
{
jsCodeAcurlyBraceAddSomeVrasFixNL := 0
jsCode .= A_LoopField . "`n" . theFixTextLoopNL . "`n"
}
else
{
jsCode .= A_LoopField . "`n"
}
}
}
}
else
{
skipLeftCuleyForFuncPLS := 0
}
}
}

} ; end of the parsing loop
















;s

if (haveWeEverUsedAloop = 1)
{

StringTrimRight, AHKcodeLoopfixa, AHKcodeLoopfixa, 1

;OutputDebug, |%AHKcodeLoopfixa%|
AIndexLoopCurlyFix := 1
Loop, Parse, AHKcodeLoopfixa, `n, `r
{



sstr123 := A_LoopField
fixLoopLokingFor := A_LoopField
fixLoopLokingForfound := 1
out1 := StrSplit(sstr123 ,"|" , 1)
out2 := StrSplit(sstr123 ,"|" , 3)
;OutputDebug, |%out1%|
;OutputDebug, |%out2%|



wasAtanyIfsElseAddAIndexLoopCurlyFix := 0


if (out1 = "nl")
{


inTarget := 0
insideBracket := 0
netsedCurly := 0
eldLoopNestedBADlol := 0
readyToEnd := 0
endBracketDOntPutThere := 0
dontSaveStr := 0
weAreDoneHereCurly := 0
DeleayOneCuzOfLoopParse := 0
fixLoopLokingForNum := 0
insdeAnestedLoopBAD := 0
foundTheTopLoop := 0
out4758686d86d86d86578991a%AIndexLoopCurlyFix% := ""
Loop, Parse, jsCode, `n, `r
{
;MsgBox, dsfgsdefgesrdg1
;MsgBox, |%A_LoopField%|`n|%fixLoopLokingFor%|


if (InStr(A_LoopField, fixLoopLokingFor)) && (insdeAnestedLoopBAD != 1)
{
fixLoopLokingForNum := 1

;MsgBox, do we came here 1
}

if (InStr(A_LoopField, "for (/*")) && (weAreDoneHereCurly != 1) && (insdeAnestedLoopBAD != 1) && (fixLoopLokingForNum = 1)
{

s := StrSplit(A_LoopField ,"A" . Chr(95) . "Index", 2)
out1z := s


s := StrSplit(out1z, " ", 1)
out1z := Trim(s)


;MsgBox, % out1z

;MsgBox, do we came here 2
fixLoopLokingForNum := 0
foundTheTopLoop++
  inTarget := 1
	;MsgBox, % A_LoopField
	dontSaveStr := 1

	ALoopField := A_LoopField

	;ALoopField := StrReplace(ALoopField, "for (/* Loop parse */", "for (/* Loop parse */ /* From AHK */")
DeleayOneCuzOfLoopParse := 1
	out4758686d86d86d86578991a%AIndexLoopCurlyFix% .= ALoopField . "`n"
}

if (inTarget = 1) && (InStr(A_LoopField, Chr(123))) && (insdeAnestedLoopBAD != 1)
{
insideBracket := 1
}

if (insideBracket = 1) && (InStr(A_LoopField, Chr(123))) && (insdeAnestedLoopBAD != 1)
{
netsedCurly++
}

if (insideBracket = 1) && (InStr(A_LoopField, Chr(125))) && (insdeAnestedLoopBAD != 1)
{
netsedCurly--
readyToEnd := 1
}

if (InStr(A_LoopField, "for (/*")) && (insdeAnestedLoopBAD != 1) && (foundTheTopLoop >= 2)
{
insdeAnestedLoopBAD := 1
insideBracket1 := 0
netsedCurly1 := 0
}
if (inTarget = 1)
{
foundTheTopLoop++
}
if (insdeAnestedLoopBAD = 1)
{



if (InStr(A_LoopField, Chr(123)))
{
insideBracket1 := 1
}

if (insideBracket1 = 1) && (InStr(A_LoopField, Chr(123)))
{
netsedCurly1++
}

if (insideBracket1 = 1) && (InStr(A_LoopField, Chr(125)))
{
netsedCurly1--
readyToEnd1 := 1
}


if (InStr(A_LoopField, Chr(125))) && (readyToEnd1 = 1) && (netsedCurly1 = 0) && (insideBracket = 1)
{
;MsgBox, % A_LoopField
eldLoopNestedBADlol := 1
;out4758686d86d86d86578991a%AIndexLoopCurlyFix% .= A_LoopField . "`n"
}

out4758686d86d86d86578991a%AIndexLoopCurlyFix% .= A_LoopField . "`n"

}


if (inTarget = 1) && (dontSaveStr != 1) && (fixLoopLokingForNum != 1) && (insdeAnestedLoopBAD != 1)
{

ALoopField := A_LoopField




; Replace "A_Index" with or without a following digit with "A_Index" + out1z
ALoopField := RegExReplace(ALoopField, "A" . Chr(95) . "Index(?:\\d+)?", "A" . Chr(95) . "Index" . out1z)



;ALoopField := StrReplace(ALoopField, "A_LoopField", "A_LoopField" . AIndexLoopCurlyFix)


out4758686d86d86d86578991a%AIndexLoopCurlyFix% .= ALoopField . "`n"

}


if (inTarget = 1) && (InStr(A_LoopField, Chr(125))) && (readyToEnd = 1) && (netsedCurly = 0) && (weAreDoneHereCurly = 0) && (dontSaveStr != 1) && (insdeAnestedLoopBAD != 1)
{
;MsgBox, % A_LoopField
weAreDoneHereCurly := 1
inTarget := 0
endBracketDOntPutThere := 1
;out4758686d86d86d86578991a%AIndexLoopCurlyFix% .= A_LoopField . "`n"
}
dontSaveStr := 0

if (inTarget != 1) && (endBracketDOntPutThere != 1) && (insdeAnestedLoopBAD != 1)
{
out4758686d86d86d86578991a%AIndexLoopCurlyFix% .= A_LoopField . "`n"

}
endBracketDOntPutThere := 0

if (eldLoopNestedBADlol = 1)
{
 insdeAnestedLoopBAD := 0
}


}
strstysrstsytTRIMHELP := out4758686d86d86d86578991a%AIndexLoopCurlyFix%
StringTrimRight, strstysrstsytTRIMHELP, strstysrstsytTRIMHELP, 1
;MsgBox, % out4758686d86d86d86578991a%AIndexLoopCurlyFix%


jsCode := strstysrstsytTRIMHELP

;MsgBox, % jsCode
wasAtanyIfsElseAddAIndexLoopCurlyFix := 1
}
else
{


inTarget := 0
insideBracket := 0
netsedCurly := 0
eldLoopNestedBADlol := 0
readyToEnd := 0
endBracketDOntPutThere := 0
dontSaveStr := 0
weAreDoneHereCurly := 0
DeleayOneCuzOfLoopParse := 0
fixLoopLokingForNum := 0
insdeAnestedLoopBAD := 0
foundTheTopLoop := 0
out4758686d86d86d86578991a%AIndexLoopCurlyFix% := ""
Loop, Parse, jsCode, `n, `r
{

if (InStr(A_LoopField , fixLoopLokingFor)) && (insdeAnestedLoopBAD != 1)
{
fixLoopLokingForNum := 1
;MsgBox, do we came here 3
}

if (InStr(A_LoopField , "for (/*")) && (weAreDoneHereCurly != 1) && (insdeAnestedLoopBAD != 1) && (fixLoopLokingForNum = 1)
{


s := StrSplit(A_LoopField ,"A" . Chr(95) . "Index", 2)
out1z := s

s := StrSplit(out1z, " ", 1)
out1z := Trim(s)

;MsgBox, % out1z

fixLoopLokingForNum := 0
;MsgBox, do we came here 4
foundTheTopLoop++
  inTarget := 1
	;MsgBox, % A_LoopField
	dontSaveStr := 1

	ALoopField := A_LoopField

	;ALoopField := StrReplace(ALoopField, "for (/* Loop parse */", "for (/* Loop parse */ /* From AHK */")
DeleayOneCuzOfLoopParse := 1
	out4758686d86d86d86578991a%AIndexLoopCurlyFix% .= ALoopField . "`n"
}

if (inTarget = 1) && (InStr(A_LoopField, Chr(123))) && (insdeAnestedLoopBAD != 1)
{
insideBracket := 1
}

if (insideBracket = 1) && (InStr(A_LoopField, Chr(123))) && (insdeAnestedLoopBAD != 1)
{
netsedCurly++
}

if (insideBracket = 1) && (InStr(A_LoopField, Chr(125))) && (insdeAnestedLoopBAD != 1)
{
netsedCurly--
readyToEnd := 1
}

if (InStr(A_LoopField, "for (/*")) && (insdeAnestedLoopBAD != 1) && (foundTheTopLoop >= 2)
{
insdeAnestedLoopBAD := 1
insideBracket1 := 0
netsedCurly1 := 0
}
if (inTarget = 1)
{
foundTheTopLoop++
}
if (insdeAnestedLoopBAD = 1)
{



if (InStr(A_LoopField, Chr(123)))
{
insideBracket1 := 1
}

if (insideBracket1 = 1) && (InStr(A_LoopField, Chr(123)))
{
netsedCurly1++
}

if (insideBracket1 = 1) && (InStr(A_LoopField, Chr(125)))
{
netsedCurly1--
readyToEnd1 := 1
}


if (InStr(A_LoopField, Chr(125))) && (readyToEnd1 = 1) && (netsedCurly1 = 0) && (insideBracket = 1)
{
;MsgBox, % A_LoopField
eldLoopNestedBADlol := 1
;out4758686d86d86d86578991a%AIndexLoopCurlyFix% .= A_LoopField . "`n"
}


out4758686d86d86d86578991a%AIndexLoopCurlyFix% .= A_LoopField . "`n"

}


if (inTarget = 1) && (dontSaveStr != 1) && (fixLoopLokingForNum != 1) && (insdeAnestedLoopBAD != 1)
{

ALoopField := A_LoopField


; Replace "A_Index" with or without a following digit with "A_Index" + out1z
ALoopField := RegExReplace(ALoopField, "A" . Chr(95) . "Index(?:\\d+)?", "A" . Chr(95) . "Index" . out1z)
; Replace "A_Index" with or without a following digit with "A_Index" + out1z
ALoopField := RegExReplace(ALoopField, "A" . Chr(95) . "LoopField(?:\\d+)?", "A" . Chr(95) . "LoopField" . out1z)





out4758686d86d86d86578991a%AIndexLoopCurlyFix% .= ALoopField . "`n"

}


if ((inTarget = 1) && (InStr(A_LoopField, Chr(125))) && (readyToEnd = 1) && (netsedCurly = 0) && (weAreDoneHereCurly = 0) && (dontSaveStr != 1) && (insdeAnestedLoopBAD != 1))
{
;MsgBox, % A_LoopField
weAreDoneHereCurly := 1
inTarget := 0
endBracketDOntPutThere := 1
;out4758686d86d86d86578991a%AIndexLoopCurlyFix% .= A_LoopField . "`n"
}
dontSaveStr := 0

if (inTarget != 1) && (endBracketDOntPutThere != 1) && (insdeAnestedLoopBAD != 1)
{
out4758686d86d86d86578991a%AIndexLoopCurlyFix% .= A_LoopField . "`n"

}
endBracketDOntPutThere := 0

if (eldLoopNestedBADlol = 1)
{
 insdeAnestedLoopBAD := 0
}


}

strstysrstsytTRIMHELP := out4758686d86d86d86578991a%AIndexLoopCurlyFix%
StringTrimRight, strstysrstsytTRIMHELP, strstysrstsytTRIMHELP, 1
;MsgBox, % out4758686d86d86d86578991a%AIndexLoopCurlyFix%


jsCode := strstysrstsytTRIMHELP

;MsgBox, % jsCode
wasAtanyIfsElseAddAIndexLoopCurlyFix := 1
}

if (wasAtanyIfsElseAddAIndexLoopCurlyFix = 1)
{
AIndexLoopCurlyFix++
wasAtanyIfsElseAddAIndexLoopCurlyFix := 0
}
}


out4758686d86dgt8r754444444 := ""
hold := 0
Loop, Parse, jsCode, `n, `r
{
ignore := 0
if (InStr(A_LoopField, "for (/*"))
{
if (hold = 1) && (holdText = A_LoopField)
{
ignore := 1
}
else
{
holdText := A_LoopField
hold := 1
}
}

if (!(ignore))
{
out4758686d86dgt8r754444444 .= A_LoopField . "`n"
}
}

StringTrimRight, out4758686d86dgt8r754444444, out4758686d86dgt8r754444444, 1
jsCode := out4758686d86dgt8r754444444


}




AHKcodeOut1234565432 := ""
Loop, Parse, jsCode, `n, `r
{
out := A_LoopField
if (!(InStr(out, "|itsaersdtgtgfergsdgfsegdfsedAA|")))
{
AHKcodeOut1234565432 .= out . "`n"
}
}


StringTrimRight, jsCode, AHKcodeOut1234565432, 1









Attw456543w45eqsubeotibebrawaaachi := "`n        // Attaching event listener to document`n        document.addEventListener(" . Chr(34) . "mouseup" . Chr(34) . ", OnMouseRelease);`n        document.addEventListener(" . Chr(34) . "touchend" . Chr(34) . ", OnTouchEnd);`n`n        function OnMouseRelease(event) {`n          // This function will be called when the mouse button is released`n          // You can perform your desired actions here`n          //console.log(" . Chr(34) . "Mouse released" . Chr(34) . ");`n          // Call your main function after mouse release`n          OnMouseClick(event);`n        }`n`n        function OnTouchEnd(event) {`n          // This function will be called when the touch is lifted`n          // You can perform your desired actions here`n          //console.log(" . Chr(34) . "Touch ended" . Chr(34) . ");`n          // Call your main function after touch ends`n          OnMouseClick(event);`n        }`n"


outJScodeLastTime := ""

Loop, Parse, jsCode, `n, `r
{

sstr1 := A_LoopField
sstr1 := StrReplace(sstr1, "variables.A_ScreenWidth", "BuildInVars(" . Chr(34) . "A_ScreenWidth" . Chr(34) . ")")
sstr1 := StrReplace(sstr1, "variables.A_ScreenHeight", "BuildInVars(" . Chr(34) . "A_ScreenHeight" . Chr(34) . ")")
sstr1 := StrReplace(sstr1, "variables.A_GuiControl", "A_GuiControl")
sstr1 := StrReplace(sstr1, "variables.A_TimeIdle", "BuildInVars(" . Chr(34) . "A_TimeIdle" . Chr(34) . ")")
sstr1 := StrReplace(sstr1, "variables.A_TickCount", "BuildInVars(" . Chr(34) . "A_TickCount" . Chr(34) . ")")
sstr1 := StrReplace(sstr1, "variables.A_LastKey", "BuildInVars(" . Chr(34) . "A_LastKey" . Chr(34) . ")")
sstr1 := StrReplace(sstr1, "variables.A_Now", "BuildInVars(" . Chr(34) . "A_Now" . Chr(34) . ")")
sstr1 := StrReplace(sstr1, "variables.A_YYYY", "BuildInVars(" . Chr(34) . "A_YYYY" . Chr(34) . ")")
sstr1 := StrReplace(sstr1, "variables.A_MMMM", "BuildInVars(" . Chr(34) . "A_MMMM" . Chr(34) . ")")
sstr1 := StrReplace(sstr1, "variables.A_MMM", "BuildInVars(" . Chr(34) . "A_MMM" . Chr(34) . ")")
sstr1 := StrReplace(sstr1, "variables.A_MM", "BuildInVars(" . Chr(34) . "A_MM" . Chr(34) . ")")
sstr1 := StrReplace(sstr1, "variables.A_DDDD", "BuildInVars(" . Chr(34) . "A_DDDD" . Chr(34) . ")")
sstr1 := StrReplace(sstr1, "variables.A_DDD", "BuildInVars(" . Chr(34) . "A_DDD" . Chr(34) . ")")
sstr1 := StrReplace(sstr1, "variables.A_DD", "BuildInVars(" . Chr(34) . "A_DD" . Chr(34) . ")")
sstr1 := StrReplace(sstr1, "variables.A_Hour", "BuildInVars(" . Chr(34) . "A_Hour" . Chr(34) . ")")
sstr1 := StrReplace(sstr1, "variables.A_Min", "BuildInVars(" . Chr(34) . "A_Min" . Chr(34) . ")")
sstr1 := StrReplace(sstr1, "variables.A_Sec", "BuildInVars(" . Chr(34) . "A_Sec" . Chr(34) . ")")
sstr1 := StrReplace(sstr1, "variables.A_Space", "BuildInVars(" . Chr(34) . "A_Space" . Chr(34) . ")")
sstr1 := StrReplace(sstr1, "variables.A_Tab", "BuildInVars(" . Chr(34) . "A_Tab" . Chr(34) . ")")

sstr1 := StrReplace(sstr1, "runHTML(variables.Gui", "runHTML(Gui")
sstr1 := StrReplace(sstr1, "runHTML( variables.Gui", "runHTML(Gui")

sstr1 := StrReplace(sstr1, "Att" . Chr(119) . "456543w45eqsubeotibebrawaaachingeventlistenertodocumentaddEventListeneThisfunnctionaftertouchends768ds798y9z7s7xcfy8s7d9fcx", Attw456543w45eqsubeotibebrawaaachi)
sstr1 := StrReplace(sstr1, "async function OnMouseClick(A_GuiControl)", "async function OnMouseClick()")


sstr1 := StrReplace(sstr1, "< ==", "<=")
sstr1 := StrReplace(sstr1, "> ==", ">=")

sstr1 := StrReplace(sstr1, Chr(96), Chr(92))


if (SubStr(Trim(StrLower(A_LoopField)), 1, 10) = StrLower("IfMsgBox, "))
{
sstr1 := ".then(async (result) => {`n" . sstr1
sstr1 := StrReplace(sstr1, " Yes", " OK")
sstr1 := StrReplace(sstr1, " Retry", " OK")
sstr1 := StrReplace(sstr1, " Retry", " OK")
sstr1 := StrReplace(sstr1, "Else", "else")
sstr1 := StrReplace(sstr1, "IfMsgBox, ", "if (result === " . Chr(34))
sstr1 := sstr1 . Chr(34) . ")`n"
}

if (SubStr(Trim(StrLower(A_LoopField)), 1, 20) = StrLower("} // end of ifmsgbox"))
{

sstr1 := sstr1 . "`n});`n"
}

if (StrLower(sstr1) = "exitapp")
{
sstr1 := "window.close()"
}

if (StrLower(sstr1) = "reload")
{
sstr1 := "location.reload()"
}


outJScodeLastTime .= sstr1 . "`n"
}
StringTrimRight, jsCode, outJScodeLastTime, 1


Loop, % theIdNumOfThe34
{
jsCode := StrReplace(jsCode, "ihuiuuhuuhtheidFor--asas-theuhturtyphoutr-" . Chr(65) . Chr(65) . str(A_Index) . Chr(65) . Chr(65), theIdNumOfThe34theVar%A_Index%)
}




outJScodeLastTime2 := ""

Loop, Parse, jsCode, `n, `r
{

sstr1 := A_LoopField

sstr1 := StrReplace(sstr1, "GetKeyState (" . Chr(34) . "Up", "GetKeyState (" . Chr(34) . "ArrowUp")
sstr1 := StrReplace(sstr1, "GetKeyState (" . Chr(34) . "Down", "GetKeyState (" . Chr(34) . "ArrowDown")
sstr1 := StrReplace(sstr1, "GetKeyState (" . Chr(34) . "Left", "GetKeyState (" . Chr(34) . "ArrowLeft")
sstr1 := StrReplace(sstr1, "GetKeyState (" . Chr(34) . "Right", "GetKeyState (" . Chr(34) . "ArrowRight")

sstr1 := StrReplace(sstr1, Chr(34) . Chr(34) . Chr(34), Chr(34) . Chr(34))



outJScodeLastTime2 .= sstr1 . "`n"
}
StringTrimRight, jsCode, outJScodeLastTime2, 1



jsCode := "`n" . "// Declare and assign a variable`nlet variables = {`nnull: null,`n};`n" . jsCode . "`n"

funcs .= "}"

funcsOutFixBug := ""
Loop, Parse, funcs, `n, `r
{
if (!(InStr(A_LoopField, "else if")))
{
funcsOutFixBug .= A_LoopField . "`n"
}
}
StringTrimRight, funcs, funcsOutFixBug, 1

if (doWeEvenDecAnyFuncHUH = 0)
{
jsCode := "`n" . onKeyPress . "`n`n" . jsCodeGui . "`n`n" . HotKeyCalledHotKyes . "`n`n" . jsCode
}
else
{
jsCode := "`n" . funcs . "`n`n" . onKeyPress . "`n`n" . jsCodeGui . "`n`n" . HotKeyCalledHotKyes . "`n`n" . jsCode
}



addFuncIfWeUseIt_BuildInVars := ""

addFuncIfWeUseIt_showCustomMessageBox := "`n      function showCustomMessageBox(options, title, text, value, timeout) {`n        return new Promise((resolve) => {`n          // Define default options for the message box`n          let defaultOptions = {`n            title: title || " . Chr(34) . "" . Chr(34) . ", // Default title is empty`n            text: text || " . Chr(34) . "Press OK to continue." . Chr(34) . ", // Default text if not provided`n            showCancelButton: false, // Default is to not show Cancel button`n            showDenyButton: false, // Default is to not show Deny button`n            confirmButtonText: " . Chr(34) . "OK" . Chr(34) . ", // Default text for OK button`n            focusConfirm: true, // Default focus on OK button`n          };`n`n          let numOriginal = value;`n`n          let num = numOriginal;`n`n          let done1 = 0;`n`n          let done2 = 0;`n`n          let done3 = 0;`n`n          let AIndex = 0;`n`n          for (AIndex = 1; AIndex <= 1; AIndex++) {`n            // this is about if you add always on top in a msgbox it will be removed in js cuz its kinda useless...`n            // becouse if you like adding always on top in ahk in js we dont realy do it so yeah`n            if (num >= 262144) {`n              num = num - 262144;`n              numOriginal = numOriginal - 262144;`n            }`n`n            if (num >= 256 && num < 500) {`n              num = num - 256;`n`n              done3 = 256;`n            }`n`n            if (num >= 512) {`n              num = num - 512;`n`n              done3 = 512;`n            }`n`n            if (num == 0) {`n              done1 = 0;`n`n              break;`n            }`n`n            if (num <= 6) {`n              done1 = num;`n`n              break;`n            }`n`n            if (num >= 64 && num < 64 * 2) {`n              done2 = 64;`n`n              if (num == 64) {`n                done1 = 0;`n`n                break;`n              } else {`n                done1 = num - 64;`n`n                break;`n              }`n            }`n`n            if (num >= 48 && num < 63) {`n              done2 = 48;`n`n              if (num == 48) {`n                done1 = 0;`n`n                break;`n              } else {`n                done1 = num - 48;`n`n                break;`n              }`n            }`n`n            if (num >= 32 && num < 47) {`n              done2 = 32;`n`n              if (num == 32) {`n                done1 = 0;`n`n                break;`n              } else {`n                done1 = num - 32;`n`n                break;`n              }`n            }`n`n            if (num >= 16 && num < 30) {`n              done2 = 16;`n`n              if (num == 16) {`n                done1 = 0;`n`n                break;`n              } else {`n                done1 = num - 16;`n`n                break;`n              }`n            }`n          }`n`n          let doneAdded = done1 + done2 + done3;`n`n          if (doneAdded !== numOriginal) {`n            // displayMessage(" . Chr(34) . "The calc was wrong!" . Chr(34) . ");`n          } else {`n            // displayMessage(" . Chr(34) . "num was: " . Chr(34) . " + numOriginal + " . Chr(34) . "" . Chr(92) . "ndone1: " . Chr(34) . " + done1 + " . Chr(34) . "" . Chr(92) . "ndone2: " . Chr(34) . " + done2 + " . Chr(34) . "" . Chr(92) . "ndone3: " . Chr(34) . " + done3);`n          }`n`n          // Parse the value to determine the options for the message box`n          if (done1 === 1) defaultOptions.showCancelButton = true; // OK/Cancel in ahk but here it will show Ok/Cancel wiat its same haha`n`n          // not gonna work if you can make it work i will appreciate`n          //   if (done1 === 2) {`n          //     defaultOptions.showCancelButton = true; // Abort/Retry/Ignore`n          //     defaultOptions.showDenyButton = true;`n          //   }`n          if (done1 === 3) {`n            defaultOptions.showCancelButton = true; // Yes/No/Cancel in ahk but here it will show Ok/No/Cancel`n            defaultOptions.showDenyButton = true;`n          }`n          if (done1 === 4) {`n            // defaultOptions.showCancelButton = true;`n            defaultOptions.showDenyButton = true; // Yes/No in ahk but here it will show Ok/No`n          }`n          if (done1 === 5) {`n            defaultOptions.showCancelButton = true; // Retry/Cancel in ahk but here it will show Ok/Cancel tip you can write in the Msgbox press ok to retry`n          }`n          // not gonna work if you can make it work i will appreciate`n          //   if (done1 === 6) {`n          //     defaultOptions.showCancelButton = true; // Cancel/Try Again/Continue`n          //     defaultOptions.showDenyButton = true;`n          //   }`n`n          if (done2 === 16) defaultOptions.icon = " . Chr(34) . "error" . Chr(34) . "; // Icon Hand (stop/error)`n          if (done2 === 32) defaultOptions.icon = " . Chr(34) . "question" . Chr(34) . "; // Icon Question`n          if (done2 === 48) defaultOptions.icon = " . Chr(34) . "warning" . Chr(34) . "; // Icon Exclamation`n          if (done2 === 64) defaultOptions.icon = " . Chr(34) . "info" . Chr(34) . "; // Icon Asterisk (info)`n`n          if (done3 === 256) defaultOptions.focusDeny = true; // Makes the 3rd button the default`n          if (done3 === 512) defaultOptions.focusCancel = true; // Makes the 2nd button the default`n`n          // Set timeout if provided`n          if (timeout) {`n            defaultOptions.timer = timeout * 1000; // Convert timeout to milliseconds`n          }`n`n          // Merge default options with provided options`n          Object.assign(defaultOptions, options);`n`n          // Display the message box with the constructed options`n          Swal.fire(defaultOptions).then((result) => {`n            if (result.isConfirmed) {`n              resolve(" . Chr(34) . "OK" . Chr(34) . ");`n            } else if (result.isDenied) {`n              resolve(" . Chr(34) . "No" . Chr(34) . ");`n            } else {`n              resolve(" . Chr(34) . "Cancel" . Chr(34) . ");`n            }`n          });`n        });`n      }`n"

addFuncIfWeUseIt_BuildInVars := "`n      var lastKeyPressed = " . Chr(34) . "" . Chr(34) . ";`n`n      function trackLastKeyPressed() {`n        document.addEventListener(" . Chr(34) . "keydown" . Chr(34) . ", function (event) {`n          lastKeyPressed = event.key;`n          // console.log(lastKeyPressed);`n        });`n      }`n`n      function getLastKeyPressed() {`n        return lastKeyPressed;`n      }`n`n      // Call the trackLastKeyPressed function to start tracking key presses`n      trackLastKeyPressed();`n" . "`n      let lastInputTime = Date.now(); // Initialize with current timestamp`n      let startTimestamp = Date.now(); // Initialize with current timestamp`n`n      // Event listener to track user activity`n      function resetIdleTimer() {`n        lastInputTime = Date.now(); // Update last input time`n      }`n`n      document.addEventListener(" . Chr(34) . "mousemove" . Chr(34) . ", resetIdleTimer);`n      document.addEventListener(" . Chr(34) . "keypress" . Chr(34) . ", resetIdleTimer);`n`n      // Function to calculate time since last input event`n      function A_TimeIdle() {`n        return Date.now() - lastInputTime; // Calculate time difference`n      }`n`n      // Function to calculate tick count in milliseconds`n      function A_TickCount() {`n        return Date.now() - startTimestamp;`n      }`n`n      function BuildInVars(varName) {`n        switch (varName) {`n          case " . Chr(34) . "A_ScreenWidth" . Chr(34) . ":`n            // Return screen width`n            return window.innerWidth;`n          case " . Chr(34) . "A_LastKey" . Chr(34) . ":`n            // Return screen width`n            return getLastKeyPressed();`n          case " . Chr(34) . "A_ScreenHeight" . Chr(34) . ":`n            // Return screen height`n            return window.innerHeight;`n          case " . Chr(34) . "A_TimeIdle" . Chr(34) . ":`n            // Return time idle`n            return A_TimeIdle();`n          case " . Chr(34) . "A_TickCount" . Chr(34) . ":`n            // Return tick count in milliseconds`n            return A_TickCount();`n          case " . Chr(34) . "A_Now" . Chr(34) . ":`n            // Return current local timestamp`n            return new Date().toLocaleString();`n          case " . Chr(34) . "A_YYYY" . Chr(34) . ":`n            // Return current year`n            return new Date().getFullYear();`n          case " . Chr(34) . "A_MM" . Chr(34) . ":`n            // Return current month`n            return (new Date().getMonth() + 1).toString().padStart(2, " . Chr(34) . "0" . Chr(34) . ");`n          case " . Chr(34) . "A_DD" . Chr(34) . ":`n            // Return current day`n            return new Date().getDate().toString().padStart(2, " . Chr(34) . "0" . Chr(34) . ");`n          case " . Chr(34) . "A_MMMM" . Chr(34) . ":`n            // Return full month name`n            return new Date().toLocaleDateString(undefined, { month: " . Chr(34) . "long" . Chr(34) . " });`n          case " . Chr(34) . "A_MMM" . Chr(34) . ":`n            // Return short month name`n            return new Date().toLocaleDateString(undefined, { month: " . Chr(34) . "short" . Chr(34) . " });`n          case " . Chr(34) . "A_DDDD" . Chr(34) . ":`n            // Return full day name`n            return new Date().toLocaleDateString(undefined, { weekday: " . Chr(34) . "long" . Chr(34) . " });`n          case " . Chr(34) . "A_DDD" . Chr(34) . ":`n            // Return short day name`n            return new Date().toLocaleDateString(undefined, { weekday: " . Chr(34) . "short" . Chr(34) . " });`n          case " . Chr(34) . "A_Hour" . Chr(34) . ":`n            // Return current hour`n            return new Date().getHours().toString().padStart(2, " . Chr(34) . "0" . Chr(34) . ");`n          case " . Chr(34) . "A_Min" . Chr(34) . ":`n            // Return current minute`n            return new Date().getMinutes().toString().padStart(2, " . Chr(34) . "0" . Chr(34) . ");`n          case " . Chr(34) . "A_Sec" . Chr(34) . ":`n            // Return current second`n            return new Date().getSeconds().toString().padStart(2, " . Chr(34) . "0" . Chr(34) . ");`n          case " . Chr(34) . "A_Space" . Chr(34) . ":`n            // Return space character`n            return " . Chr(34) . " " . Chr(34) . ";`n          case " . Chr(34) . "A_Tab" . Chr(34) . ":`n            // Return tab character`n            return " . Chr(34) . "" . Chr(92) . "t" . Chr(34) . ";`n`n          default:`n            // Handle unknown variable names`n            return null;`n        }`n      }`n"

addFuncIfWeUseIt_MakeHotKey := "`n      function MakeHotKey(hotkey, callback) {`n        document.addEventListener(" . Chr(34) . "keydown" . Chr(34) . ", function (event) {`n          const keys = hotkey.split(" . Chr(34) . "+" . Chr(34) . ").map((key) => key.trim().toLowerCase());`n          const modifiers = {`n            ctrl: event.ctrlKey,`n            shift: event.shiftKey,`n            alt: event.altKey,`n          };`n`n          let hotkeyPressed = true;`n          keys.forEach((key) => {`n            if (key === " . Chr(34) . "ctrl" . Chr(34) . " || key === " . Chr(34) . "shift" . Chr(34) . " || key === " . Chr(34) . "alt" . Chr(34) . ") {`n              if (!modifiers[key]) {`n                hotkeyPressed = false;`n              }`n            } else if (key === " . Chr(34) . "backspace" . Chr(34) . ") {`n              if (event.key !== " . Chr(34) . "Backspace" . Chr(34) . ") {`n                hotkeyPressed = false;`n              }`n            } else if (key.startsWith(" . Chr(34) . "arrow" . Chr(34) . ")) {`n              const arrowDirection = key.replace(" . Chr(34) . "arrow" . Chr(34) . ", " . Chr(34) . "" . Chr(34) . ");`n              if (arrowDirection === " . Chr(34) . "up" . Chr(34) . " && event.key !== " . Chr(34) . "ArrowUp" . Chr(34) . ") {`n                hotkeyPressed = false;`n              } else if (arrowDirection === " . Chr(34) . "down" . Chr(34) . " && event.key !== " . Chr(34) . "ArrowDown" . Chr(34) . ") {`n                hotkeyPressed = false;`n              } else if (arrowDirection === " . Chr(34) . "left" . Chr(34) . " && event.key !== " . Chr(34) . "ArrowLeft" . Chr(34) . ") {`n                hotkeyPressed = false;`n              } else if (arrowDirection === " . Chr(34) . "right" . Chr(34) . " && event.key !== " . Chr(34) . "ArrowRight" . Chr(34) . ") {`n                hotkeyPressed = false;`n              }`n            } else if (key === " . Chr(34) . "enter" . Chr(34) . ") {`n              if (event.key !== " . Chr(34) . "Enter" . Chr(34) . ") {`n                hotkeyPressed = false;`n              }`n            } else if (!event.key.match(/^[0-9a-zA-Z]$/) && event.key !== key) {`n              hotkeyPressed = false;`n            } else if (event.key.toLowerCase() !== key && event.key.match(/^[a-zA-Z]$/)) {`n              hotkeyPressed = false;`n            }`n          });`n`n          if (hotkeyPressed) {`n            if (modifiers[" . Chr(34) . "shift" . Chr(34) . "]) {`n              callback(hotkey.toUpperCase());`n            } else {`n              callback(hotkey.toLowerCase());`n            }`n          }`n        });`n      }`n"

addFuncIfWeUseIt_Abs := "`n      // Absolute value`n      function Abs(num) {`n        if (num === null || isNaN(num)) return null;`n        return Math.abs(num);`n      }`n"


addFuncIfWeUseIt_ACos := "`n      // Arc cosine`n      function ACos(num) {`n        if (num === null || isNaN(num)) return null;`n        return Math.acos(num);`n      }`n"

addFuncIfWeUseIt_ASin := "`n      // Arc sine`n      function ASin(num) {`n        if (num === null || isNaN(num)) return null;`n        return Math.asin(num);`n      }`n"

addFuncIfWeUseIt_ATan := "`n      // Arc tangent`n      function ATan(num) {`n        if (num === null || isNaN(num)) return null;`n        return Math.atan(num);`n      }`n"

addFuncIfWeUseIt_Ceil := "`n      // Ceiling`n      function Ceil(num) {`n        if (num === null || isNaN(num)) return null;`n        return Math.ceil(num);`n      }`n"

addFuncIfWeUseIt_Cos := "`n      // Cosine`n      function Cos(num) {`n        if (num === null || isNaN(num)) return null;`n        return Math.cos(num);`n      }`n"

addFuncIfWeUseIt_Exp := "`n      // Exponential`n      function Exp(num) {`n        if (num === null || isNaN(num)) return null;`n        return Math.exp(num);`n      }`n"

addFuncIfWeUseIt_Floor := "`n      // Flooring`n      function Floor(num) {`n        if (num === null || isNaN(num)) return null;`n        return Math.floor(num);`n      }`n"

addFuncIfWeUseIt_Ln := "`n      // Natural logarithm`n      function Ln(num) {`n        if (num === null || isNaN(num)) return null;`n        return Math.log(num);`n      }`n"

addFuncIfWeUseIt_Log := "`n      // Base-10 logarithm`n      function Log(num) {`n        if (num === null || isNaN(num)) return null;`n        return Math.log10(num);`n      }`n"

addFuncIfWeUseIt_Round := "`n      // Rounding`n      function Round(num) {`n        if (num === null || isNaN(num)) return null;`n        return Math.round(num);`n      }`n"

addFuncIfWeUseIt_Sin := "`n      // Sin`n      function Sin(num) {`n        if (num === null || isNaN(num)) return null;`n        return Math.sin(num);`n      }`n"

addFuncIfWeUseIt_Sqrt := "`n      // Square root`n      function Sqrt(num) {`n        if (num === null || isNaN(num)) return null;`n        return Math.sqrt(num);`n      }`n"

addFuncIfWeUseIt_Tan := "`n      // Tangent`n      function Tan(num) {`n        if (num === null || isNaN(num)) return null;`n        return Math.tan(num);`n      }`n"

addFuncIfWeUseIt_Chr := "`n      function Chr(number) {`n        // Check if the number is null`n        if (number === null) {`n          // Return an empty string`n          return " . Chr(34) . "" . Chr(34) . ";`n        }`n`n        // Check if the number is within the valid range`n        if (number >= 0 && number <= 0x10ffff) {`n          // Convert the number to a character using String.fromCharCode`n          return String.fromCharCode(number);`n        } else {`n          // Return an empty string for invalid numbers`n          return " . Chr(34) . "" . Chr(34) . ";`n        }`n      }`n"

addFuncIfWeUseIt_sleep := "`n      // Function to simulate Sleep`n      function sleep(ms) {`n        return new Promise((resolve) => setTimeout(resolve, ms));`n      }`n"

addFuncIfWeUseIt_InStr := "`n      // InStr`n      function InStr(Haystack, Needle, CaseSensitive = true, StartingPos = 1, Occurrence = 1) {`n        if (Haystack === null || Needle === null) return false;`n`n        // Adjust starting position if less than 1`n        StartingPos = Math.max(StartingPos, 1);`n`n        // Case-sensitive search by default`n        if (!CaseSensitive) {`n          Haystack = Haystack.toLowerCase();`n          Needle = Needle.toLowerCase();`n        }`n`n        let pos = -1;`n        let count = 0;`n        for (let i = StartingPos - 1; i < Haystack.length; i++) {`n          if (Haystack.substring(i, i + Needle.length) === Needle) {`n            count++;`n            if (count === Occurrence) {`n              pos = i + 1;`n              break;`n            }`n          }`n        }`n`n        return pos > 0; // Return true if the substring is found, false otherwise`n      }`n"

addFuncIfWeUseIt_RegExMatch := "`n      // RegExMatch`n      function RegExMatch(Haystack, NeedleRegEx, OutputVar, StartingPos) {`n          if (Haystack === null || NeedleRegEx === null) return null;`n`n          const regex = new RegExp(NeedleRegEx);`n          let match;`n`n          if (typeof Haystack === 'string') {`n              match = Haystack.match(regex);`n          }`n`n          if (match) {`n              if (OutputVar) {`n                  OutputVar.push(match[0]);`n              }`n              return match.index + 1;`n          } else {`n              return 0;`n          }`n      }`n"

addFuncIfWeUseIt_StrLen := "`n      // StrLen`n      function StrLen(str) {`n        return str === null ? null : str.length;`n      }`n"

addFuncIfWeUseIt_getRandomNumber := "`n      // Function to generate a random number between min (inclusive) and max (inclusive)`n      function getRandomNumber(min, max) {`n        return Math.floor(Math.random() * (max - min + 1) + min);`n      }`n"

addFuncIfWeUseIt_SubStr := "`n      function SubStr(str, startPos, length) {`n        // If str is null or undefined, return an empty string`n        if (str === null || str === undefined) {`n          return " . Chr(34) . "" . Chr(34) . ";`n        }`n`n        // If length is not provided or is blank, default to " . Chr(34) . "all characters" . Chr(34) . "`n        if (length === undefined || length === " . Chr(34) . "" . Chr(34) . ") {`n          length = str.length - startPos + 1;`n        }`n`n        // If startPos is less than 1, adjust it to start from the end of the string`n        if (startPos < 1) {`n          startPos = str.length + startPos;`n        }`n`n        // Extract the substring based on startPos and length`n        return str.substr(startPos - 1, length);`n      }`n"

addFuncIfWeUseIt_Trim := "`n      function Trim(inputString) {`n        // Check if inputString is null or undefined`n        if (inputString == null) {`n          return " . Chr(34) . "" . Chr(34) . "; // Return an empty string if inputString is null or undefined`n        }`n        return inputString.replace(/^" . Chr(92) . "s+|" . Chr(92) . "s+$/g, " . Chr(34) . "" . Chr(34) . "); // Removes leading and trailing whitespace`n      }`n"

addFuncIfWeUseIt_ParseInt := "`n      async function ParseInt(num) {`n        if (num === null) {`n          return null;`n        }`n`n        num = num.trim();`n        num++;`n        num--;`n`n        return num;`n      }"

addFuncIfWeUseIt_StrReplace := "`n      function StrReplace(originalString, find, replaceWith) {`n        // Check if originalString is a string`n        if (typeof originalString !== " . Chr(34) . "string" . Chr(34) . ") {`n          return originalString; // Return originalString as is`n        }`n`n        // Escape special characters in the 'find' string to be used literally`n        const escapedFind = find.replace(/[.*+?^${}()|[" . Chr(92) . "]" . Chr(92) . "" . Chr(92) . "]/g, " . Chr(34) . "" . Chr(92) . "" . Chr(92) . "$&" . Chr(34) . ");`n`n        // Use replace method to replace all occurrences of 'find' with 'replaceWith'`n        return originalString.replace(new RegExp(escapedFind, " . Chr(34) . "g" . Chr(34) . "), replaceWith);`n      }`n"

addFuncIfWeUseIt_Mod := "`n      // Custom Mod function`n      function Mod(dividend, divisor) {`n        return dividend " . Chr(37) . " divisor;`n      }`n"

addFuncIfWeUseIt_Asc := "`n      function Asc(char) {`n        return char.charCodeAt(0);`n      }`n"

addFuncIfWeUseIt_StringTrimLeft := "`n// Function to trim specified number of characters from the left side of a string`nfunction StringTrimLeft(input, numChars) {`n  if (typeof input === 'string' && typeof numChars === 'number' && numChars >= 0) {`n    return input.length > numChars ? input.substring(numChars) : '';`n  } else {`n    console.error(" . Chr(34) . "Invalid input provided." . Chr(34) . ");`n    return input; // Return original input if trimming is not possible`n  }`n}`n"

addFuncIfWeUseIt_StringTrimRight := "`n// Function to trim specified number of characters from the right side of a string`nfunction StringTrimRight(input, numChars) {`n  if (typeof input === 'string' && typeof numChars === 'number' && numChars >= 0) {`n    return input.length > numChars ? input.substring(0, input.length - numChars) : '';`n  } else {`n    console.error(" . Chr(34) . "Invalid input provided." . Chr(34) . ");`n    return input; // Return original input if trimming is not possible`n  }`n}`n"

addFuncIfWeUseIt_isMobileDevice := "`n      function isMobileDevice() {`n        return /Mobi|Android/i.test(navigator.userAgent);`n      }`n"

addFuncIfWeUseIt_SetTimer := "`n      // Object to store timer intervals for different functions`n      const timerIntervals = {};`n`n      async function SetTimer(func, timeOrOnOff) {`n        if (typeof func !== " . Chr(34) . "function" . Chr(34) . " || typeof timeOrOnOff === " . Chr(34) . "undefined" . Chr(34) . ") {`n          console.error(" . Chr(34) . "Invalid arguments. Please provide a valid function and time/On/Off state." . Chr(34) . ");`n          return;`n        }`n`n        if (typeof timeOrOnOff === " . Chr(34) . "number" . Chr(34) . ") {`n          // If a number is provided, set the timer to that time in milliseconds and start it.`n          func.interval = timeOrOnOff; // Store the interval within the function`n          func(); // Call the function initially`n          func.intervalId = setInterval(func, timeOrOnOff);`n          timerIntervals[func] = func.intervalId; // Store the interval ID`n        } else if (timeOrOnOff === " . Chr(34) . "On" . Chr(34) . ") {`n          // If 'On' is provided, start the timer if it's not already running.`n          if (!func.intervalId && func.interval) {`n            func(); // Call the function initially`n            func.intervalId = setInterval(func, func.interval); // Start with the stored interval`n            timerIntervals[func] = func.intervalId; // Store the interval ID`n          } else {`n            console.error(" . Chr(34) . "Timer is not set. Please provide a valid interval." . Chr(34) . ");`n          }`n        } else if (timeOrOnOff === " . Chr(34) . "Off" . Chr(34) . ") {`n          // If 'Off' is provided, clear the timer if it's running.`n          clearInterval(func.intervalId);`n          func.intervalId = null;`n          delete timerIntervals[func]; // Remove the interval ID from storage`n        } else {`n          console.error(" . Chr(34) . "Invalid time/On/Off state. Please provide a valid time in milliseconds or 'On'/'Off'." . Chr(34) . ");`n        }`n      }`n"

addFuncIfWeUseIt_GuiControl := "`n      function GuiControl(action, id, param1, param2, param3, param4) {`n        const element = document.getElementById(id);`n        if (element) {`n          // Handle DOM elements`n          if (action === " . Chr(34) . "move" . Chr(34) . ") {`n            // Set position and size`n            element.style.left = param1 + " . Chr(34) . "px" . Chr(34) . ";`n            element.style.top = param2 + " . Chr(34) . "px" . Chr(34) . ";`n            element.style.width = param3 + " . Chr(34) . "px" . Chr(34) . ";`n            element.style.height = param4 + " . Chr(34) . "px" . Chr(34) . ";`n          } else if (action === " . Chr(34) . "focus" . Chr(34) . " && (element instanceof HTMLInputElement || element instanceof HTMLElement)) {`n            // Focus on the element`n            element.focus();`n          } else if (action === " . Chr(34) . "text" . Chr(34) . ") {`n            // Set new text content`n            element.textContent = param1;`n          } else if (action === " . Chr(34) . "hide" . Chr(34) . ") {`n            // Hide the element`n            element.style.display = " . Chr(34) . "none" . Chr(34) . ";`n          } else if (action === " . Chr(34) . "show" . Chr(34) . ") {`n            // Show the element`n            element.style.display = " . Chr(34) . "" . Chr(34) . ";`n          } else if (action === " . Chr(34) . "enable" . Chr(34) . ") {`n            // Enable the element`n            element.disabled = false;`n          } else if (action === " . Chr(34) . "disable" . Chr(34) . ") {`n            // Disable the element`n            element.disabled = true;`n          } else if (action === " . Chr(34) . "font" . Chr(34) . ") {`n            // Set font size`n            element.style.fontSize = param1 + " . Chr(34) . "px" . Chr(34) . ";`n          } else if (action === " . Chr(34) . "destroy" . Chr(34) . ") {`n      	    // Remove the element from the DOM`n    	    element.parentNode.removeChild(element);`n    	  } else if (action === " . Chr(34) . "color" . Chr(34) . ") {`n            // Set color`n            element.style.color = param1;`n          } else if (action === " . Chr(34) . "picture" . Chr(34) . ") {`n            // Change the image source`n            if (element instanceof HTMLImageElement) {`n              element.src = param1;`n            } else {`n              console.error(" . Chr(34) . "Element is not an <img> tag, cannot change picture." . Chr(34) . ");`n            }`n          } else if (action === " . Chr(34) . "textide" . Chr(34) . ") {`n            // Set value for Ace editor`n            var editor = ace.edit(id); // Access the Ace editor instance using its ID`n            if (editor && param1) {`n              editor.session.setValue(param1);`n            } else {`n              console.error(" . Chr(34) . "Element is not an Ace editor or parameter is missing." . Chr(34) . ");`n            }`n          }`n        } else {`n          // Handle canvas or non-existing element`n          if (action === " . Chr(34) . "move" . Chr(34) . ") {`n            // Update position and size of the rectangle`n            updateRectangle(id, param1, param2, param3, param4);`n            redrawCanvas(); // Redraw the canvas with updated rectangles`n          } else if (action === " . Chr(34) . "color" . Chr(34) . ") {`n            // Update color of the rectangle`n            updateRectangleColor(id, param1);`n            redrawCanvas(); // Redraw the canvas with updated rectangles`n          }`n        }`n      }`n"

addFuncIfWeUseIt_getDataFromEndpoint := "`n      async function getDataFromEndpoint(data, endpoint) {`n        // Convert data to JSON string`n        const requestData = JSON.stringify(data);`n`n        // Set up fetch request options`n        const requestOptions = {`n          method: " . Chr(34) . "POST" . Chr(34) . ", // or 'GET' depending on your server's requirements`n          headers: {`n            " . Chr(34) . "Content-Type" . Chr(34) . ": " . Chr(34) . "application/json" . Chr(34) . ",`n          },`n          body: requestData,`n        };`n`n        // Fetch data from the specified endpoint`n        const response = await fetch(endpoint, requestOptions);`n`n        // Check if response is successful`n        if (!response.ok) {`n          throw new Error(" . Chr(96) . "Failed to fetch data from ${endpoint}. Status: ${response.status}" . Chr(96) . ");`n        }`n`n        // Parse response data based on Content-Type header`n        const contentType = response.headers.get(" . Chr(34) . "content-type" . Chr(34) . ");`n        if (contentType && contentType.includes(" . Chr(34) . "application/json" . Chr(34) . ")) {`n          return response.json(); // Parse JSON response`n        } else {`n          return response.text(); // Parse plain text response`n        }`n      }`n"

addFuncIfWeUseIt_FileAppend := "`n      function FileAppend(data, filename) {`n        // Create a blob with the provided data`n        const blob = new Blob([data], { type: " . Chr(34) . "text/plain" . Chr(34) . " });`n`n        // Create a temporary anchor element`n        const anchor = document.createElement(" . Chr(34) . "a" . Chr(34) . ");`n        anchor.style.display = " . Chr(34) . "none" . Chr(34) . ";`n`n        // Set the download attribute and filename`n        anchor.setAttribute(" . Chr(34) . "href" . Chr(34) . ", window.URL.createObjectURL(blob));`n        anchor.setAttribute(" . Chr(34) . "download" . Chr(34) . ", filename);`n`n        // Append the anchor element to the body`n        document.body.appendChild(anchor);`n`n        // Trigger a click event on the anchor element`n        anchor.click();`n`n        // Remove the anchor element`n        document.body.removeChild(anchor);`n      }`n"


addFuncIfWeUseIt_isConnectedToBackend := "`nfunction isConnectedToBackend() {`n    return window.location.protocol !== " . Chr(34) . "file:" . Chr(34) . ";`n}`n"

addFuncIfWeUseIt_MouseGetPos := "`n      var mouseX = 0;`n      var mouseY = 0;`n`n      document.addEventListener(" . Chr(34) . "mousemove" . Chr(34) . ", function (event) {`n        mouseX = event.clientX;`n        mouseY = event.clientY;`n      });`n`n      function MouseGetPos(coord) {`n        if (coord === " . Chr(34) . "x" . Chr(34) . ") {`n          return mouseX;`n        } else if (coord === " . Chr(34) . "y" . Chr(34) . ") {`n          return mouseY;`n        } else {`n          return null; // Invalid parameter`n        }`n      }`n"

addFuncIfWeUseIt_SoundPlay := "`n           let audio = new Audio();`n            let currentAudioUrl = null;`n`n            function isBase64(str) {`n                try {`n                    return btoa(atob(str)) === str;`n                } catch (err) {`n                    return false;`n                }`n            }`n`n            function SoundPlay(command, parameter) {`n                switch (command) {`n                    case " . Chr(34) . "play" . Chr(34) . ":`n                        if (typeof parameter === " . Chr(34) . "string" . Chr(34) . ") {`n                            if (isBase64(parameter)) {`n                                // Parameter is a Base64-encoded string`n                                let binaryString = atob(parameter);`n                                let bytes = new Uint8Array(binaryString.length);`n`n                                for (let i = 0; i < binaryString.length; i++) {`n                                    bytes[i] = binaryString.charCodeAt(i);`n                                }`n`n                                let mimeType = " . Chr(34) . "audio/mpeg" . Chr(34) . "; // Default MIME type`n                                // Determine MIME type based on audio data`n                                // (You may need more sophisticated detection logic here)`n                                if (parameter.includes(" . Chr(34) . "audio/wav" . Chr(34) . ")) {`n                                    mimeType = " . Chr(34) . "audio/wav" . Chr(34) . ";`n                                } else if (parameter.includes(" . Chr(34) . "audio/mp3" . Chr(34) . ")) {`n                                    mimeType = " . Chr(34) . "audio/mpeg" . Chr(34) . ";`n                                } else if (parameter.includes(" . Chr(34) . "audio/ogg" . Chr(34) . ")) {`n                                    mimeType = " . Chr(34) . "audio/ogg" . Chr(34) . ";`n                                } else if (parameter.includes(" . Chr(34) . "audio/aac" . Chr(34) . ")) {`n                                    mimeType = " . Chr(34) . "audio/aac" . Chr(34) . ";`n                                } else if (parameter.includes(" . Chr(34) . "audio/m4a" . Chr(34) . ")) {`n                                    mimeType = " . Chr(34) . "audio/mp4" . Chr(34) . ";`n                                } else if (parameter.includes(" . Chr(34) . "audio/flac" . Chr(34) . ")) {`n                                    mimeType = " . Chr(34) . "audio/flac" . Chr(34) . ";`n                                } else if (parameter.includes(" . Chr(34) . "audio/x-aiff" . Chr(34) . ")) {`n                                    mimeType = " . Chr(34) . "audio/x-aiff" . Chr(34) . ";`n                                }`n                                // Add more conditions for other audio formats...`n`n                                let blob = new Blob([bytes.buffer], {`n                                    type: mimeType,`n                                });`n                                let audioSrc = URL.createObjectURL(blob);`n`n                                audio.src = audioSrc;`n                                audio.play();`n                                currentAudioUrl = audioSrc;`n                            } else {`n                                // Parameter is assumed to be a URL`n                                audio.src = parameter;`n                                audio.play();`n                                currentAudioUrl = parameter;`n                            }`n                        } else {`n                            console.error(" . Chr(34) . "Invalid parameter for play command" . Chr(34) . ");`n                        }`n                        break;`n                    case " . Chr(34) . "stop" . Chr(34) . ":`n                        audio.pause();`n                        audio.currentTime = 0;`n                        break;`n                    case " . Chr(34) . "pause" . Chr(34) . ":`n                        audio.pause();`n                        break;`n                    case " . Chr(34) . "resume" . Chr(34) . ":`n                        audio.play();`n                        break;`n                    case " . Chr(34) . "mute" . Chr(34) . ":`n                        audio.volume = 0;`n                        break;`n                    case " . Chr(34) . "unmute" . Chr(34) . ":`n                        audio.volume = 1;`n                        break;`n                    case " . Chr(34) . "setVolume" . Chr(34) . ":`n                        if (`n                            typeof parameter === " . Chr(34) . "number" . Chr(34) . " &&`n                            parameter >= 0 &&`n                            parameter <= 100`n                        ) {`n                            audio.volume = parameter / 100;`n                        } else {`n                            console.error(`n                                " . Chr(34) . "Invalid volume value. Volume must be a number between 0 and 100" . Chr(34) . ",`n                            );`n                        }`n                        break;`n                    default:`n                        console.error(" . Chr(34) . "Invalid command specified" . Chr(34) . ");`n                        break;`n                }`n            }`n"

addFuncIfWeUseIt_StoreLocally := "`n// Define the StoreLocally function with embedded getLocalStorageUsagePercentage logic`nfunction StoreLocally(operation, saveLocation, data) {`n    if (operation === " . Chr(34) . "s" . Chr(34) . ") {`n        // Save data to local storage under specified saveLocation`n        localStorage.setItem(saveLocation, String(data));`n        return true; // Indicate success`n    } else if (operation === " . Chr(34) . "d" . Chr(34) . ") {`n        // Delete data from local storage under specified saveLocation`n        localStorage.removeItem(saveLocation);`n        return true; // Indicate success`n    } else if (operation === " . Chr(34) . "r" . Chr(34) . ") {`n        // Retrieve data from local storage under specified saveLocation`n        return localStorage.getItem(saveLocation) || null; // Return stored data or null if not found`n    } else if (operation === " . Chr(34) . "dALL" . Chr(34) . ") {`n        // Delete all data from local storage (clear all keys)`n        localStorage.clear();`n        return true; // Indicate success`n    } else if (operation === " . Chr(34) . "e" . Chr(34) . ") {`n        // Check if local storage is empty (no keys present)`n        return localStorage.length === 0; // Return true if empty, false if not empty`n    } else if (operation === " . Chr(34) . "u" . Chr(34) . ") {`n        // Embed the logic of getLocalStorageUsagePercentage function`n`n        var store = localStorage;`n        var testKey = " . Chr(34) . "$_test" . Chr(34) . ";`n`n        // Function to test storage capacity`n        function testCapacity(size) {`n            try {`n                store.setItem(testKey, new Array(size + 1).join('0'));`n                store.removeItem(testKey);`n                return true;`n            } catch (ex) {`n                return false;`n            }`n        }`n`n        // Binary search to find maximum size`n        var low = 0,`n            high = 1,`n            upperLimit = (1024 * 1024 * 1024) / 2; // Default upper limit (1 GB)`n`n        while (testCapacity(high) && high < upperLimit) {`n            low = high;`n            high *= 2;`n        }`n`n        // Refine the estimate using binary search`n        var precision = 8; // Number of iterations for precision`n        while (precision--) {`n            var mid = (low + high) / 2;`n            if (testCapacity(mid)) {`n                low = mid;`n            } else {`n                high = mid;`n            }`n        }`n`n        var totalBytes = Math.ceil(high) * 2; // Total storage limit in bytes`n`n        // Calculate used storage size directly`n        var usedBytes = Object.keys(store).reduce(function(total, key) {`n            return total + key.length + store[key].length * 2;`n        }, 0);`n`n        // Calculate percentage used`n        var usedPercentage = (usedBytes / totalBytes) * 100;`n        usedPercentage = usedPercentage.toFixed(2); // Round to 2 decimal places`n`n        return usedPercentage;`n    } else {`n        console.error(" . Chr(34) . "Invalid operation specified." . Chr(34) . ");`n        return false; // Indicate failure`n    }`n}`n"


addFuncIfWeUseIt_createToggleSwitch := "`n      // Function to create a toggle switch with width and height`n      function createToggleSwitch(parent, id, label, color, leftPos, topPos, width, height, switchFunction) {`n        let toggleSwitch = document.createElement(" . Chr(34) . "div" . Chr(34) . ");`n        toggleSwitch.className = " . Chr(34) . "toggle-switch" . Chr(34) . ";`n        toggleSwitch.id = id;`n        toggleSwitch.dataset.id = id;`n        toggleSwitch.dataset.isOn = " . Chr(34) . "false" . Chr(34) . ";`n        toggleSwitch.dataset.color = color; // Save color in dataset for use when toggled`n        toggleSwitch.style.width = width + " . Chr(34) . "px" . Chr(34) . "; // Set width`n        toggleSwitch.style.height = height + " . Chr(34) . "px" . Chr(34) . "; // Set height`n        toggleSwitch.style.backgroundColor = " . Chr(34) . "#ccc" . Chr(34) . ";`n        toggleSwitch.style.borderRadius = height / 2 + " . Chr(34) . "px" . Chr(34) . "; // Make border radius proportional to height`n        toggleSwitch.style.position = " . Chr(34) . "absolute" . Chr(34) . ";`n        toggleSwitch.style.left = leftPos + " . Chr(34) . "px" . Chr(34) . ";`n        toggleSwitch.style.top = topPos + " . Chr(34) . "px" . Chr(34) . ";`n        toggleSwitch.style.cursor = " . Chr(34) . "pointer" . Chr(34) . ";`n        toggleSwitch.style.transition = " . Chr(34) . "background-color 0.3s ease" . Chr(34) . ";`n`n        // Create knob for the toggle switch`n        let knob = document.createElement(" . Chr(34) . "div" . Chr(34) . ");`n        knob.className = " . Chr(34) . "knob" . Chr(34) . ";`n        knob.style.width = height - 4 + " . Chr(34) . "px" . Chr(34) . "; // Set knob width (slightly less than height)`n        knob.style.height = height - 4 + " . Chr(34) . "px" . Chr(34) . "; // Set knob height (slightly less than height)`n        knob.style.backgroundColor = " . Chr(34) . "#fff" . Chr(34) . ";`n        knob.style.borderRadius = " . Chr(34) . "50" . Chr(37) . "" . Chr(34) . ";`n        knob.style.position = " . Chr(34) . "absolute" . Chr(34) . ";`n        knob.style.top = " . Chr(34) . "2px" . Chr(34) . ";`n        knob.style.left = " . Chr(34) . "2px" . Chr(34) . ";`n        knob.style.transition = " . Chr(34) . "transform 0.3s ease" . Chr(34) . ";`n`n        toggleSwitch.appendChild(knob);`n        parent.appendChild(toggleSwitch);`n`n        // Create label for the toggle switch`n        let toggleLabel = document.createElement(" . Chr(34) . "div" . Chr(34) . ");`n        toggleLabel.textContent = label;`n        toggleLabel.style.position = " . Chr(34) . "absolute" . Chr(34) . ";`n        toggleLabel.style.left = leftPos + width + 10 + " . Chr(34) . "px" . Chr(34) . "; // Position label relative to switch`n        toggleLabel.style.top = topPos + 5 + " . Chr(34) . "px" . Chr(34) . ";`n        parent.appendChild(toggleLabel);`n`n        // Toggle switch click event`n        toggleSwitch.addEventListener(" . Chr(34) . "click" . Chr(34) . ", function () {`n          let isOn = toggleSwitch.dataset.isOn === " . Chr(34) . "true" . Chr(34) . ";`n          toggleSwitch.dataset.isOn = String(!isOn); // Toggle the state`n`n          const knob = toggleSwitch.querySelector(" . Chr(34) . ".knob" . Chr(34) . ");`n          knob.style.transform = isOn ? " . Chr(34) . "translateX(0)" . Chr(34) . " : " . Chr(34) . "translateX(" . Chr(34) . " + (width - height + 4) + " . Chr(34) . "px)" . Chr(34) . "; // Move knob based on state`n`n          const backgroundColor = isOn ? " . Chr(34) . "#ccc" . Chr(34) . " : toggleSwitch.dataset.color;`n          toggleSwitch.style.backgroundColor = backgroundColor; // Update background color`n`n          if (isOn == true) {`n            isOn = " . Chr(34) . "0" . Chr(34) . ";`n          } else {`n            isOn = " . Chr(34) . "1" . Chr(34) . ";`n          }`n`n          // Call the switch function with toggle switch ID and state`n          switchFunction(isOn);`n        });`n      }`n"


addFuncIfWeUseIt_getUrlParams := "`n      function getUrlParams() {`n        const queryString = window.location.search.substring(1); // Get the query string without the leading '?'`n        const paramPairs = queryString.split(" . Chr(34) . "&" . Chr(34) . "); // Split the query string into parameter key-value pairs`n`n        // Array to store parameter values starting from the first key's value`n        const paramValues = [];`n`n        // Iterate over each parameter pair`n        paramPairs.forEach((pair, index) => {`n          const pairParts = pair.split(" . Chr(34) . "=" . Chr(34) . ");`n`n          if (index === 0 && pairParts.length === 2) {`n            // For the first parameter pair (index === 0), add the value directly`n            const firstValue = decodeURIComponent(pairParts[1]);`n            paramValues.push(firstValue);`n          } else if (pairParts.length === 1) {`n            // For subsequent parameter pairs (values without keys), add the value directly`n            const value = decodeURIComponent(pairParts[0]);`n            paramValues.push(value);`n          }`n        });`n`n        // Join the parameter values into a single string separated by '&'`n        const resultString = paramValues.join(" . Chr(34) . "&" . Chr(34) . ");`n`n        return resultString;`n      }`n"

addFuncIfWeUseIt_reloadWithParams := "`n      function reloadWithParams(paramString) {`n        // Parse the parameter string to extract individual parameter values`n        const paramsArray = paramString.substring(1).split(" . Chr(34) . "&" . Chr(34) . "); // Remove leading '?' and split by '&'`n`n        // Construct an array to store valid parameter pairs`n        const paramPairs = [];`n`n        // Iterate over each parameter value`n        paramsArray.forEach((value) => {`n          // Check if the value is non-empty (to filter out any empty values)`n          if (value.trim() !== " . Chr(34) . "" . Chr(34) . ") {`n            // Push the parameter value to paramPairs`n            paramPairs.push(value); // No need to encode values here`n          }`n        });`n`n        // Join the parameter pairs into a query string format`n        const queryParams = paramPairs.join(" . Chr(34) . "&" . Chr(34) . ");`n`n        // Construct the new URL with the parameters and reload the page`n        const newUrl = " . Chr(96) . "${window.location.origin}${window.location.pathname}?${queryParams}" . Chr(96) . ";`n        window.location.href = newUrl;`n      }`n"


addFuncIfWeUseIt_PlayVideoFromBase64 := "`n      function PlayVideoFromBase64(parentElement, base64Data, id, x, y, width, height, autoplay) {`n        // Create a container div for the video player`n        const playerContainer = document.createElement(" . Chr(34) . "div" . Chr(34) . ");`n        playerContainer.id = id; // Set the id attribute`n        playerContainer.style.position = " . Chr(34) . "absolute" . Chr(34) . ";`n        playerContainer.style.left = " . Chr(96) . "${x}px" . Chr(96) . ";`n        playerContainer.style.top = " . Chr(96) . "${y}px" . Chr(96) . ";`n        playerContainer.style.width = " . Chr(96) . "${width}px" . Chr(96) . ";`n        playerContainer.style.height = " . Chr(96) . "${height}px" . Chr(96) . ";`n`n        // Create a " . Chr(60) . Chr(118) . Chr(105) . Chr(100) . Chr(101) . Chr(111) . Chr(62) . " element for the video player`n        const videoElement = document.createElement(" . Chr(34) . "video" . Chr(34) . ");`n        videoElement.style.width = " . Chr(34) . "100" . Chr(37) . "" . Chr(34) . ";`n        videoElement.style.height = " . Chr(34) . "100" . Chr(37) . "" . Chr(34) . ";`n        videoElement.controls = true; // Show player controls`n`n        // Convert Base64 string to Blob`n        const blob = base64ToBlob(base64Data);`n`n        // Create a Blob URL from the Blob object`n        const blobUrl = URL.createObjectURL(blob);`n`n        // Set the video source to the Blob URL`n        videoElement.src = blobUrl;`n`n        // Set autoplay attribute based on the autoplay parameter`n        if (autoplay) {`n          videoElement.autoplay = true;`n        }`n`n        // Append the video element to the player container`n        playerContainer.appendChild(videoElement);`n`n        // Append the player container to the specified parent element`n        parentElement.appendChild(playerContainer);`n      }`n`n      // Function to convert Base64 string to Blob`n      function base64ToBlob(base64Data) {`n        const byteCharacters = atob(base64Data);`n        const byteNumbers = new Array(byteCharacters.length);`n        for (let i = 0; i < byteCharacters.length; i++) {`n          byteNumbers[i] = byteCharacters.charCodeAt(i);`n        }`n        const byteArray = new Uint8Array(byteNumbers);`n        return new Blob([byteArray]);`n      }`n"


addFuncIfWeUseIt_PlayVideoFromUrl := "`n      // Define the PlayVideoFromUrl function`n      function PlayVideoFromUrl(parentElement, videoUrl, id, x, y, width, height, autoplay) {`n        // Create a container div for the video player`n        const playerContainer = document.createElement(" . Chr(34) . "div" . Chr(34) . ");`n        playerContainer.id = id; // Set the id attribute`n        playerContainer.style.position = " . Chr(34) . "absolute" . Chr(34) . ";`n        playerContainer.style.left = " . Chr(96) . "${x}px" . Chr(96) . ";`n        playerContainer.style.top = " . Chr(96) . "${y}px" . Chr(96) . ";`n        playerContainer.style.width = " . Chr(96) . "${width}px" . Chr(96) . ";`n        playerContainer.style.height = " . Chr(96) . "${height}px" . Chr(96) . ";`n`n        // Create a <video> element for the video player`n        const videoElement = document.createElement(" . Chr(34) . "video" . Chr(34) . ");`n        videoElement.style.width = " . Chr(34) . "100" . Chr(37) . "" . Chr(34) . ";`n        videoElement.style.height = " . Chr(34) . "100" . Chr(37) . "" . Chr(34) . ";`n        videoElement.controls = true; // Show player controls`n`n        // Set the video source to the specified URL`n        videoElement.src = videoUrl;`n`n        // Set autoplay attribute based on the autoplay parameter`n        if (autoplay) {`n          videoElement.autoplay = true;`n        }`n`n        // Append the video element to the player container`n        playerContainer.appendChild(videoElement);`n`n        // Append the player container to the specified parent element`n        parentElement.appendChild(playerContainer);`n      }`n"


addFuncIfWeUseIt_PlayYoutubeVid := "`n      function PlayYoutubeVid(parentElement, videoUrl, id, x, y, width, height, autoplay) {`n        // Create a container div for the YouTube player`n        const playerContainer = document.createElement(" . Chr(34) . "div" . Chr(34) . ");`n        playerContainer.id = id; // Set the id attribute`n        playerContainer.style.position = " . Chr(34) . "absolute" . Chr(34) . ";`n        playerContainer.style.left = " . Chr(96) . "${x}px" . Chr(96) . ";`n        playerContainer.style.top = " . Chr(96) . "${y}px" . Chr(96) . ";`n        playerContainer.style.width = " . Chr(96) . "${width}px" . Chr(96) . ";`n        playerContainer.style.height = " . Chr(96) . "${height}px" . Chr(96) . ";`n`n        // Extract video ID from the YouTube URL`n        const videoId = extractVideoId(videoUrl);`n`n        // Create an iframe element for the YouTube player`n        const iframe = document.createElement(" . Chr(34) . "iframe" . Chr(34) . ");`n        iframe.width = " . Chr(34) . "100" . Chr(37) . "" . Chr(34) . ";`n        iframe.height = " . Chr(34) . "100" . Chr(37) . "" . Chr(34) . ";`n`n        // Construct the YouTube video URL with autoplay and mute parameters`n        let autoplayParams = autoplay ? " . Chr(34) . "autoplay=1" . Chr(34) . " : " . Chr(34) . "autoplay=0" . Chr(34) . ";`n        let muteParams = autoplay ? " . Chr(34) . "mute=1" . Chr(34) . " : " . Chr(34) . "mute=0" . Chr(34) . ";`n        iframe.src = " . Chr(96) . "https://www.youtube.com/embed/${videoId}?${autoplayParams}&${muteParams}" . Chr(96) . ";`n        iframe.frameBorder = " . Chr(34) . "0" . Chr(34) . ";`n        iframe.allowFullscreen = true; // Allow fullscreen mode`n`n        // Append the iframe to the player container`n        playerContainer.appendChild(iframe);`n`n        // Append the player container to the specified parent element`n        parentElement.appendChild(playerContainer);`n      }`n`n      // Function to extract video ID from YouTube URL`n      function extractVideoId(url) {`n        const videoIdRegex = /[?&]v=([^&]+)/;`n        const match = url.match(videoIdRegex);`n        return match && match[1] ? match[1] : " . Chr(34) . "" . Chr(34) . ";`n      }`n"


addFuncIfWeUseIt_changeFavicon := "`n      async function changeFavicon(iconSource) {`n        const head = document.head || document.getElementsByTagName(" . Chr(34) . "head" . Chr(34) . ")[0];`n`n        // Remove existing favicon link element if it exists`n        const existingFavicon = document.getElementById(" . Chr(34) . "dynamic-favicon" . Chr(34) . ");`n        if (existingFavicon) {`n          head.removeChild(existingFavicon);`n        }`n`n        // Create a new favicon link element`n        const favicon = document.createElement(" . Chr(34) . "link" . Chr(34) . ");`n        favicon.id = " . Chr(34) . "dynamic-favicon" . Chr(34) . ";`n        favicon.rel = " . Chr(34) . "shortcut icon" . Chr(34) . ";`n`n        try {`n          let mimeType;`n`n          // Determine if iconSource is a URL or a Base64 string`n          if (isUrl(iconSource)) {`n            // If iconSource is a URL, fetch the resource to get the MIME type`n            const response = await fetch(iconSource);`n            const buffer = await response.arrayBuffer();`n            mimeType = getMimeTypeFromArrayBuffer(buffer);`n            favicon.type = mimeType || " . Chr(34) . "image/x-icon" . Chr(34) . "; // Default to 'image/x-icon' if MIME type is not found`n            favicon.href = iconSource;`n          } else {`n            // If iconSource is a Base64 string, convert it to a Blob`n            const blob = b64toBlob(iconSource);`n            mimeType = getMimeTypeFromBlob(blob);`n            favicon.type = mimeType || " . Chr(34) . "image/png" . Chr(34) . "; // Default to 'image/png' if MIME type is not found`n            favicon.href = URL.createObjectURL(blob);`n          }`n`n        // Get the current favicon element (if exists)`n        const existingFavicon = document.querySelector('link[rel=" . Chr(34) . "icon" . Chr(34) . "]');`n`n        // Replace the current favicon with the new one`n        if (existingFavicon) {`n          // If a favicon exists, replace it`n          document.head.removeChild(existingFavicon); // Remove the existing favicon`n        }`n`n          // Append the new favicon link element to the head`n          document.head.appendChild(favicon);`n        } catch (error) {`n          console.error(" . Chr(34) . "Error changing favicon:" . Chr(34) . ", error);`n        }`n      }`n`n      // Function to check if a string is a URL`n      function isUrl(str) {`n        try {`n          new URL(str);`n          return true;`n        } catch (error) {`n          return false;`n        }`n      }`n`n      // Function to get MIME type from an ArrayBuffer`n      function getMimeTypeFromArrayBuffer(buffer) {`n        const view = new DataView(buffer);`n        if (view.getUint16(0, false) == 0xffd8) {`n          return " . Chr(34) . "image/jpeg" . Chr(34) . "; // JPEG format`n        } else if (view.getUint32(0, false) == 0x89504e47) {`n          return " . Chr(34) . "image/png" . Chr(34) . "; // PNG format`n        } else if (view.getUint16(0, false) == 0x4949 || view.getUint16(0, false) == 0x4d4d) {`n          return " . Chr(34) . "image/tiff" . Chr(34) . "; // TIFF format`n        } else if (view.getUint16(0, false) == 0x424d) {`n          return " . Chr(34) . "image/bmp" . Chr(34) . "; // BMP format`n        }`n        return null; // Unknown format`n      }`n`n      // Function to get MIME type from a Blob`n      function getMimeTypeFromBlob(blob) {`n        const url = URL.createObjectURL(blob);`n        const img = new Image();`n`n        img.onload = function () {`n          URL.revokeObjectURL(url);`n          // Clean up the Blob URL`n        };`n`n        img.src = url;`n`n        // Return the MIME type detected by the browser`n        return img.type || " . Chr(34) . "image/png" . Chr(34) . ";`n        // Default to 'image/png' if MIME type is not available`n      }`n`n      // Function to convert a Base64 string to a Blob`n      function b64toBlob(b64Data) {`n        const byteCharacters = atob(b64Data);`n        const byteArrays = [];`n`n        for (let i = 0; i < byteCharacters.length; i++) {`n          byteArrays.push(byteCharacters.charCodeAt(i));`n        }`n`n        return new Blob([new Uint8Array(byteArrays)]);`n      }`n"


addFuncIfWeUseIt_OnKeyPress := "`n      var lastKeyPressed = " . Chr(34) . "" . Chr(34) . ";`n`n      function trackLastKeyPressed() {`n        document.addEventListener(" . Chr(34) . "keydown" . Chr(34) . ", function (event) {`n          lastKeyPressed = event.key;`n          // console.log(lastKeyPressed);`n        });`n      }`n`n      function getLastKeyPressed() {`n        return lastKeyPressed;`n      }`n`n      // Call the trackLastKeyPressed function to start tracking key presses`n      trackLastKeyPressed();`n"

addFuncIfWeUseIt_GetKeyState := "`n      let keyState = {}; // Object to track key states`n`n      // Function to handle keydown events`n      function handleKeyDown(event) {`n        keyState[event.key] = true; // Set key state to true when pressed`n      }`n`n      // Function to handle keyup events`n      function handleKeyUp(event) {`n        keyState[event.key] = false; // Set key state to false when released`n      }`n`n      // Add event listeners for keydown and keyup events`n      document.addEventListener(" . Chr(34) . "keydown" . Chr(34) . ", handleKeyDown);`n      document.addEventListener(" . Chr(34) . "keyup" . Chr(34) . ", handleKeyUp);`n`n      // Function to get the state of a key dynamically`n      function GetKeyState(key, DownOrUp) {`n        return DownOrUp === " . Chr(34) . "D" . Chr(34) . " ? keyState[key] : !keyState[key];`n      }`n"


addFuncIfWeUseIt_createCustomDropdown := "`n      // Function to create and populate the dropdown dynamically within a specified parent div`n      function createCustomDropdown(parent, id, data, color, leftPos, topPos, width, height, onChangeFunction) {`n        // Split the data string into an array of options`n        const options = data.split(" . Chr(34) . "|" . Chr(34) . ").map((option) => option.trim());`n`n        // Create a select element (dropdown)`n        const selectElement = document.createElement(" . Chr(34) . "select" . Chr(34) . ");`n`n        // Set attributes and styles for the select element`n        selectElement.id = id;`n        selectElement.style.width = width + " . Chr(34) . "px" . Chr(34) . ";`n        selectElement.style.height = height + " . Chr(34) . "px" . Chr(34) . ";`n        selectElement.style.left = leftPos + " . Chr(34) . "px" . Chr(34) . ";`n        selectElement.style.top = topPos + " . Chr(34) . "px" . Chr(34) . ";`n        selectElement.style.position = " . Chr(34) . "absolute" . Chr(34) . ";`n        selectElement.style.backgroundColor = color;`n        selectElement.style.color = " . Chr(34) . "white" . Chr(34) . "; // Set text color to white`n        selectElement.style.border = " . Chr(34) . "none" . Chr(34) . "; // Remove default border`n        selectElement.style.borderRadius = " . Chr(34) . "5px" . Chr(34) . "; // Add border radius`n        selectElement.style.padding = " . Chr(34) . "5px" . Chr(34) . "; // Add padding`n        selectElement.style.cursor = " . Chr(34) . "pointer" . Chr(34) . "; // Change cursor on hover`n`n        // Populate the dropdown with options`n        options.forEach((optionText) => {`n          const optionElement = document.createElement(" . Chr(34) . "option" . Chr(34) . ");`n          optionElement.textContent = optionText;`n          selectElement.appendChild(optionElement);`n        });`n`n        // Add event listener to handle option selection`n        selectElement.addEventListener(" . Chr(34) . "change" . Chr(34) . ", function () {`n          const selectedText = this.options[this.selectedIndex].textContent;`n          onChangeFunction(selectedText);`n        });`n`n        // Append the dropdown to the specified parent element (Gui1 div)`n        const parentElement = parent instanceof HTMLElement ? parent : document.getElementById(parent);`n        if (parentElement) {`n          parentElement.appendChild(selectElement);`n        } else {`n          console.error(" . Chr(96) . "Parent element " . Chr(34) . "${parent}" . Chr(34) . " not found." . Chr(96) . ");`n        }`n      }`n"


addFuncIfWeUseIt_StrLower := "`n      function StrLower(string) {`n        return string.toLowerCase();`n      }`n"

addFuncIfWeUseIt_getDataFromAPI := "`n      async function getDataFromAPI(url) {`n        try {`n          const response = await fetch(url);`n          if (!response.ok) {`n            throw new Error(" . Chr(34) . "Network response was not ok" . Chr(34) . ");`n          }`n          const data = await response.json();`n          return data;`n        } catch (error) {`n          console.error(" . Chr(34) . "Error fetching data:" . Chr(34) . ", error);`n          return null;`n        }`n      }`n"

addFuncIfWeUseIt_getDataFromJSON := "`n      function getDataFromJSON(jsonData, jsonPath) {`n        const pathSegments = jsonPath.split(" . Chr(34) . "." . Chr(34) . "); // Split the path into segments`n        let currentData = jsonData; // Use jsonData directly (already an object)`n`n        try {`n          for (const segment of pathSegments) {`n            if (currentData && typeof currentData === " . Chr(34) . "object" . Chr(34) . ") {`n              if (segment.includes(" . Chr(34) . "[" . Chr(34) . ") && segment.includes(" . Chr(34) . "]" . Chr(34) . ")) {`n                // Handle array index notation e.g., " . Chr(34) . "data[21].employee_name" . Chr(34) . "`n                const arrayIndex = segment.match(/" . Chr(92) . "[(" . Chr(92) . "d+)" . Chr(92) . "]/); // Extract the array index`n                if (arrayIndex) {`n                  const arrayName = segment.substring(0, segment.indexOf(" . Chr(34) . "[" . Chr(34) . "));`n                  const index = parseInt(arrayIndex[1]);`n                  currentData = currentData[arrayName][index];`n                } else {`n                  return undefined; // Invalid array index notation`n                }`n              } else {`n                // Handle regular object property notation e.g., " . Chr(34) . "employee_name" . Chr(34) . "`n                currentData = currentData[segment];`n              }`n            } else {`n              console.log(" . Chr(34) . "Invalid path segment or data type encountered." . Chr(34) . ");`n              return undefined;`n            }`n          }`n        } catch (error) {`n          console.error(" . Chr(34) . "Error accessing data:" . Chr(34) . ", error);`n          return undefined;`n        }`n`n        return currentData;`n      }`n"

addFuncIfWeUseIt_createCheckbox := "`n      function createCheckbox(parent, id, label, isChecked, leftPos, topPos, checkboxFunction) {`n        // Create checkbox container`n        let checkboxContainer = document.createElement(" . Chr(34) . "div" . Chr(34) . ");`n        checkboxContainer.style.position = " . Chr(34) . "absolute" . Chr(34) . ";`n        checkboxContainer.id = id;`n        checkboxContainer.style.left = leftPos + " . Chr(34) . "px" . Chr(34) . ";`n        checkboxContainer.style.top = topPos + " . Chr(34) . "px" . Chr(34) . ";`n        parent.appendChild(checkboxContainer);`n`n        // Create checkbox input element`n        let checkboxInput = document.createElement(" . Chr(34) . "input" . Chr(34) . ");`n        checkboxInput.type = " . Chr(34) . "checkbox" . Chr(34) . ";`n`n        checkboxInput.checked = isChecked;`n        checkboxInput.style.marginRight = " . Chr(34) . "8px" . Chr(34) . "; // Spacing between checkbox and label`n        checkboxInput.style.verticalAlign = " . Chr(34) . "-2px" . Chr(34) . "; // Align label vertically with checkbox`n        checkboxContainer.appendChild(checkboxInput);`n`n        // Create label for the checkbox`n        let checkboxLabel = document.createElement(" . Chr(34) . "label" . Chr(34) . ");`n        checkboxLabel.textContent = label;`n        checkboxLabel.setAttribute(" . Chr(34) . "for" . Chr(34) . ", id); // Associate label with checkbox input`n        checkboxContainer.appendChild(checkboxLabel);`n`n        // Checkbox change event`n        checkboxInput.addEventListener(" . Chr(34) . "change" . Chr(34) . ", function () {`n          // Call the checkbox function with checkbox state`n          checkboxFunction(checkboxInput.checked ? " . Chr(34) . "1" . Chr(34) . " : " . Chr(34) . "0" . Chr(34) . "); // Return " . Chr(34) . "1" . Chr(34) . " or " . Chr(34) . "0" . Chr(34) . " based on checkbox state`n        });`n      }`n"

addFuncIfWeUseIt_createCustomIframe := "`n      function createCustomIframe(parentDiv, id, url, color, leftPos, topPos, width, height, round, onChangeFunction) {`n        // Create a new iframe element`n        const iframe = document.createElement(" . Chr(34) . "iframe" . Chr(34) . ");`n`n        // Set iframe attributes`n        iframe.id = id;`n        iframe.src = url; // Set iframe source URL`n        iframe.width = width;`n        iframe.height = height;`n        iframe.style.backgroundColor = color;`n        iframe.style.border = " . Chr(34) . "none" . Chr(34) . ";`n        iframe.style.position = " . Chr(34) . "absolute" . Chr(34) . ";`n        iframe.style.left = leftPos + " . Chr(34) . "px" . Chr(34) . ";`n        iframe.style.top = topPos + " . Chr(34) . "px" . Chr(34) . ";`n`n        // Set border radius`n        iframe.style.borderRadius = round + " . Chr(34) . "px" . Chr(34) . ";`n`n        // Set onChange event listener if provided`n        if (typeof onChangeFunction === " . Chr(34) . "function" . Chr(34) . ") {`n          iframe.onload = function () {`n            // Attach an event listener to the iframe's contentWindow for change events`n            iframe.contentWindow.addEventListener(" . Chr(34) . "change" . Chr(34) . ", onChangeFunction);`n          };`n        }`n`n        // Append the iframe to the specified parent div element`n        parentDiv.appendChild(iframe);`n      }`n"



addFuncIfWeUseIt_AddIDE1 := "`n      function AddIDE(parent, xPos, yPos, w, h, id, font = 18, langName = " . Chr(34) . "autohotkey" . Chr(34) . ", onChangeFunc, initialText = " . Chr(34) . "" . Chr(34) . ") {`n        var langTools = ace.require(" . Chr(34) . "ace/ext/language_tools" . Chr(34) . ");`n`n        let Completer = {`n          getCompletions: function (editor, session, pos, prefix, callback) {`n`n            if (prefix.startsWith(" . Chr(34) . "p" . Chr(34) . ")) {`n                // Continue executing if the prefix starts with " . Chr(34) . "p" . Chr(34) . "`n            } else {`n                // Return early if the prefix does not start with " . Chr(34) . "p" . Chr(34) . " and its length is not greater than 1`n                if (prefix.length <= 1) {`n                    callback(null, []); // Return an empty array of completions`n                    return;`n                }`n            }`n`n            let prefixLower = prefix.toLowerCase();`n            let filteredTables = hth.filter(function (table) {`n              return table.name.toLowerCase().startsWith(prefixLower);`n            });`n            // filteredTables.sort(function(a, b) {`n            //     return a.name.length - b.name.length;`n            // });`n            let limitedTables = filteredTables; //.slice(-10);`n`n            callback(`n              null,`n              limitedTables.map(function (table) {`n                return {`n                  caption: table.name,`n                  value: table.name,`n                };`n              }),`n            );`n          },`n        };`n        let hth = [{ name: " . Chr(34) . "#AllowSameLineComments" . Chr(34) . " }, { name: " . Chr(34) . "#ClipboardTimeout" . Chr(34) . " }, { name: " . Chr(34) . "#CommentFlag" . Chr(34) . " }, { name: " . Chr(34) . "#Delimiter" . Chr(34) . " }, { name: " . Chr(34) . "#DerefChar" . Chr(34) . " }, { name: " . Chr(34) . "#ErrorStdOut" . Chr(34) . " }, { name: " . Chr(34) . "#EscapeChar" . Chr(34) . " }, { name: " . Chr(34) . "#HotkeyInterval" . Chr(34) . " }, { name: " . Chr(34) . "#HotkeyModifierTimeout" . Chr(34) . " }, { name: " . Chr(34) . "#Hotstring" . Chr(34) . " }, { name: " . Chr(34) . "#If" . Chr(34) . " }, { name: " . Chr(34) . "#IfTimeout" . Chr(34) . " }, { name: " . Chr(34) . "#IfWinActive" . Chr(34) . " }, { name: " . Chr(34) . "#IfWinExist" . Chr(34) . " }, { name: " . Chr(34) . "#IfWinNotActive" . Chr(34) . " }, { name: " . Chr(34) . "#IfWinNotExist" . Chr(34) . " }, { name: " . Chr(34) . "#Include" . Chr(34) . " }, { name: " . Chr(34) . "#IncludeAgain" . Chr(34) . " }, { name: " . Chr(34) . "#InputLevel" . Chr(34) . " }, { name: " . Chr(34) . "#InstallKeybdHook" . Chr(34) . " }, { name: " . Chr(34) . "#InstallMouseHook" . Chr(34) . " }, { name: " . Chr(34) . "#KeyHistory" . Chr(34) . " }, { name: " . Chr(34) . "#LTrim" . Chr(34) . " }, { name: " . Chr(34) . "#MaxHotkeysPerInterval" . Chr(34) . " }, { name: " . Chr(34) . "#MaxMem" . Chr(34) . " }, { name: " . Chr(34) . "#MaxThreads" . Chr(34) . " }, { name: " . Chr(34) . "#MaxThreadsBuffer" . Chr(34) . " }, { name: " . Chr(34) . "#MaxThreadsPerHotkey" . Chr(34) . " }, { name: " . Chr(34) . "#MenuMaskKey" . Chr(34) . " }, { name: " . Chr(34) . "#NoEnv" . Chr(34) . " }, { name: " . Chr(34) . "#NoTrayIcon" . Chr(34) . " }, { name: " . Chr(34) . "#Persistent" . Chr(34) . " }, { name: " . Chr(34) . "#Requires" . Chr(34) . " }, { name: " . Chr(34) . "#SingleInstance" . Chr(34) . " }, { name: " . Chr(34) . "#UseHook" . Chr(34) . " }, { name: " . Chr(34) . "#Warn" . Chr(34) . " }, { name: " . Chr(34) . "#WinActivateForce" . Chr(34) . " }, { name: " . Chr(34) . "break" . Chr(34) . " }, { name: " . Chr(34) . "case" . Chr(34) . " }, { name: " . Chr(34) . "catch" . Chr(34) . " }, { name: " . Chr(34) . "continue" . Chr(34) . " }, { name: " . Chr(34) . "else" . Chr(34) . " }, { name: " . Chr(34) . "finally" . Chr(34) . " }, { name: " . Chr(34) . "for" . Chr(34) . " }, { name: " . Chr(34) . "gosub" . Chr(34) . " }, { name: " . Chr(34) . "goto" . Chr(34) . " }, { name: " . Chr(34) . "if" . Chr(34) . " }, { name: " . Chr(34) . "IfEqual" . Chr(34) . " }, { name: " . Chr(34) . "IfExist" . Chr(34) . " }, { name: " . Chr(34) . "IfGreater" . Chr(34) . " }, { name: " . Chr(34) . "IfGreaterOrEqual" . Chr(34) . " }, { name: " . Chr(34) . "IfInString" . Chr(34) . " }, { name: " . Chr(34) . "IfLess" . Chr(34) . " }, { name: " . Chr(34) . "IfLessOrEqual" . Chr(34) . " }, { name: " . Chr(34) . "IfMsgBox" . Chr(34) . " }, { name: " . Chr(34) . "IfNotEqual" . Chr(34) . " }, { name: " . Chr(34) . "IfNotExist" . Chr(34) . " }, { name: " . Chr(34) . "IfNotInString" . Chr(34) . " }, { name: " . Chr(34) . "IfWinActive" . Chr(34) . " }, { name: " . Chr(34) . "IfWinExist" . Chr(34) . " }, { name: " . Chr(34) . "IfWinNotActive" . Chr(34) . " }, { name: " . Chr(34) . "IfWinNotExist" . Chr(34) . " }, { name: " . Chr(34) . "Loop" . Chr(34) . " }, { name: " . Chr(34) . "return" . Chr(34) . " }, { name: " . Chr(34) . "switch" . Chr(34) . " }, { name: " . Chr(34) . "throw" . Chr(34) . " }, { name: " . Chr(34) . "try" . Chr(34) . " }, { name: " . Chr(34) . "until" . Chr(34) . " }, { name: " . Chr(34) . "while" . Chr(34) . " }, { name: " . Chr(34) . "__Call" . Chr(34) . " }, { name: " . Chr(34) . "__Delete" . Chr(34) . " }, { name: " . Chr(34) . "__Get" . Chr(34) . " }, { name: " . Chr(34) . "__New" . Chr(34) . " }, { name: " . Chr(34) . "__Set" . Chr(34) . " }, { name: " . Chr(34) . "ahk_class" . Chr(34) . " }, { name: " . Chr(34) . "ahk_exe" . Chr(34) . " }, { name: " . Chr(34) . "ahk_group" . Chr(34) . " }, { name: " . Chr(34) . "ahk_id" . Chr(34) . " }, { name: " . Chr(34) . "ahk_pid" . Chr(34) . " }, { name: " . Chr(34) . "and" . Chr(34) . " }, { name: " . Chr(34) . "base" . Chr(34) . " }, { name: " . Chr(34) . "ByRef" . Chr(34) . " }, { name: " . Chr(34) . "class" . Chr(34) . " }, { name: " . Chr(34) . "extends" . Chr(34) . " }, { name: " . Chr(34) . "false" . Chr(34) . " }, { name: " . Chr(34) . "Files" . Chr(34) . " }, { name: " . Chr(34) . "global" . Chr(34) . " }, { name: " . Chr(34) . "local" . Chr(34) . " }, { name: " . Chr(34) . "new" . Chr(34) . " }, { name: " . Chr(34) . "not" . Chr(34) . " }, { name: " . Chr(34) . "or" . Chr(34) . " }, { name: " . Chr(34) . "Parse" . Chr(34) . " }, { name: " . Chr(34) . "ParseInt" . Chr(34) . " }, { name: " . Chr(34) . "Read" . Chr(34) . " }, { name: " . Chr(34) . "Reg" . Chr(34) . " }, { name: " . Chr(34) . "static" . Chr(34) . " }, { name: " . Chr(34) . "true" . Chr(34) . " }, { name: " . Chr(34) . "A_AhkPath" . Chr(34) . " }, { name: " . Chr(34) . "A_AhkVersion" . Chr(34) . " }, { name: " . Chr(34) . "A_AppData" . Chr(34) . " }, { name: " . Chr(34) . "A_AppDataCommon" . Chr(34) . " }, { name: " . Chr(34) . "A_Args" . Chr(34) . " }, { name: " . Chr(34) . "A_AutoTrim" . Chr(34) . " }, { name: " . Chr(34) . "A_BatchLines" . Chr(34) . " }, { name: " . Chr(34) . "A_CaretX" . Chr(34) . " }, { name: " . Chr(34) . "A_CaretY" . Chr(34) . " }, { name: " . Chr(34) . "A_ComputerName" . Chr(34) . " }, { name: " . Chr(34) . "A_ComSpec" . Chr(34) . " }, { name: " . Chr(34) . "A_ControlDelay" . Chr(34) . " }, { name: " . Chr(34) . "A_CoordModeCaret" . Chr(34) . " }, { name: " . Chr(34) . "A_CoordModeMenu" . Chr(34) . " }, { name: " . Chr(34) . "A_CoordModeMouse" . Chr(34) . " }, { name: " . Chr(34) . "A_CoordModePixel" . Chr(34) . " }, { name: " . Chr(34) . "A_CoordModeToolTip" . Chr(34) . " }, { name: " . Chr(34) . "A_Cursor" . Chr(34) . " }, { name: " . Chr(34) . "A_DD" . Chr(34) . " }, { name: " . Chr(34) . "A_DDD" . Chr(34) . " }, { name: " . Chr(34) . "A_DDDD" . Chr(34) . " }, { name: " . Chr(34) . "A_DefaultGui" . Chr(34) . " }, { name: " . Chr(34) . "A_DefaultListView" . Chr(34) . " }, { name: " . Chr(34) . "A_DefaultMouseSpeed" . Chr(34) . " }, { name: " . Chr(34) . "A_DefaultTreeView" . Chr(34) . " }, { name: " . Chr(34) . "A_Desktop" . Chr(34) . " }, { name: " . Chr(34) . "A_DesktopCommon" . Chr(34) . " }, { name: " . Chr(34) . "A_DetectHiddenText" . Chr(34) . " }, { name: " . Chr(34) . "A_DetectHiddenWindows" . Chr(34) . " }, { name: " . Chr(34) . "A_EndChar" . Chr(34) . " }, { name: " . Chr(34) . "A_EventInfo" . Chr(34) . " }, { name: " . Chr(34) . "A_ExitReason" . Chr(34) . " }, { name: " . Chr(34) . "A_FileEncoding" . Chr(34) . " }, { name: " . Chr(34) . "A_FormatFloat" . Chr(34) . " }, { name: " . Chr(34) . "A_FormatInteger" . Chr(34) . " }, { name: " . Chr(34) . "A_Gui" . Chr(34) . " }, { name: " . Chr(34) . "A_GuiControl" . Chr(34) . " }, { name: " . Chr(34) . "A_GuiControlEvent" . Chr(34) . " }, { name: " . Chr(34) . "A_GuiEvent" . Chr(34) . " }, { name: " . Chr(34) . "A_GuiHeight" . Chr(34) . " }, { name: " . Chr(34) . "A_GuiWidth" . Chr(34) . " }, { name: " . Chr(34) . "A_GuiX" . Chr(34) . " }, { name: " . Chr(34) . "A_GuiY" . Chr(34) . " }, { name: " . Chr(34) . "A_Hour" . Chr(34) . " }, { name: " . Chr(34) . "A_IconFile" . Chr(34) . " }, { name: " . Chr(34) . "A_IconHidden" . Chr(34) . " }, { name: " . Chr(34) . "A_IconNumber" . Chr(34) . " }, { name: " . Chr(34) . "A_IconTip" . Chr(34) . " }, { name: " . Chr(34) . "A_Index" . Chr(34) . " }, { name: " . Chr(34) . "A_IPAddress1" . Chr(34) . " }, { name: " . Chr(34) . "A_IPAddress2" . Chr(34) . " }, { name: " . Chr(34) . "A_IPAddress3" . Chr(34) . " }, { name: " . Chr(34) . "A_IPAddress4" . Chr(34) . " }, { name: " . Chr(34) . "A_Is64bitOS" . Chr(34) . " }, { name: " . Chr(34) . "A_IsAdmin" . Chr(34) . " }, { name: " . Chr(34) . "A_IsCompiled" . Chr(34) . " }, { name: " . Chr(34) . "A_IsCritical" . Chr(34) . " }, { name: " . Chr(34) . "A_IsPaused" . Chr(34) . " }, { name: " . Chr(34) . "A_IsSuspended" . Chr(34) . " }, { name: " . Chr(34) . "A_IsUnicode" . Chr(34) . " }, { name: " . Chr(34) . "A_KeyDelay" . Chr(34) . " }, { name: " . Chr(34) . "A_KeyDelayPlay" . Chr(34) . " }, { name: " . Chr(34) . "A_KeyDuration" . Chr(34) . " }, { name: " . Chr(34) . "A_KeyDurationPlay" . Chr(34) . " }, { name: " . Chr(34) . "A_Language" . Chr(34) . " }, { name: " . Chr(34) . "A_LastKey" . Chr(34) . " }, { name: " . Chr(34) . "A_LastError" . Chr(34) . " }, { name: " . Chr(34) . "A_LineFile" . Chr(34) . " }, { name: " . Chr(34) . "A_LineNumber" . Chr(34) . " }, { name: " . Chr(34) . "A_ListLines" . Chr(34) . " }, { name: " . Chr(34) . "A_LoopField" . Chr(34) . " }, { name: " . Chr(34) . "A_LoopFileAttrib" . Chr(34) . " }, { name: " . Chr(34) . "A_LoopFileDir" . Chr(34) . " }, { name: " . Chr(34) . "A_LoopFileExt" . Chr(34) . " }, { name: " . Chr(34) . "A_LoopFileFullPath" . Chr(34) . " }, { name: " . Chr(34) . "A_LoopFileLongPath" . Chr(34) . " }, { name: " . Chr(34) . "A_LoopFileName" . Chr(34) . " }, { name: " . Chr(34) . "A_LoopFilePath" . Chr(34) . " }, { name: " . Chr(34) . "A_LoopFileShortName" . Chr(34) . " }, { name: " . Chr(34) . "A_LoopFileShortPath" . Chr(34) . " }, { name: " . Chr(34) . "A_LoopFileSize" . Chr(34) . " }, { name: " . Chr(34) . "A_LoopFileSizeKB" . Chr(34) . " }, { name: " . Chr(34) . "A_LoopFileSizeMB" . Chr(34) . " }, { name: " . Chr(34) . "A_LoopFileTimeAccessed" . Chr(34) . " }, { name: " . Chr(34) . "A_LoopFileTimeCreated" . Chr(34) . " }, { name: " . Chr(34) . "A_LoopFileTimeModified" . Chr(34) . " }, { name: " . Chr(34) . "A_LoopReadLine" . Chr(34) . " }, { name: " . Chr(34) . "A_LoopRegKey" . Chr(34) . " }, { name: " . Chr(34) . "A_LoopRegName" . Chr(34) . " }, { name: " . Chr(34) . "A_LoopRegSubKey" . Chr(34) . " }, { name: " . Chr(34) . "A_LoopRegTimeModified" . Chr(34) . " }, { name: " . Chr(34) . "A_LoopRegType" . Chr(34) . " }, { name: " . Chr(34) . "A_MDay" . Chr(34) . " }, { name: " . Chr(34) . "A_Min" . Chr(34) . " }, { name: " . Chr(34) . "A_MM" . Chr(34) . " }, { name: " . Chr(34) . "A_MMM" . Chr(34) . " }, { name: " . Chr(34) . "A_MMMM" . Chr(34) . " }, { name: " . Chr(34) . "A_Mon" . Chr(34) . " }, { name: " . Chr(34) . "A_MouseDelay" . Chr(34) . " }, { name: " . Chr(34) . "A_MouseDelayPlay" . Chr(34) . " }, { name: " . Chr(34) . "A_MSec" . Chr(34) . " }, { name: " . Chr(34) . "A_MyDocuments" . Chr(34) . " }, { name: " . Chr(34) . "A_Now" . Chr(34) . " }, { name: " . Chr(34) . "A_NowUTC" . Chr(34) . " }, { name: " . Chr(34) . "A_NumBatchLines" . Chr(34) . " }, { name: " . Chr(34) . "A_OSType" . Chr(34) . " }, { name: " . Chr(34) . "A_OSVersion" . Chr(34) . " }, { name: " . Chr(34) . "A_PriorHotkey" . Chr(34) . " }, { name: " . Chr(34) . "A_PriorKey" . Chr(34) . " }, { name: " . Chr(34) . "A_ProgramFiles" . Chr(34) . " }, { name: " . Chr(34) . "A_Programs" . Chr(34) . " }, { name: " . Chr(34) . "A_ProgramsCommon" . Chr(34) . " }, { name: " . Chr(34) . "A_PtrSize" . Chr(34) . " }, { name: " . Chr(34) . "A_RegView" . Chr(34) . " }, { name: " . Chr(34) . "A_ScreenDPI" . Chr(34) . " }, { name: " . Chr(34) . "A_ScreenHeight" . Chr(34) . " }, { name: " . Chr(34) . "A_ScreenWidth" . Chr(34) . " }, { name: " . Chr(34) . "A_ScriptDir" . Chr(34) . " }, { name: " . Chr(34) . "A_ScriptFullPath" . Chr(34) . " }, { name: " . Chr(34) . "A_ScriptHwnd" . Chr(34) . " }, { name: " . Chr(34) . "A_ScriptName" . Chr(34) . " }, { name: " . Chr(34) . "A_Sec" . Chr(34) . " }, { name: " . Chr(34) . "A_SendLevel" . Chr(34) . " }, { name: " . Chr(34) . "A_SendMode" . Chr(34) . " }, { name: " . Chr(34) . "A_Space" . Chr(34) . " }, { name: " . Chr(34) . "A_StartMenu" . Chr(34) . " }, { name: " . Chr(34) . "A_StartMenuCommon" . Chr(34) . " }, { name: " . Chr(34) . "A_Startup" . Chr(34) . " }, { name: " . Chr(34) . "A_StartupCommon" . Chr(34) . " }, { name: " . Chr(34) . "A_StoreCapsLockMode" . Chr(34) . " }, { name: " . Chr(34) . "A_StringCaseSense" . Chr(34) . " }, { name: " . Chr(34) . "A_Tab" . Chr(34) . " }, { name: " . Chr(34) . "A_Temp" . Chr(34) . " }, { name: " . Chr(34) . "A_ThisFunc" . Chr(34) . " }, { name: " . Chr(34) . "A_ThisHotkey" . Chr(34) . " }, { name: " . Chr(34) . "A_ThisLabel" . Chr(34) . " }, { name: " . Chr(34) . "A_ThisMenu" . Chr(34) . " }, { name: " . Chr(34) . "A_ThisMenuItem" . Chr(34) . " }, { name: " . Chr(34) . "A_ThisMenuItemPos" . Chr(34) . " }, { name: " . Chr(34) . "A_TickCount" . Chr(34) . " }, { name: " . Chr(34) . "A_TimeIdle" . Chr(34) . " }, { name: " . Chr(34) . "A_TimeIdleKeyboard" . Chr(34) . " }, { name: " . Chr(34) . "A_TimeIdleMouse" . Chr(34) . " }, { name: " . Chr(34) . "A_TimeIdlePhysical" . Chr(34) . " }, { name: " . Chr(34) . "A_TimeSincePriorHotkey" . Chr(34) . " }, { name: " . Chr(34) . "A_TimeSinceThisHotkey" . Chr(34) . " }, { name: " . Chr(34) . "A_TitleMatchMode" . Chr(34) . " }, { name: " . Chr(34) . "A_TitleMatchModeSpeed" . Chr(34) . " }, { name: " . Chr(34) . "A_UserName" . Chr(34) . " }, { name: " . Chr(34) . "A_WDay" . Chr(34) . " }, { name: " . Chr(34) . "A_WinDelay" . Chr(34) . " }, { name: " . Chr(34) . "A_WinDir" . Chr(34) . " }, { name: " . Chr(34) . "A_WorkingDir" . Chr(34) . " }, { name: " . Chr(34) . "A_YDay" . Chr(34) . " }, { name: " . Chr(34) . "A_Year" . Chr(34) . " }, { name: " . Chr(34) . "A_YWeek" . Chr(34) . " }, { name: " . Chr(34) . "A_YYYY" . Chr(34) . " }, { name: " . Chr(34) . "Clipboard" . Chr(34) . " }, { name: " . Chr(34) . "ClipboardAll" . Chr(34) . " }, { name: " . Chr(34) . "ComSpec" . Chr(34) . " }, { name: " . Chr(34) . "ErrorLevel" . Chr(34) . " }, { name: " . Chr(34) . "ProgramFiles" . Chr(34) . " }, { name: " . Chr(34) . "this" . Chr(34) . " }, { name: " . Chr(34) . "Abs" . Chr(34) . " }, { name: " . Chr(34) . "ACos" . Chr(34) . " }, { name: " . Chr(34) . "Array" . Chr(34) . " }, { name: " . Chr(34) . "Asc" . Chr(34) . " }, { name: " . Chr(34) . "ASin" . Chr(34) . " }, { name: " . Chr(34) . "ATan" . Chr(34) . " }, { name: " . Chr(34) . "Ceil" . Chr(34) . " }, { name: " . Chr(34) . "Chr" . Chr(34) . " }, { name: " . Chr(34) . "ComObjActive" . Chr(34) . " }, { name: " . Chr(34) . "ComObjArray" . Chr(34) . " }, { name: " . Chr(34) . "ComObjConnect" . Chr(34) . " }, { name: " . Chr(34) . "ComObjCreate" . Chr(34) . " }, { name: " . Chr(34) . "ComObject" . Chr(34) . " }, { name: " . Chr(34) . "ComObjError" . Chr(34) . " }, { name: " . Chr(34) . "ComObjFlags" . Chr(34) . " }, { name: " . Chr(34) . "ComObjGet" . Chr(34) . " }, { name: " . Chr(34) . "ComObjQuery" . Chr(34) . " }, { name: " . Chr(34) . "ComObjType" . Chr(34) . " }, { name: " . Chr(34) . "ComObjValue" . Chr(34) . " }, { name: " . Chr(34) . "Cos" . Chr(34) . " }, { name: " . Chr(34) . "DllCall" . Chr(34) . " }, { name: " . Chr(34) . "Exception" . Chr(34) . " }, { name: " . Chr(34) . "Exp" . Chr(34) . " }, { name: " . Chr(34) . "FileExist" . Chr(34) . " }, { name: " . Chr(34) . "FileOpen" . Chr(34) . " }, { name: " . Chr(34) . "Floor" . Chr(34) . " }, { name: " . Chr(34) . "Format" . Chr(34) . " }, { name: " . Chr(34) . "Func" . Chr(34) . " }, { name: " . Chr(34) . "getDataFromEndpoint" . Chr(34) . " }, { name: " . Chr(34) . "GetKeyName" . Chr(34) . " }, { name: " . Chr(34) . "GetKeySC" . Chr(34) . " }, { name: " . Chr(34) . "GetKeyState" . Chr(34) . " }, { name: " . Chr(34) . "GetKeyVK" . Chr(34) . " }, { name: " . Chr(34) . "Hotstring" . Chr(34) . " }, { name: " . Chr(34) . "Icon" . Chr(34) . " }, { name: " . Chr(34) . "IL_Add" . Chr(34) . " }, { name: " . Chr(34) . "IL_Create" . Chr(34) . " }, { name: " . Chr(34) . "IL_Destroy" . Chr(34) . " }, { name: " . Chr(34) . "InputHook" . Chr(34) . " }, { name: " . Chr(34) . "InStr" . Chr(34) . " }, { name: " . Chr(34) . "IsByRef" . Chr(34) . " }, { name: " . Chr(34) . "isConnectedToBackend" . Chr(34) . " }, { name: " . Chr(34) . "IsFunc" . Chr(34) . " }, { name: " . Chr(34) . "IsLabel" . Chr(34) . " }, { name: " . Chr(34) . "isMobileDevice" . Chr(34) . " }, { name: " . Chr(34) . "IsObject" . Chr(34) . " }, { name: " . Chr(34) . "Ln" . Chr(34) . " }, { name: " . Chr(34) . "LoadPicture" . Chr(34) . " }, { name: " . Chr(34) . "Log" . Chr(34) . " }, { name: " . Chr(34) . "LTrim" . Chr(34) . " }, { name: " . Chr(34) . "LV_Add" . Chr(34) . " }, { name: " . Chr(34) . "LV_Delete" . Chr(34) . " }, { name: " . Chr(34) . "LV_DeleteCol" . Chr(34) . " }, { name: " . Chr(34) . "LV_GetCount" . Chr(34) . " }, { name: " . Chr(34) . "LV_GetNext" . Chr(34) . " }, { name: " . Chr(34) . "LV_GetText" . Chr(34) . " }, { name: " . Chr(34) . "LV_Insert" . Chr(34) . " }, { name: " . Chr(34) . "LV_InsertCol" . Chr(34) . " }, { name: " . Chr(34) . "LV_Modify" . Chr(34) . " }, { name: " . Chr(34) . "LV_ModifyCol" . Chr(34) . " }, { name: " . Chr(34) . "LV_SetImageList" . Chr(34) . " }, { name: " . Chr(34) . "Max" . Chr(34) . " }, { name: " . Chr(34) . "MenuGetHandle" . Chr(34) . " }, { name: " . Chr(34) . "MenuGetName" . Chr(34) . " }, { name: " . Chr(34) . "Min" . Chr(34) . " }, { name: " . Chr(34) . "Mod" . Chr(34) . " }, { name: " . Chr(34) . "NumGet" . Chr(34) . " }, { name: " . Chr(34) . "NumPut" . Chr(34) . " }, { name: " . Chr(34) . "ObjAddRef" . Chr(34) . " }, { name: " . Chr(34) . "ObjBindMethod" . Chr(34) . " }, { name: " . Chr(34) . "ObjClone" . Chr(34) . " }, { name: " . Chr(34) . "ObjCount" . Chr(34) . " }, { name: " . Chr(34) . "ObjDelete" . Chr(34) . " }, { name: " . Chr(34) . "Object" . Chr(34) . " }, { name: " . Chr(34) . "ObjGetAddress" . Chr(34) . " }, { name: " . Chr(34) . "ObjGetBase" . Chr(34) . " }, { name: " . Chr(34) . "ObjGetCapacity" . Chr(34) . " }, { name: " . Chr(34) . "ObjHasKey" . Chr(34) . " }, { name: " . Chr(34) . "ObjInsert" . Chr(34) . " }, { name: " . Chr(34) . "ObjInsertAt" . Chr(34) . " }, { name: " . Chr(34) . "ObjLength" . Chr(34) . " }, { name: " . Chr(34) . "ObjMaxIndex" . Chr(34) . " }, { name: " . Chr(34) . "ObjMinIndex" . Chr(34) . " }, { name: " . Chr(34) . "ObjNewEnum" . Chr(34) . " }, { name: " . Chr(34) . "ObjPop" . Chr(34) . " }, { name: " . Chr(34) . "ObjPush" . Chr(34) . " }, { name: " . Chr(34) . "ObjRawGet" . Chr(34) . " }, { name: " . Chr(34) . "ObjRawSet" . Chr(34) . " }, { name: " . Chr(34) . "ObjRelease" . Chr(34) . " }, { name: " . Chr(34) . "ObjRemove" . Chr(34) . " }, { name: " . Chr(34) . "ObjRemoveAt" . Chr(34) . " }, { name: " . Chr(34) . "ObjSetBase" . Chr(34) . " }, { name: " . Chr(34) . "ObjSetCapacity" . Chr(34) . " }, { name: " . Chr(34) . "OnClipboardChange" . Chr(34) . " }, { name: " . Chr(34) . "OnError" . Chr(34) . " }, { name: " . Chr(34) . "OnExit" . Chr(34) . " }, { name: " . Chr(34) . "OnMessage" . Chr(34) . " }, { name: " . Chr(34) . "Ord" . Chr(34) . " }, { name: " . Chr(34) . "RegExMatch" . Chr(34) . " }, { name: " . Chr(34) . "RegExReplace" . Chr(34) . " }, { name: " . Chr(34) . "RegisterCallback" . Chr(34) . " }, { name: " . Chr(34) . "Round" . Chr(34) . " }, { name: " . Chr(34) . "RTrim" . Chr(34) . " }, { name: " . Chr(34) . "StoreLocally" . Chr(34) . " }, { name: " . Chr(34) . "SB_SetIcon" . Chr(34) . " }, { name: " . Chr(34) . "SB_SetParts" . Chr(34) . " }, { name: " . Chr(34) . "SB_SetText" . Chr(34) . " }, { name: " . Chr(34) . "Sin" . Chr(34) . " }, { name: " . Chr(34) . "Sqrt" . Chr(34) . " }, { name: " . Chr(34) . "StrGet" . Chr(34) . " }, { name: " . Chr(34) . "StrLen" . Chr(34) . " }, { name: " . Chr(34) . "StrLower" . Chr(34) . " }, { name: " . Chr(34) . "StrPut" . Chr(34) . " }, { name: " . Chr(34) . "StrReplace" . Chr(34) . " }, { name: " . Chr(34) . "StrSplit" . Chr(34) . " }, { name: " . Chr(34) . "SubStr" . Chr(34) . " }, { name: " . Chr(34) . "Tan" . Chr(34) . " }, { name: " . Chr(34) . "Title" . Chr(34) . " }, { name: " . Chr(34) . "Trim" . Chr(34) . " }, { name: " . Chr(34) . "TV_Add" . Chr(34) . " }, { name: " . Chr(34) . "TV_Delete" . Chr(34) . " }, { name: " . Chr(34) . "TV_Get" . Chr(34) . " }, { name: " . Chr(34) . "TV_GetChild" . Chr(34) . " }, { name: " . Chr(34) . "TV_GetCount" . Chr(34) . " }, { name: " . Chr(34) . "TV_GetNext" . Chr(34) . " }, { name: " . Chr(34) . "TV_GetParent" . Chr(34) . " }, { name: " . Chr(34) . "TV_GetPrev" . Chr(34) . " }, { name: " . Chr(34) . "TV_GetSelection" . Chr(34) . " }, { name: " . Chr(34) . "TV_GetText" . Chr(34) . " }, { name: " . Chr(34) . "TV_Modify" . Chr(34) . " }, { name: " . Chr(34) . "TV_SetImageList" . Chr(34) . " }, { name: " . Chr(34) . "VarSetCapacity" . Chr(34) . " }, { name: " . Chr(34) . "WinActive" . Chr(34) . " }, { name: " . Chr(34) . "WinExist" . Chr(34) . " }, { name: " . Chr(34) . "AutoTrim" . Chr(34) . " }, { name: " . Chr(34) . "BlockInput" . Chr(34) . " }, { name: " . Chr(34) . "Click" . Chr(34) . " }, { name: " . Chr(34) . "ClipWait" . Chr(34) . " }, { name: " . Chr(34) . "Control" . Chr(34) . " }, { name: " . Chr(34) . "ControlClick" . Chr(34) . " }, { name: " . Chr(34) . "ControlFocus" . Chr(34) . " }, { name: " . Chr(34) . "ControlGet" . Chr(34) . " }, { name: " . Chr(34) . "ControlGetFocus" . Chr(34) . " }, { name: " . Chr(34) . "ControlGetPos" . Chr(34) . " }, { name: " . Chr(34) . "ControlGetText" . Chr(34) . " }, { name: " . Chr(34) . "ControlMove" . Chr(34) . " }, { name: " . Chr(34) . "ControlSend" . Chr(34) . " }, { name: " . Chr(34) . "ControlSendRaw" . Chr(34) . " }, { name: " . Chr(34) . "ControlSetText" . Chr(34) . " }, { name: " . Chr(34) . "CoordMode" . Chr(34) . " }, { name: " . Chr(34) . "Critical" . Chr(34) . " }, { name: " . Chr(34) . "DetectHiddenText" . Chr(34) . " }, { name: " . Chr(34) . "DetectHiddenWindows" . Chr(34) . " }, { name: " . Chr(34) . "Drive" . Chr(34) . " }, { name: " . Chr(34) . "DriveGet" . Chr(34) . " }, { name: " . Chr(34) . "DriveSpaceFree" . Chr(34) . " }, { name: " . Chr(34) . "Edit" . Chr(34) . " }, { name: " . Chr(34) . "Endpoint" . Chr(34) . " }, { name: " . Chr(34) . "EnvAdd" . Chr(34) . " }, { name: " . Chr(34) . "EnvDiv" . Chr(34) . " }, { name: " . Chr(34) . "EnvGet" . Chr(34) . " }, { name: " . Chr(34) . "EnvMult" . Chr(34) . " }, { name: " . Chr(34) . "EnvSet" . Chr(34) . " }, { name: " . Chr(34) . "EnvSub" . Chr(34) . " }, { name: " . Chr(34) . "EnvUpdate" . Chr(34) . " }, { name: " . Chr(34) . "Exit" . Chr(34) . " }, { name: " . Chr(34) . "ExitApp" . Chr(34) . " }, { name: " . Chr(34) . "FileAppend" . Chr(34) . " }, { name: " . Chr(34) . "FileCopy" . Chr(34) . " }, { name: " . Chr(34) . "FileCopyDir" . Chr(34) . " }, { name: " . Chr(34) . "FileCreateDir" . Chr(34) . " }, { name: " . Chr(34) . "FileCreateShortcut" . Chr(34) . " }, { name: " . Chr(34) . "FileDelete" . Chr(34) . " }, { name: " . Chr(34) . "FileEncoding" . Chr(34) . " }, { name: " . Chr(34) . "FileGetAttrib" . Chr(34) . " }, { name: " . Chr(34) . "FileGetShortcut" . Chr(34) . " }, { name: " . Chr(34) . "FileGetSize" . Chr(34) . " }, { name: " . Chr(34) . "FileGetTime" . Chr(34) . " }, { name: " . Chr(34) . "FileGetVersion" . Chr(34) . " }, { name: " . Chr(34) . "FileInstall" . Chr(34) . " }, { name: " . Chr(34) . "FileMove" . Chr(34) . " }, { name: " . Chr(34) . "FileMoveDir" . Chr(34) . " }, { name: " . Chr(34) . "FileRead" . Chr(34) . " }, { name: " . Chr(34) . "FileReadLine" . Chr(34) . " }, { name: " . Chr(34) . "FileRecycle" . Chr(34) . " }, { name: " . Chr(34) . "FileRecycleEmpty" . Chr(34) . " }, { name: " . Chr(34) . "FileRemoveDir" . Chr(34) . " }, { name: " . Chr(34) . "FileSelectFile" . Chr(34) . " }, { name: " . Chr(34) . "FileSelectFolder" . Chr(34) . " }, { name: " . Chr(34) . "FileSetAttrib" . Chr(34) . " }, { name: " . Chr(34) . "FileSetTime" . Chr(34) . " }, { name: " . Chr(34) . "FormatTime" . Chr(34) . " }, { name: " . Chr(34) . "getDataFromAPI" . Chr(34) . " }, { name: " . Chr(34) . "getDataFromJSON" . Chr(34) . " }, { name: " . Chr(34) . "GetKeyState" . Chr(34) . " }, { name: " . Chr(34) . "getUrlParams" . Chr(34) . " }, { name: " . Chr(34) . "GroupActivate" . Chr(34) . " }, { name: " . Chr(34) . "GroupAdd" . Chr(34) . " }, { name: " . Chr(34) . "GroupClose" . Chr(34) . " }, { name: " . Chr(34) . "GroupDeactivate" . Chr(34) . " }, { name: " . Chr(34) . "Gui" . Chr(34) . " }, { name: " . Chr(34) . "GuiControl" . Chr(34) . " }, { name: " . Chr(34) . "GuiControlGet" . Chr(34) . " }, { name: " . Chr(34) . "Hotkey" . Chr(34) . " }, { name: " . Chr(34) . "ImageSearch" . Chr(34) . " }, { name: " . Chr(34) . "IniDelete" . Chr(34) . " }, { name: " . Chr(34) . "IniRead" . Chr(34) . " }, { name: " . Chr(34) . "IniWrite" . Chr(34) . " }, { name: " . Chr(34) . "Input" . Chr(34) . " }, { name: " . Chr(34) . "InputBox" . Chr(34) . " }, { name: " . Chr(34) . "KeyHistory" . Chr(34) . " }, { name: " . Chr(34) . "KeyWait" . Chr(34) . " }, { name: " . Chr(34) . "ListHotkeys" . Chr(34) . " }, { name: " . Chr(34) . "ListLines" . Chr(34) . " }, { name: " . Chr(34) . "ListVars" . Chr(34) . " }, { name: " . Chr(34) . "Menu" . Chr(34) . " }, { name: " . Chr(34) . "MouseClick" . Chr(34) . " }, { name: " . Chr(34) . "MouseClickDrag" . Chr(34) . " }, { name: " . Chr(34) . "MouseGetPos" . Chr(34) . " }, { name: " . Chr(34) . "MouseMove" . Chr(34) . " }, { name: " . Chr(34) . "MsgBox" . Chr(34) . " }, { name: " . Chr(34) . "OnExit" . Chr(34) . " }, { name: " . Chr(34) . "OutputDebug" . Chr(34) . " }, { name: " . Chr(34) . "Pause" . Chr(34) . " }, { name: " . Chr(34) . "PixelGetColor" . Chr(34) . " }, { name: " . Chr(34) . "PixelSearch" . Chr(34) . " }, { name: " . Chr(34) . "PostMessage" . Chr(34) . " }, { name: " . Chr(34) . "Process" . Chr(34) . " }, { name: " . Chr(34) . "Progress" . Chr(34) . " }, { name: " . Chr(34) . "Random" . Chr(34) . " }, { name: " . Chr(34) . "RegDelete" . Chr(34) . " }, { name: " . Chr(34) . "RegRead" . Chr(34) . " }, { name: " . Chr(34) . "RegWrite" . Chr(34) . " }, { name: " . Chr(34) . "Reload" . Chr(34) . " }, { name: " . Chr(34) . "reloadWithParams" . Chr(34) . " }, { name: " . Chr(34) . "Run" . Chr(34) . " }, { name: " . Chr(34) . "RunAs" . Chr(34) . " }, { name: " . Chr(34) . "RunWait" . Chr(34) . " }, { name: " . Chr(34) . "Send" . Chr(34) . " }, { name: " . Chr(34) . "SendEvent" . Chr(34) . " }, { name: " . Chr(34) . "SendInput" . Chr(34) . " }, { name: " . Chr(34) . "SendLevel" . Chr(34) . " }, { name: " . Chr(34) . "SendMessage" . Chr(34) . " }, { name: " . Chr(34) . "SendMode" . Chr(34) . " }, { name: " . Chr(34) . "SendPlay" . Chr(34) . " }, { name: " . Chr(34) . "SendRaw" . Chr(34) . " }, { name: " . Chr(34) . "SetBatchLines" . Chr(34) . " }, { name: " . Chr(34) . "SetCapsLockState" . Chr(34) . " }, { name: " . Chr(34) . "SetControlDelay" . Chr(34) . " }, { name: " . Chr(34) . "SetDefaultMouseSpeed" . Chr(34) . " }, { name: " . Chr(34) . "SetEnv" . Chr(34) . " }, { name: " . Chr(34) . "SetFormat" . Chr(34) . " }, { name: " . Chr(34) . "SetKeyDelay" . Chr(34) . " }, { name: " . Chr(34) . "SetMouseDelay" . Chr(34) . " }, { name: " . Chr(34) . "SetNumLockState" . Chr(34) . " }, { name: " . Chr(34) . "SetRegView" . Chr(34) . " }, { name: " . Chr(34) . "SetScrollLockState" . Chr(34) . " }, { name: " . Chr(34) . "SetStoreCapsLockMode" . Chr(34) . " }, { name: " . Chr(34) . "SetTimer" . Chr(34) . " }, { name: " . Chr(34) . "SetTitleMatchMode" . Chr(34) . " }, { name: " . Chr(34) . "SetWinDelay" . Chr(34) . " }, { name: " . Chr(34) . "SetWorkingDir" . Chr(34) . " }, { name: " . Chr(34) . "Shutdown" . Chr(34) . " }, { name: " . Chr(34) . "Sleep" . Chr(34) . " }, { name: " . Chr(34) . "Sort" . Chr(34) . " }, { name: " . Chr(34) . "SoundBeep" . Chr(34) . " }, { name: " . Chr(34) . "SoundGet" . Chr(34) . " }, { name: " . Chr(34) . "SoundGetWaveVolume" . Chr(34) . " }, { name: " . Chr(34) . "SoundPlay" . Chr(34) . " }, { name: " . Chr(34) . "SoundSet" . Chr(34) . " }, { name: " . Chr(34) . "SoundSetWaveVolume" . Chr(34) . " }, { name: " . Chr(34) . "SplashImage" . Chr(34) . " }, { name: " . Chr(34) . "SplashTextOff" . Chr(34) . " }, { name: " . Chr(34) . "SplashTextOn" . Chr(34) . " }, { name: " . Chr(34) . "SplitPath" . Chr(34) . " }, { name: " . Chr(34) . "StatusBarGetText" . Chr(34) . " }, { name: " . Chr(34) . "StatusBarWait" . Chr(34) . " }, { name: " . Chr(34) . "StringCaseSense" . Chr(34) . " }, { name: " . Chr(34) . "StringGetPos" . Chr(34) . " }, { name: " . Chr(34) . "StringLeft" . Chr(34) . " }, { name: " . Chr(34) . "StringLen" . Chr(34) . " }, { name: " . Chr(34) . "StringLower" . Chr(34) . " }, { name: " . Chr(34) . "StringMid" . Chr(34) . " }, { name: " . Chr(34) . "StringReplace" . Chr(34) . " }, { name: " . Chr(34) . "StringRight" . Chr(34) . " }, { name: " . Chr(34) . "StringSplit" . Chr(34) . " }, { name: " . Chr(34) . "StringTrimLeft" . Chr(34) . " }, { name: " . Chr(34) . "StringTrimRight" . Chr(34) . " }, { name: " . Chr(34) . "StringUpper" . Chr(34) . " }, { name: " . Chr(34) . "Suspend" . Chr(34) . " }, { name: " . Chr(34) . "SysGet" . Chr(34) . " }, { name: " . Chr(34) . "Thread" . Chr(34) . " }, { name: " . Chr(34) . "ToolTip" . Chr(34) . " }, { name: " . Chr(34) . "Transform" . Chr(34) . " }, { name: " . Chr(34) . "TrayTip" . Chr(34) . " }, { name: " . Chr(34) . "URLDownloadToFile" . Chr(34) . " }, { name: " . Chr(34) . "WinActivate" . Chr(34) . " }, { name: " . Chr(34) . "WinActivateBottom" . Chr(34) . " }, { name: " . Chr(34) . "WinClose" . Chr(34) . " }, { name: " . Chr(34) . "WinGet" . Chr(34) . " }, { name: " . Chr(34) . "WinGetActiveStats" . Chr(34) . " }, { name: " . Chr(34) . "WinGetActiveTitle" . Chr(34) . " }, { name: " . Chr(34) . "WinGetClass" . Chr(34) . " }, { name: " . Chr(34) . "WinGetPos" . Chr(34) . " }, { name: " . Chr(34) . "WinGetText" . Chr(34) . " }, { name: " . Chr(34) . "WinGetTitle" . Chr(34) . " }, { name: " . Chr(34) . "WinHide" . Chr(34) . " }, { name: " . Chr(34) . "WinKill" . Chr(34) . " }, { name: " . Chr(34) . "WinMaximize" . Chr(34) . " }, { name: " . Chr(34) . "WinMenuSelectItem" . Chr(34) . " }, { name: " . Chr(34) . "WinMinimize" . Chr(34) . " }, { name: " . Chr(34) . "WinMinimizeAll" . Chr(34) . " }, { name: " . Chr(34) . "WinMinimizeAllUndo" . Chr(34) . " }, { name: " . Chr(34) . "WinMove" . Chr(34) . " }, { name: " . Chr(34) . "WinRestore" . Chr(34) . " }, { name: " . Chr(34) . "WinSet" . Chr(34) . " }, { name: " . Chr(34) . "WinSetTitle" . Chr(34) . " }, { name: " . Chr(34) . "WinShow" . Chr(34) . " }, { name: " . Chr(34) . "WinWait" . Chr(34) . " }, { name: " . Chr(34) . "WinWaitActive" . Chr(34) . " }, { name: " . Chr(34) . "WinWaitClose" . Chr(34) . " }, { name: " . Chr(34) . "WinWaitNotActive" . Chr(34) . " }];`n`n"

addFuncIfWeUseIt_AddIDE2 := "`n        // Create a new div element for the editor`n        var editorDiv = document.createElement(" . Chr(34) . "div" . Chr(34) . ");`n        editorDiv.id = id;`n        editorDiv.style.position = " . Chr(34) . "absolute" . Chr(34) . ";`n        editorDiv.style.left = xPos + " . Chr(34) . "px" . Chr(34) . ";`n        editorDiv.style.top = yPos + " . Chr(34) . "px" . Chr(34) . ";`n        editorDiv.style.width = w + " . Chr(34) . "px" . Chr(34) . ";`n        editorDiv.style.height = h + " . Chr(34) . "px" . Chr(34) . ";`n        editorDiv.style.fontSize = font + " . Chr(34) . "px" . Chr(34) . ";`n`n        // Append the editor div to the parent`n        parent.appendChild(editorDiv);`n`n        // Create a new editor instance inside the div`n        var editor = ace.edit(id);`n        editor.setTheme(" . Chr(34) . "ace/theme/monokai" . Chr(34) . ");`n        editor.session.setMode(" . Chr(34) . "ace/mode/" . Chr(34) . " + langName);`n        // editor.setOptions({`n        //   enableBasicAutocompletion: true,`n        //   enableLiveAutocompletion: true,`n        //   behavioursEnabled: false, // Disable auto-pairing of characters`n        // });`n`n        editor.setOptions({`n          enableBasicAutocompletion: false,`n          enableSnippets: false,`n          enableLiveAutocompletion: true,`n          behavioursEnabled: false,`n          showPrintMargin: false,`n        });`n`n        langTools.setCompleters([]);`n        langTools.addCompleter(Completer);`n`n        // Set initial text if provided`n        if (initialText) {`n          editor.setValue(initialText, -1); // -1 to move cursor to the beginning`n        }`n`n        // Apply CSS styles for the editor`n        var css = " . Chr(96) . "`n          body {`n            font-family: " . Chr(34) . "Segoe UI" . Chr(34) . ", Tahoma, Geneva, Verdana, sans-serif;`n            background-color: #1a1818;`n            color: #ffffff;`n            display: flex;`n            flex-direction: column;`n            align-items: center;`n            height: 100vh;`n            margin: 0;`n          }`n`n          .controls {`n            display: flex;`n            justify-content: center;`n            gap: 1rem;`n            margin: 1rem;`n            padding: 1rem;`n          }`n`n          button {`n            padding: 0.7rem;`n            font-size: 1.2em;`n            cursor: pointer;`n            background-color: #bababa;`n            color: #000000;`n            border: none;`n            border-radius: 0.2rem;`n            transition: background-color 0.3s;`n          }`n`n          button:hover {`n            background-color: #27ae60;`n          }`n`n          #${id} {`n            width: ${w}px;`n            height: ${h}px;`n            font-size: 1em;`n            border-radius: 0.3rem;`n          }`n`n          #result {`n            margin-top: 1rem;`n            font-size: 1.2em;`n            color: #999c9a;`n            font-weight: bold;`n            text-align: center;`n          }`n`n          .ace-monokai .ace_marker-layer .ace_active-line {`n            background-color: #103010 !important;`n          }`n`n          .ace-monokai {`n            background-color: #121212 !important;`n            color: #f8f8f2;`n          }`n`n          .ace-monokai .ace_gutter {`n            background: #204020 !important;`n            color: #cbcdc3 !important;`n          }`n`n          .ace-monokai .ace_gutter-active-line {`n            background-color: transparent !important;`n          }`n`n          .ace-monokai .ace_entity.ace_name.ace_tag,`n          .ace-monokai .ace_keyword,`n          .ace-monokai .ace_meta.ace_tag,`n          .ace-monokai .ace_storage {`n            color: #40a0e0 !important;`n          }`n`n          .ace-monokai .ace_entity.ace_name.ace_function,`n          .ace-monokai .ace_entity.ace_other,`n          .ace-monokai .ace_entity.ace_other.ace_attribute-name,`n          .ace-monokai .ace_variable {`n            color: #ff80df !important;`n          }`n`n          .ace-monokai .ace_comment {`n            color: #40d080 !important;`n          }`n`n          .ace-monokai .ace_string {`n            color: #ffa0a0 !important;`n          }`n`n          .ace-monokai .ace_punctuation,`n          .ace-monokai .ace_punctuation.ace _tag {`n            color: #ffa0a0 !important;`n          }`n`n          *::-webkit-scrollbar {`n            width: 1em;`n          }`n`n          *::-webkit-scrollbar-track {`n            box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);`n          }`n`n          *::-webkit-scrollbar-thumb {`n            background-color: darkgrey;`n            outline: 1px solid slategrey;`n          }`n        " . Chr(96) . ";`n`n        var style = document.createElement(" . Chr(34) . "style" . Chr(34) . ");`n        style.type = " . Chr(34) . "text/css" . Chr(34) . ";`n        if (style.styleSheet) {`n          style.styleSheet.cssText = css;`n        } else {`n          style.appendChild(document.createTextNode(css));`n        }`n        document.head.appendChild(style);`n`n        // Bind change event listener to the editor`n        editor.getSession().on(" . Chr(34) . "change" . Chr(34) . ", function () {`n          var code = editor.getValue();`n          if (typeof onChangeFunc === " . Chr(34) . "function" . Chr(34) . ") {`n            onChangeFunc(code);`n          }`n        });`n      }`n"


addFuncIfWeUseIt_StrSplit := "`nfunction StrSplit(inputStr, delimiter, num) {`n    // Check if inputStr is a valid string`n    if (typeof inputStr !== 'string') {`n        return ''; // Return empty string for invalid input`n    }`n`n    // Split the input string based on the delimiter`n    const parts = inputStr.split(delimiter);`n`n    // Return the part specified by the num parameter (1-based index)`n    if (num > 0 && num <= parts.length) {`n        return parts[num - 1]; // Return the specified part (0-based index)`n    } else {`n        return ''; // Return an empty string if num is out of range`n    }`n}`n"

addFuncIfWeUseIt_RegExReplace := "`n      // Function to simulate AutoHotkey's RegExReplace in JavaScript`n      function RegExReplace(inputStr, regexPattern, replacement) {`n          // Create a regular expression object using the provided pattern`n          const regex = new RegExp(regexPattern, 'g'); // 'g' flag for global match`n`n          // Use the replace() method to perform the regex replacement`n          const resultStr = inputStr.replace(regex, replacement);`n`n          // Return the modified string`n          return resultStr;`n      }`n"


addFuncIfWeUseIt_runPyCode := "`n        async function runPyCode(code) {`n            return new Promise((resolve, reject) => {`n                const checkReady = () => {`n                    if (window.runPythonCode) {`n                        resolve(window.runPythonCode(code));`n                    } else {`n                        setTimeout(checkReady, 100);`n                    }`n                };`n                checkReady();`n            });`n        }`n"


addFuncIfWeUseIt_LoopParseFunc := "`nfunction LoopParseFunc(varString, delimiter1=" . Chr(34) . "" . Chr(34) . ", delimiter2=" . Chr(34) . "" . Chr(34) . ") {`n    let items;`n    if (!delimiter1 && !delimiter2) {`n        // If no delimiters are provided, return an array of characters`n        items = [...varString];`n    } else {`n        // Construct the regular expression pattern for splitting the string`n        let pattern = new RegExp('[' + delimiter1.replace(/[.*+?^${}()|[" . Chr(92) . "]" . Chr(92) . "" . Chr(92) . "]/g, '" . Chr(92) . "" . Chr(92) . "$&') + delimiter2.replace(/[.*+?^${}()|[" . Chr(92) . "]" . Chr(92) . "" . Chr(92) . "]/g, '" . Chr(92) . "" . Chr(92) . "$&') + ']+');`n        // Split the string using the constructed pattern`n        items = varString.split(pattern);`n    }`n    return items;`n}`n"

addFuncIfWeUseIt_runHTML := "`nfunction runHTML(parent, id, scale, leftPos, topPos, width, height, HTMLcode) {`n`n  // Concatenate parent.id with id`n  id = parent.id + id;`n`n  // Check if an iframe with the same id already exists and remove it`n  const existingIframe = document.getElementById(id);`n  if (existingIframe) {`n    existingIframe.remove();`n  }`n`n  // Calculate the scale based on the actual width and height of the iframe`n  const scaleX = (width / (window.innerWidth / scale));`n  const scaleY = (height / (window.innerHeight / scale));`n  const scaleFactor = Math.min(scaleX, scaleY);`n`n        // Calculate the scaled width and height to maintain aspect ratio`n        const scaledWidth = Math.floor((window.innerWidth / scale) * scaleFactor);`n        const scaledHeight = Math.floor((window.innerHeight / scale) * scaleFactor);`n`n        // Calculate offsets to center the content`n        const offsetX = Math.floor((width - scaledWidth) / 2);`n        const offsetY = Math.floor((height - scaledHeight) / 2);`n`n        // Create iframe element`n        let iframeElement = document.createElement(" . Chr(34) . "iframe" . Chr(34) . ");`n`n        // Set attributes`n        iframeElement.id = id;`n        iframeElement.style.position = " . Chr(34) . "absolute" . Chr(34) . ";`n        iframeElement.style.left = leftPos + offsetX + " . Chr(34) . "px" . Chr(34) . ";`n        iframeElement.style.top = topPos + offsetY + " . Chr(34) . "px" . Chr(34) . ";`n        iframeElement.style.width = (window.innerWidth / scale) + " . Chr(34) . "px" . Chr(34) . "; // Set the iframe's viewport width`n        iframeElement.style.height = (window.innerHeight / scale) + " . Chr(34) . "px" . Chr(34) . "; // Set the iframe's viewport height`n        iframeElement.style.transformOrigin = " . Chr(34) . "top left" . Chr(34) . ";`n        iframeElement.style.transform = " . Chr(96) . "scale(${scaleFactor})" . Chr(96) . ";`n`n        // Set srcdoc attribute to load content`n        iframeElement.srcdoc = HTMLcode;`n`n        // Append iframe to parent element`n        parent.appendChild(iframeElement);`n      }`n"


addFuncIfWeUseIt_SortLikeAHK := "`nfunction SortLikeAHK(varName, options = " . Chr(34) . "" . Chr(34) . ") {`n    let delimiter = '" . Chr(92) . "n'; // Default delimiter`n    let delimiterIndex = options.indexOf('D');`n`n    if (delimiterIndex !== -1) {`n        let delimiterChar = options[delimiterIndex + 1];`n        delimiter = delimiterChar === '' ? ',' : delimiterChar;`n    }`n`n    let items = varName.split(new RegExp(delimiter === ',' ? ',' : '" . Chr(92) . "" . Chr(92) . "' + delimiter));`n`n    // Remove empty items and trim whitespace`n    items = items.filter(item => item.trim() !== '');`n`n    // Apply sorting based on options`n    if (options.includes('N')) {`n        // Numeric sort`n        items.sort((a, b) => parseInt(a, 10) - parseInt(b, 10));`n    } else if (options.includes('Random')) {`n        // Random sort`n        for (let i = items.length - 1; i > 0; i--) {`n            const j = Math.floor(Math.random() * (i + 1));`n            [items[i], items[j]] = [items[j], items[i]];`n        }`n    } else {`n        // Default alphabetical sort`n        items.sort((a, b) => {`n            const keyA = options.includes('C') ? a : a.toLowerCase();`n            const keyB = options.includes('C') ? b : b.toLowerCase();`n            if (keyA < keyB) return -1;`n            if (keyA > keyB) return 1;`n            return 0;`n        });`n    }`n`n    // Reverse if 'R' option is present`n    if (options.includes('R')) {`n        items.reverse();`n    }`n`n    // Remove duplicates if 'U' option is present`n    if (options.includes('U')) {`n        const seen = new Map();`n        items = items.filter(item => {`n            const key = options.includes('C') ? item : item.toLowerCase();`n            if (!seen.has(key)) {`n                seen.set(key, item);`n                return true;`n            }`n            return false;`n        });`n    }`n`n    // Join the sorted items back into a string`n    const sortedVar = items.join(delimiter === ',' ? ',' : '" . Chr(92) . "n');`n`n    return sortedVar;`n}`n"


allFuncThatWeNeedToUse := ""
ifWeUseAddIDEWeWillAddTheLinkInTheHTMLfile := ""
ifWeUseMsgboxWeWillAddTheLinkInTheHTMLfile := ""
if (InStr(jsCode, "showCustomMessageBox(")) or (InStr(jsCode, "showCustomMessageBox ("))
{
allFuncThatWeNeedToUse .= addFuncIfWeUseIt_showCustomMessageBox . "`n"
ifWeUseMsgboxWeWillAddTheLinkInTheHTMLfile := Chr(60) . Chr(115) . Chr(99) . Chr(114) . Chr(105) . Chr(112) . Chr(116) . Chr(32) . Chr(115) . Chr(114) . Chr(99) . Chr(61) . Chr(34) . "https://cdn.jsdelivr.net/npm/sweetalert2@11" . Chr(34) . Chr(62) . Chr(60) . Chr(47) . Chr(115) . Chr(99) . Chr(114) . Chr(105) . Chr(112) . Chr(116) . Chr(62)
}
if (InStr(jsCode, "BuildInVars(")) or (InStr(jsCode, "BuildInVars ("))
{
allFuncThatWeNeedToUse .= addFuncIfWeUseIt_BuildInVars . "`n"
}
if (InStr(jsCode, "MakeHotKey(")) or (InStr(jsCode, "MakeHotKey ("))
{
allFuncThatWeNeedToUse .= addFuncIfWeUseIt_MakeHotKey . "`n"
}
if (InStr(jsCode, "Abs(")) or (InStr(jsCode, "Abs ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_Abs . "`n"
}
if (InStr(jsCode, "ACos(")) or (InStr(jsCode, "ACos ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_ACos . "`n"
}
if (InStr(jsCode, "ASin(")) or (InStr(jsCode, "ASin ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_ASin . "`n"
}
if (InStr(jsCode, "ATan(")) or (InStr(jsCode, "ATan ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_ATan . "`n"
}
if (InStr(jsCode, "Ceil(")) or (InStr(jsCode, "Ceil ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_Ceil . "`n"
}
if (InStr(jsCode, "Cos(")) or (InStr(jsCode, "Cos ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_Cos . "`n"
}
if (InStr(jsCode, "Exp(")) or (InStr(jsCode, "Exp ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_Exp . "`n"
}
if (InStr(jsCode, "Floor(")) or (InStr(jsCode, "Floor ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_Floor . "`n"
}
if (InStr(jsCode, "Ln(")) or (InStr(jsCode, "Ln ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_Ln . "`n"
}
if (InStr(jsCode, "Log(")) or (InStr(jsCode, "Log ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_Log . "`n"
}
if (InStr(jsCode, "Round(")) or (InStr(jsCode, "Round ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_Round . "`n"
}
if (InStr(jsCode, "Sin(")) or (InStr(jsCode, "Sin ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_Sin . "`n"
}
if (InStr(jsCode, "Sqrt(")) or (InStr(jsCode, "Sqrt ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_Sqrt . "`n"
}
if (InStr(jsCode, "Tan(")) or (InStr(jsCode, "Tan ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_Tan . "`n"
}
if (InStr(jsCode, "Chr(")) or (InStr(jsCode, "Chr ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_Chr . "`n"
}
if (InStr(jsCode, "sleep(")) or (InStr(jsCode, "sleep ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_sleep . "`n"
}
if (InStr(jsCode, "InStr(")) or (InStr(jsCode, "InStr ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_InStr . "`n"
}
if (InStr(jsCode, "RegExMatch(")) or (InStr(jsCode, "RegExMatch ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_RegExMatch . "`n"
}
if (InStr(jsCode, "StrLen(")) or (InStr(jsCode, "StrLen ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_StrLen . "`n"
}
if (InStr(jsCode, "getRandomNumber(")) or (InStr(jsCode, "getRandomNumber ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_getRandomNumber . "`n"
}
if (InStr(jsCode, "SubStr(")) or (InStr(jsCode, "SubStr ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_SubStr . "`n"
}
if (InStr(jsCode, "Trim(")) or (InStr(jsCode, "Trim ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_Trim . "`n"
}
if (InStr(jsCode, "ParseInt(")) or (InStr(jsCode, "ParseInt ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_ParseInt . "`n"
}
if (InStr(jsCode, "StrReplace(")) or (InStr(jsCode, "StrReplace ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_StrReplace . "`n"
}
if (InStr(jsCode, "Mod(")) or (InStr(jsCode, "Mod ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_Mod . "`n"
}
if (InStr(jsCode, "Asc(")) or (InStr(jsCode, "Asc ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_Asc . "`n"
}
if (InStr(jsCode, "StringTrimLeft(")) or (InStr(jsCode, "StringTrimLeft ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_StringTrimLeft . "`n"
}
if (InStr(jsCode, "StringTrimRight(")) or (InStr(jsCode, "StringTrimRight ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_StringTrimRight . "`n"
}
if (InStr(jsCode, "isMobileDevice(")) or (InStr(jsCode, "isMobileDevice ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_isMobileDevice . "`n"
}
if (InStr(jsCode, "SetTimer(")) or (InStr(jsCode, "SetTimer ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_SetTimer . "`n"
}
if (InStr(jsCode, "GuiControl(")) or (InStr(jsCode, "GuiControl ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_GuiControl . "`n"
}
if (InStr(jsCode, "getDataFromEndpoint(")) or (InStr(jsCode, "getDataFromEndpoint ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_getDataFromEndpoint . "`n"
}
if (InStr(jsCode, "FileAppend(")) or (InStr(jsCode, "FileAppend ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_FileAppend . "`n"
}
if (InStr(jsCode, "isConnectedToBackend(")) or (InStr(jsCode, "isConnectedToBackend ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_isConnectedToBackend . "`n"
}
if (InStr(jsCode, "MouseGetPos(")) or (InStr(jsCode, "MouseGetPos ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_MouseGetPos . "`n"
}
if (InStr(jsCode, "SoundPlay(")) or (InStr(jsCode, "SoundPlay ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_SoundPlay . "`n"
}
if (InStr(jsCode, "StoreLocally(")) or (InStr(jsCode, "StoreLocally ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_StoreLocally . "`n"
}
if (InStr(jsCode, "createToggleSwitch(")) or (InStr(jsCode, "createToggleSwitch ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_createToggleSwitch . "`n"
}
if (InStr(jsCode, "getUrlParams(")) or (InStr(jsCode, "getUrlParams ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_getUrlParams . "`n"
}
if (InStr(jsCode, "reloadWithParams(")) or (InStr(jsCode, "reloadWithParams ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_reloadWithParams . "`n"
}
if (InStr(jsCode, "PlayVideoFromBase64(")) or (InStr(jsCode, "PlayVideoFromBase64 ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_PlayVideoFromBase64 . "`n"
}
if (InStr(jsCode, "PlayVideoFromUrl(")) or (InStr(jsCode, "PlayVideoFromUrl ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_PlayVideoFromUrl . "`n"
}
if (InStr(jsCode, "PlayYoutubeVid(")) or (InStr(jsCode, "PlayYoutubeVid ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_PlayYoutubeVid . "`n"
}
if (InStr(jsCode, "changeFavicon(")) or (InStr(jsCode, "changeFavicon ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_changeFavicon . "`n"
}
if (InStr(jsCode, "OnKeyPress(")) or (InStr(jsCode, "OnKeyPress ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_OnKeyPress . "`n"
}
if (InStr(jsCode, "GetKeyState(")) or (InStr(jsCode, "GetKeyState ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_GetKeyState . "`n"
}
if (InStr(jsCode, "createCustomDropdown(")) or (InStr(jsCode, "createCustomDropdown ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_createCustomDropdown . "`n"
}
if (InStr(jsCode, "StrLower(")) or (InStr(jsCode, "StrLower ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_StrLower . "`n"
}
if (InStr(jsCode, "getDataFromAPI(")) or (InStr(jsCode, "getDataFromAPI ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_getDataFromAPI . "`n"
}
if (InStr(jsCode, "getDataFromJSON(")) or (InStr(jsCode, "getDataFromJSON ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_getDataFromJSON . "`n"
}
if (InStr(jsCode, "createCheckbox(")) or (InStr(jsCode, "createCheckbox ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_createCheckbox . "`n"
}
if (InStr(jsCode, "createCustomIframe(")) or (InStr(jsCode, "createCustomIframe ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_createCustomIframe . "`n"
}
if (InStr(jsCode, "StrSplit(")) or (InStr(jsCode, "StrSplit ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_StrSplit . "`n"
}
if (InStr(jsCode, "RegExReplace(")) or (InStr(jsCode, "RegExReplace ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_RegExReplace . "`n"
}
if (InStr(jsCode, "LoopParseFunc(")) or (InStr(jsCode, "LoopParseFunc ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_LoopParseFunc . "`n"
}
if (InStr(jsCode, "runHTML(")) or (InStr(jsCode, "runHTML ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_runHTML . "`n"
}
if (InStr(jsCode, "SortLikeAHK(")) or (InStr(jsCode, "SortLikeAHK ("))
{
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_SortLikeAHK . "`n"
}


if (InStr(jsCode, "AddIDE(")) or (InStr(jsCode, "AddIDE ("))
{
ifWeUseAddIDEWeWillAddTheLinkInTheHTMLfile := "`n" . Chr(60) . Chr(33) . Chr(45) . Chr(45) . Chr(32) . Chr(73) . Chr(110) . Chr(99) . Chr(108) . Chr(117) . Chr(100) . Chr(101) . Chr(32) . Chr(65) . Chr(99) . Chr(101) . Chr(32) . Chr(69) . Chr(100) . Chr(105) . Chr(116) . Chr(111) . Chr(114) . Chr(32) . Chr(67) . Chr(68) . Chr(78) . Chr(32) . Chr(45) . Chr(45) . Chr(62) . "`n    " . Chr(60) . Chr(115) . Chr(99) . Chr(114) . Chr(105) . Chr(112) . Chr(116) . Chr(32) . Chr(115) . Chr(114) . Chr(99) . Chr(61) . "" . Chr(34) . "https://cdnjs.cloudflare.com/ajax/libs/ace/1.32.2/ace.js" . Chr(34) . " integrity=" . Chr(34) . "sha512-JLIRlxWh96sND3uUgI2RVHZJpgkWHg3+xoUY8XkgTPKpqRaqdk7zD/ck/XHXFSMW84o6GrP67dlqN3b98NB/yA==" . Chr(34) . " crossorigin=" . Chr(34) . "anonymous" . Chr(34) . " referrerpolicy=" . Chr(34) . "no-referrer" . Chr(34) . "" . Chr(62) . Chr(60) . Chr(47) . Chr(115) . Chr(99) . Chr(114) . Chr(105) . Chr(112) . Chr(116) . Chr(62) . "`n    " . Chr(60) . Chr(115) . Chr(99) . Chr(114) . Chr(105) . Chr(112) . Chr(116) . Chr(32) . Chr(115) . Chr(114) . Chr(99) . Chr(61) . "" . Chr(34) . "https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.12/ext-language_tools.js" . Chr(34) . " crossorigin=" . Chr(34) . "anonymous" . Chr(34) . " referrerpolicy=" . Chr(34) . "no-referrer" . Chr(34) . "" . Chr(62) . Chr(60) . Chr(47) . Chr(115) . Chr(99) . Chr(114) . Chr(105) . Chr(112) . Chr(116) . Chr(62) . "`n"
    allFuncThatWeNeedToUse .= addFuncIfWeUseIt_AddIDE1 . "`n" . addFuncIfWeUseIt_AddIDE2 . "`n"
}
ifWeUseBrythonWeWillAddTheLinkInTheHTMLfile := ""
regularOrBrythonBodyINNIT := Chr(60) . Chr(98) . Chr(111) . Chr(100) . Chr(121) . Chr(62)
if (InStr(jsCode, "runPyCode(")) or (InStr(jsCode, "runPyCode ("))
{
ifWeUseBrythonWeWillAddTheLinkInTheHTMLfile := "`n        " . Chr(60) . Chr(115) . Chr(99) . Chr(114) . Chr(105) . Chr(112) . Chr(116) . Chr(32) . Chr(115) . Chr(114) . Chr(99) . Chr(61) . "" . Chr(34) . "https://cdn.jsdelivr.net/npm/brython@3.10.5/brython.min.js" . Chr(34) . "" . Chr(62) . Chr(60) . Chr(47) . Chr(115) . Chr(99) . Chr(114) . Chr(105) . Chr(112) . Chr(116) . Chr(62) . "`n        " . Chr(60) . Chr(115) . Chr(99) . Chr(114) . Chr(105) . Chr(112) . Chr(116) . Chr(32) . Chr(115) . Chr(114) . Chr(99) . Chr(61) . "" . Chr(34) . "https://cdn.jsdelivr.net/npm/brython@3.10.5/brython_stdlib.js" . Chr(34) . "" . Chr(62) . Chr(60) . Chr(47) . Chr(115) . Chr(99) . Chr(114) . Chr(105) . Chr(112) . Chr(116) . Chr(62) . "`n"

regularOrBrythonBodyINNIT := "    " . Chr(60) . Chr(98) . Chr(111) . Chr(100) . Chr(121) . Chr(32) . Chr(111) . Chr(110) . Chr(108) . Chr(111) . Chr(97) . Chr(100) . Chr(61) . "" . Chr(34) . "brython()" . Chr(34) . ">`n        " . Chr(60) . Chr(115) . Chr(99) . Chr(114) . Chr(105) . Chr(112) . Chr(116) . Chr(32) . Chr(116) . Chr(121) . Chr(112) . Chr(101) . Chr(61) . "" . Chr(34) . "text/python" . Chr(34) . ">`n            import io`n            import sys`n            from browser import document, window`n`n            def runPythonCode(code):`n                try:`n                    # Redirect stdout to capture output`n                    sys.stdout = io.StringIO()`n                    exec(code)`n                    # Get the captured output`n                    output = sys.stdout.getvalue()`n                    # Reset stdout`n                    sys.stdout = sys.__stdout__`n                    return output`n                except Exception as e:`n                    return f" . Chr(34) . "Error: {str(e)}" . Chr(34) . "`n`n            # Expose the runPythonCode function to the browser's window object`n            window.runPythonCode = runPythonCode`n        " . Chr(60) . Chr(47) . Chr(115) . Chr(99) . Chr(114) . Chr(105) . Chr(112) . Chr(116) . Chr(62) . "`n`n`n"

allFuncThatWeNeedToUse .= addFuncIfWeUseIt_runPyCode . "`n"
}


addFuncIfWeUseIt_AllCanvasFunctions := "`n      // Function to draw a rectangle with rounded corners on the canvas`n      function drawRoundedRectangle(ctx, x, y, width, height, radius, fillColor, id) {`n        // Draw the rounded rectangle`n        ctx.fillStyle = fillColor;`n        ctx.beginPath();`n        ctx.moveTo(x + radius, y);`n        ctx.arcTo(x + width, y, x + width, y + height, radius);`n        ctx.arcTo(x + width, y + height, x, y + height, radius);`n        ctx.arcTo(x, y + height, x, y, radius);`n        ctx.arcTo(x, y, x + width, y, radius);`n        ctx.closePath();`n        ctx.fill();`n`n        // Return the rectangle information`n        return { id: id, x: x, y: y, width: width, height: height, radius, fillColor: fillColor };`n      }`n`n      // Function to update the position and size of a rectangle`n      function updateRectangle(id, x, y, width, height) {`n        const index = rectangles.findIndex((rectangle) => rectangle.id === id);`n        if (index !== -1) {`n          rectangles[index].x = x;`n          rectangles[index].y = y;`n          rectangles[index].width = width;`n          rectangles[index].height = height;`n        }`n      }`n`n      // Function to update the color of a rectangle`n      function updateRectangleColor(id, color) {`n        const index = rectangles.findIndex((rectangle) => rectangle.id === id);`n        if (index !== -1) {`n          rectangles[index].fillColor = color;`n        }`n      }`n`n      // Function to redraw all rectangles on the canvas`n      function redrawCanvas() {`n        ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear the canvas`n        rectangles.forEach((rectangle) => {`n          drawRoundedRectangle(ctx, rectangle.x, rectangle.y, rectangle.width, rectangle.height, rectangle.radius, rectangle.fillColor, rectangle.id);`n        });`n      }`n"

if (ifWeUseCanvas = 1)
{
allFuncThatWeNeedToUse .= addFuncIfWeUseIt_AllCanvasFunctions . "`n"
}



upCode1 := Chr(60) . Chr(33) . Chr(100) . Chr(111) . Chr(99) . Chr(116) . Chr(121) . Chr(112) . Chr(101) . Chr(32) . Chr(104) . Chr(116) . Chr(109) . Chr(108) . Chr(62) . Chr(10) . Chr(60) . Chr(104) . Chr(116) . Chr(109) . Chr(108) . Chr(32) . Chr(108) . Chr(97) . Chr(110) . Chr(103) . Chr(61) . Chr(34) . Chr(101) . Chr(110) . Chr(34) . Chr(62) . Chr(10) . Chr(32) . Chr(32) . Chr(60) . Chr(104) . Chr(101) . Chr(97) . Chr(100) . Chr(62) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(60) . Chr(109) . Chr(101) . Chr(116) . Chr(97) . Chr(32) . Chr(99) . Chr(104) . Chr(97) . Chr(114) . Chr(115) . Chr(101) . Chr(116) . Chr(61) . Chr(34) . Chr(85) . Chr(84) . Chr(70) . Chr(45) . Chr(56) . Chr(34) . Chr(32) . Chr(47) . Chr(62) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(60) . Chr(109) . Chr(101) . Chr(116) . Chr(97) . Chr(32) . Chr(110) . Chr(97) . Chr(109) . Chr(101) . Chr(61) . Chr(34) . Chr(118) . Chr(105) . Chr(101) . Chr(119) . Chr(112) . Chr(111) . Chr(114) . Chr(116) . Chr(34) . Chr(32) . Chr(99) . Chr(111) . Chr(110) . Chr(116) . Chr(101) . Chr(110) . Chr(116) . Chr(61) . Chr(34) . Chr(119) . Chr(105) . Chr(100) . Chr(116) . Chr(104) . Chr(61) . Chr(100) . Chr(101) . Chr(118) . Chr(105) . Chr(99) . Chr(101) . Chr(45) . Chr(119) . Chr(105) . Chr(100) . Chr(116) . Chr(104) . Chr(44) . Chr(32) . Chr(105) . Chr(110) . Chr(105) . Chr(116) . Chr(105) . Chr(97) . Chr(108) . Chr(45) . Chr(115) . Chr(99) . Chr(97) . Chr(108) . Chr(101) . Chr(61) . Chr(49) . Chr(46) . Chr(48) . Chr(34) . Chr(32) . Chr(47) . Chr(62) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(60) . Chr(116) . Chr(105) . Chr(116) . Chr(108) . Chr(101) . Chr(62) . "" . filenameOfHTH . "" . Chr(60) . Chr(47) . Chr(116) . Chr(105) . Chr(116) . Chr(108) . Chr(101) . Chr(62) . "`n    " . Chr(60) . Chr(115) . Chr(116) . Chr(121) . Chr(108) . Chr(101) . Chr(62) . "`n      body {`n        background-color: #202020;`n        font-family:`n          " . Chr(34) . "Open Sans" . Chr(34) . ",`n          -apple-system,`n          BlinkMacSystemFont,`n          " . Chr(34) . "Segoe UI" . Chr(34) . ",`n          Roboto,`n          Oxygen-Sans,`n          Ubuntu,`n          Cantarell,`n          " . Chr(34) . "Helvetica Neue" . Chr(34) . ",`n          Helvetica,`n          Arial,`n          sans-serif;`n      }`n    " . Chr(60) . Chr(47) . Chr(115) . Chr(116) . Chr(121) . Chr(108) . Chr(101) . Chr(62) . "`n    " . ifWeUseMsgboxWeWillAddTheLinkInTheHTMLfile . "`n`n    " . ifWeUseAddIDEWeWillAddTheLinkInTheHTMLfile . "`n`n    " . ifWeUseBrythonWeWillAddTheLinkInTheHTMLfile . "`n`n  "  . Chr(60) . Chr(47) . Chr(104) . Chr(101) . Chr(97) . Chr(100) . Chr(62) . "`n  " . regularOrBrythonBodyINNIT . "`n    " . Chr(60) . Chr(115) . Chr(99) . Chr(114) . Chr(105) . Chr(112) . Chr(116) . Chr(62) . "`n`n      " . TextData . "`n`n      " . base64ImageData . "`n`n      " . base64soundList . "`n`n      " . base64iconList . "`n`n      " . base64VideoData . "`n`n      // JavaScript equivalent code with variables`n`n      function changeFaviconAtTheBeginning(faviconUrl) {`n        // Create a new favicon link element`n        const newFavicon = document.createElement(" . Chr(34) . "link" . Chr(34) . ");`n        newFavicon.rel = " . Chr(34) . "icon" . Chr(34) . ";`n        newFavicon.href = faviconUrl;`n`n        // Get the current favicon element (if exists)`n        const existingFavicon = document.querySelector('link[rel=" . Chr(34) . "icon" . Chr(34) . "]');`n`n        // Replace the current favicon with the new one`n        if (existingFavicon) {`n          // If a favicon exists, replace it`n          document.head.removeChild(existingFavicon); // Remove the existing favicon`n        }`n`n        // Append the new favicon to the head`n        document.head.appendChild(newFavicon);`n      }`n`n      // Call the function with the desired favicon URL`n      changeFaviconAtTheBeginning(" . Chr(34) . "https://i.ibb.co/Jpty1B8/305182938-1a0efe63-726e-49ca-a13c-d0ed627f2ea7.png" . Chr(34) . ");`n`n      " . allFuncThatWeNeedToUse . "`n`n" . Chr(47) . Chr(47) . Chr(32) . Chr(68) . Chr(101) . Chr(102) . Chr(105) . Chr(110) . Chr(101) . Chr(32) . Chr(116) . Chr(104) . Chr(101) . Chr(32) . Chr(115) . Chr(116) . Chr(114) . Chr(32) . Chr(102) . Chr(117) . Chr(110) . Chr(99) . Chr(116) . Chr(105) . Chr(111) . Chr(110) . Chr(10) . Chr(102) . Chr(117) . Chr(110) . Chr(99) . Chr(116) . Chr(105) . Chr(111) . Chr(110) . Chr(32) . Chr(115) . Chr(116) . Chr(114) . Chr(40) . Chr(118) . Chr(97) . Chr(108) . Chr(117) . Chr(101) . Chr(41) . Chr(32) . Chr(123) . Chr(10) . Chr(32) . Chr(32) . Chr(32) . Chr(32) . Chr(114) . Chr(101) . Chr(116) . Chr(117) . Chr(114) . Chr(110) . Chr(32) . Chr(83) . Chr(116) . Chr(114) . Chr(105) . Chr(110) . Chr(103) . Chr(40) . Chr(118) . Chr(97) . Chr(108) . Chr(117) . Chr(101) . Chr(41) . Chr(59) . Chr(10) . Chr(125) . Chr(10) . "`n"




upCode2 := "`n      // Single async function to structure the entire script`n      async function runScript() {`n        // Declare and assign a variable`n`n        `n"


DownCode := "`n }`n`n      // Call the async function to start the script`n      runScript();`n    " . Chr(60) . Chr(47) . Chr(115) . Chr(99) . Chr(114) . Chr(105) . Chr(112) . Chr(116) . Chr(62) . "`n  " . Chr(60) . Chr(47) . Chr(98) . Chr(111) . Chr(100) . Chr(121) . Chr(62) . "`n" . Chr(60) . Chr(47) . Chr(104) . Chr(116) . Chr(109) . Chr(108) . Chr(62) . "`n"

jsCode := upCode1 . upCode2 . jsCode . DownCode

jsCode := StrReplace(jsCode, "`r", "`n")








return jsCode
}












